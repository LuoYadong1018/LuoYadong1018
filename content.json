[{"title":"Mybatis-plus","date":"2019-12-24T04:28:04.301Z","path":"2019/12/24/Mybatis-plus/","text":"Mybatis-Plus特性 特点 概述 无入侵 只增强不做改变，引入之后现有工程不产生影响 损耗小 启动时自动注入基本CURD，性能基本无损耗，直接面向对象操作 强大的CRUD 操作 内置通用Mapper、Service，通过少量配置即可实现单表大部分 CRUD操作，更有强大的条件构造器，满足各类使用需求 支持Lambda形式调用 通过Lambda表达式，方便的编写各类查询条件，无需再担心字段写错 支持主键自动生成 支持多达 4 种主键策略（内含分布式唯一ID 生成器 - Sequence），可自由配置，完美解决主键问题 支持 ActiveRecord 模式 支持 ActiveRecord 形式调用，实体类只需继承 Model 类即可进行强大的 CRUD 操作 支持自定义全局通用操作 支持全局通用方法注入Write once, use anywhere 内置代码生成器 采用代码或者 Maven 插件可快速生成 Mapper 、Model、Service 、 Controller 层代码，支持模板引擎以及自定义配置 内置分页插件 基于 MyBatis物理分页，开发者无需关心具体操作，配置好插件之后，写分页等同于普通 List 查询 分页插件支持多种数据库 支持MySQL、MariaDB、Oracle、DB2、H2、HSQL、SQLite、Postgre、SQLServer 等多种数据库 内置性能分析插件 可输出Sql语句以及其执行时间，建议开发测试时启用该功能，能快速揪出慢查询 内置全局拦截插件 提供全表delete、update操作智能分析阻断，也可自定义拦截规则，预防误操作 框架结构 使用1、安装 Maven12345&lt;dependency&gt; &lt;groupId&gt;com.baomidou&lt;/groupId&gt; &lt;artifactId&gt;mybatis-plus-boot-starter&lt;/artifactId&gt; &lt;version&gt;3.3.0&lt;/version&gt;&lt;/dependency&gt; 2、配置 在SpringBoot启动类中添加@MapperScan注解，扫描Mapper文件夹 123456789@SpringBootApplication@MapperScan(&quot;com.baomidou.mybatisplus.samples.quickstart.mapper&quot;)public class Application &#123; public static void main(String[] args) &#123; SpringApplication.run(QuickStartApplication.class, args); &#125;&#125; 在application.yml配置文件中添加Mysql数据库相关配置 123456789 # DataSource Configspring: datasource: driver-class-name: org.h2.Driver schema: classpath:db/schema-h2.sql data: classpath:db/data-h2.sql url: jdbc:h2:mem:test username: root password: test 3、测试 实体类 1234567@Datapublic class User &#123; private Long id; private String name; private Integer age; private String email;&#125; Mapper类 123public interface UserMapper extends BaseMapper&lt;User&gt; &#123;&#125; 测试类 12345678910111213141516@RunWith(SpringRunner.class)@SpringBootTestpublic class SampleTest &#123; @Autowired private UserMapper userMapper; @Test public void testSelect() &#123; System.out.println((&quot;----- selectAll method test ------&quot;)); List&lt;User&gt; userList = userMapper.selectList(null); Assert.assertEquals(5, userList.size()); userList.forEach(System.out::println); &#125;&#125; UserMapper中的selectList()方法的参数为MP内置的条件封装Wrapper，所以不填写即无任何条件 4、注解4.1 @TableName 表名注解 属性 类型 必须指定 默认值 描述 value String 否 “” 表名 schema String 否 “” schema(@since3.1.1) keepGlobalPrefix boolean 否 false 是否保持使用全局的 tablePrefix 的值(如果设置了全局 tablePrefix 且自行设置了 value 的值) resultMap String 否 “” xml中resultMap的id autoResultMap boolean 否 false 是否自动构建 resultMap 并使用(如果设置 resultMap 则不会进行 resultMap 的自动构建并注入)(@since 3.1.2) 关于autoResultMap的说明: 从mp的原理上讲,因为底层是mybatis,所以一些mybatis的常识你要知道,mp只是帮你注入了常用crud 注入之前可以说是动态的(根据你entity的字段以及注解变化而变化),但是注入之后是静态的(等于你写在xml的东西)而对于直接指定typeHandler,mybatis只支持你写在2个地方: 1、定义在resultMap里,只作用于select查询的返回结果封装 2、定义在insert和updatesql的#{property}里的property后面(例:#{property,typehandler=xxx.xxx.xxx}),只作用于设置值而除了这两种直接指定typeHandler,mybatis有一个全局的扫描你自己的typeHandler包的配置,这是根据你的property的类型去找typeHandler并使用这个属性的作用就是:如果你的property类型… todo 4.2 @TableId 主键注解 属性 类型 必须指定 默认值 描述 value String 否 “” 主键字段名 type Enum 否 IdType.NONE 主键类型 4.2.1 IdType 值 描述 AUTO 数据库自增 INPUT 自行输入 ID_WORKER 分布式全局唯一ID长整型类型 UUID 32位UUID字符串 NONE 无状态 ID_WORKER_STR 分布式全局唯一ID字符串类型 4.3 @TableField 字段注解 属性 类 型 必须指定 默认值 描述 value String 否 “” 字段名 el String 否 “” 映射为原生 #{ … } 逻辑,相当于写在 xml 里的 #{ … } 部分 exist boolean 否 true 是否为数据库表字段 condition String 否 “” 字段 where 实体查询比较条件,有值设置则按设置的值为准,没有则为默认全局 update String 否 “” 字段 update set 部分注入, 例update=”%s+1”：表示更新时会set version=version+1(该属性优先级高于 el 属性) insertStrategy Enum N DEFAULT 例：NOT_NULL: insert into table_a(column) values (#{columnProperty}) (since v_3.1.2) updateStrategy Enum N DEFAULT 例：IGNORED: update table_a set column=#{columnProperty} (since v_3.1.2) whereStrategy Enum N DEFAULT 例：NOT_EMPTY: where column=#{columnProperty} (since v_3.1.2) fill num 否 FieldFill.DEFAULT 字段自动填充策略 select boolean 否 true 是否进行 select 查询 keepGlobalFormat Boolean 否 false 是否保持使用全局的 format 进行处理(@since 3.1.1) 4.3.1 FiledStrategy 值 描述 IGNORED 忽略判断 NOT_NULL 非忽略判断 NOT_EMPTY 非空判断(只对字符串类型字段,其他类型字段依然为非NULL判断) DEFAULT 追随全局配置 4.3.2 FileFill 值 描述 DEFAULT 默认不处理 INSERT 插入时填充字段 UPDATE 更新时填充字段 INSERT_UPDATE 插入和更新时填充字段 4.4 @Version 乐观锁注解、标记@version在字段上 4.4.1 EnumValue 通枚举类注解（注解在枚举字段上） 4.4.2 TableLogic 表字段逻辑处理注解（逻辑删除） 属性 类型 必须指定 默认值 描述 value String 否 “” 逻辑未删除值 delval String 否 “” 逻辑删除值 4.4.3 SqlParser 租户注解(3.1.1开始支持注解在mapper上) 属性 类型 必须指定 默认值 描述 filter boolean 否 flase true: 表示过滤SQL解析，即不会进入ISqlParser解析链，否则会进解析链并追加例如tenant_id等条件 4.5 @keySequence 序列主键策略Oracle 属性 类型 必须指定 默认值 描述 value String 否 “” 序列名 clazz Class 否 Long.class id的类型, 可以指定String.class，这样返回的Sequence值是字符串”1” 核心功能1、代码生成器1.1 添加依赖 添加代码生成器依赖 12345&lt;dependency&gt; &lt;groupId&gt;com.baomidou&lt;/groupId&gt; &lt;artifactId&gt;mybatis-plus-generator&lt;/artifactId&gt; &lt;version&gt;3.3.0&lt;/version&gt;&lt;/dependency&gt; 添加 模板引擎 依赖，MyBatis-Plus 支持 Velocity（默认）、Freemarker、Beetl，用户可以选择自己熟悉的模板引擎，如果都不满足您的要求，可以采用自定义模板引擎。 Velocity（默认）： 12345&lt;dependency&gt; &lt;groupId&gt;org.apache.velocity&lt;/groupId&gt; &lt;artifactId&gt;velocity-engine-core&lt;/artifactId&gt; &lt;version&gt;2.1&lt;/version&gt;&lt;/dependency&gt; Freemarker： 12345&lt;dependency&gt; &lt;groupId&gt;org.freemarker&lt;/groupId&gt; &lt;artifactId&gt;freemarker&lt;/artifactId&gt; &lt;version&gt;2.3.29&lt;/version&gt;&lt;/dependency&gt; Beetl: 12345&lt;dependency&gt; &lt;groupId&gt;com.ibeetl&lt;/groupId&gt; &lt;artifactId&gt;beetl&lt;/artifactId&gt; &lt;version&gt;3.0.15.RELEASE&lt;/version&gt;&lt;/dependency&gt; 注意！如果您选择了非默认引擎，需要在 AutoGenerator 中 设置模板引擎。 12345678910111213AutoGenerator generator = new AutoGenerator();// set freemarker enginegenerator.setTemplateEngine(new FreemarkerTemplateEngine());// set beetl enginegenerator.setTemplateEngine(new BeetlTemplateEngine());// set custom engine (reference class is your custom engine class)generator.setTemplateEngine(new CustomTemplateEngine());// other config... 1.2 编写配置 配置GlobalConfig 1234GlobalConfig globalConfig = new GlobalConfig();globalConfig.setOutputDir(System.getProperty(&quot;user.dir&quot;) + &quot;/src/main/java&quot;);globalConfig.setAuthor(&quot;jobob&quot;);globalConfig.setOpen(false); 配置 DataSourceConfig 12345DataSourceConfig dataSourceConfig = new DataSourceConfig();dataSourceConfig.setUrl(&quot;jdbc:mysql://localhost:3306/ant?useUnicode=true&amp;useSSL=false&amp;characterEncoding=utf8&quot;);dataSourceConfig.setDriverName(&quot;com.mysql.jdbc.Driver&quot;);dataSourceConfig.setUsername(&quot;root&quot;);dataSourceConfig.setPassword(&quot;password&quot;); 1.3 自定义模板引擎请继承类 com.baomidou.mybatisplus.generator.engine.AbstractTemplateEngine 1.4 自定义代码模板12345678//指定自定义模板路径, 位置：/resources/templates/entity2.java.ftl(或者是.vm)//注意不要带上.ftl(或者是.vm), 会根据使用的模板引擎自动识别TemplateConfig templateConfig = new TemplateConfig() .setEntity(&quot;templates/entity2.java&quot;);AutoGenerator mpg = new AutoGenerator();//配置自定义模板mpg.setTemplate(templateConfig); 1.5 自定义属性注入12345678910111213InjectionConfig injectionConfig = new InjectionConfig() &#123; //自定义属性注入:abc //在.ftl(或者是.vm)模板中，通过$&#123;cfg.abc&#125;获取属性 @Override public void initMap() &#123; Map&lt;String, Object&gt; map = new HashMap&lt;&gt;(); map.put(&quot;abc&quot;, this.getConfig().getGlobalConfig().getAuthor() + &quot;-mp&quot;); this.setMap(map); &#125;&#125;;AutoGenerator mpg = new AutoGenerator();//配置自定义属性注入mpg.setCfg(injectionConfig); 12345entity2.java.ftl自定义属性注入abc=$&#123;cfg.abc&#125;entity2.java.vm自定义属性注入abc=$!&#123;cfg.abc&#125; 1.6 字段其他字段查询注入 12345678910111213new DataSourceConfig().setDbQuery(new MySqlQuery() &#123; /** * 重写父类预留查询自定义字段&lt;br&gt; * 这里查询的 SQL 对应父类 tableFieldsSql 的查询字段，默认不能满足你的需求请重写它&lt;br&gt; * 模板中调用： table.fields 获取所有字段信息， * 然后循环字段获取 field.customMap 从 MAP 中获取注入字段如下 NULL 或者 PRIVILEGES */ @Override public String[] fieldCustom() &#123; return new String[]&#123;&quot;NULL&quot;, &quot;PRIVILEGES&quot;&#125;; &#125;&#125;) 2、CRUD接口2.1 Service CRUD接口 说明 通用 Service CRUD 封装IService接口，进一步封装 CRUD 采用 get 查询单行 remove 删除 list 查询集合 page 分页 前缀命名方式区分 Mapper 层避免混淆 泛型T为任意实体对象 建议如果存在自定义通用 Service 方法的可能，请创建自己的 IBaseService 继承 Mybatis-Plus 提供的基类 对象 Wrapper 为 条件构造器 2.1.1 Save123456// 插入一条记录（选择字段，策略插入）boolean save(T entity);// 插入（批量）boolean saveBatch(Collection&lt;T&gt; entityList);// 插入（批量）boolean saveBatch(Collection&lt;T&gt; entityList, int batchSize); 参数说明 类型 参数名 描述 T entity 实体对象 Collection entityList 实体对象集合 int batchSize 插入批次数量 2.1.2 SaveOrUpdate12345678// TableId 注解存在更新记录，否插入一条记录boolean saveOrUpdate(T entity);// 根据updateWrapper尝试更新，否继续执行saveOrUpdate(T)方法boolean saveOrUpdate(T entity, Wrapper&lt;T&gt; updateWrapper);// 批量修改插入boolean saveOrUpdateBatch(Collection&lt;T&gt; entityList);// 批量修改插入boolean saveOrUpdateBatch(Collection&lt;T&gt; entityList, int batchSize); 参数说明 类型 参数名 描述 T entity 实体对象 Wrapper updateWrapper 实体对象封装操作类UpdateWrapper Collection entityList 实体对象集合 int batchSize 插入批次数量 2.1.3 Remove12345678// 根据 entity 条件，删除记录boolean remove(Wrapper&lt;T&gt; queryWrapper);// 根据 ID 删除boolean removeById(Serializable id);// 根据 columnMap 条件，删除记录boolean removeByMap(Map&lt;String, Object&gt; columnMap);// 删除（根据ID 批量删除）boolean removeByIds(Collection&lt;? extends Serializable&gt; idList); 参数说明 类型 参数名 描述 Wrapper queryWrapper 实体包装类QueryWrapper Serializable id 主键ID Map&lt;String, Object&gt; columnMap 表字段 map 对象 Collection&lt;? extends Serializable&gt; idList 主键ID列表 2.1.4 Update12345678910// 根据 UpdateWrapper 条件，更新记录 需要设置sqlsetboolean update(Wrapper&lt;T&gt; updateWrapper);// 根据 whereEntity 条件，更新记录boolean update(T entity, Wrapper&lt;T&gt; updateWrapper);// 根据 ID 选择修改boolean updateById(T entity);// 根据ID 批量更新boolean updateBatchById(Collection&lt;T&gt; entityList);// 根据ID 批量更新boolean updateBatchById(Collection&lt;T&gt; entityList, int batchSize); 参数说明 类型 参数名 描述 Wrapper updateWrapper 实体对象封装操作类UpdateWrapper T entity 实体对象 Collection entityList 实体对象集合 int batchSize 更新批次数量 2.1.5 Get12345678910// 根据 ID 查询T getById(Serializable id);// 根据 Wrapper，查询一条记录。结果集，如果是多个会抛出异常，随机取一条加上限制条件 wrapper.last(&quot;LIMIT 1&quot;)T getOne(Wrapper&lt;T&gt; queryWrapper);// 根据 Wrapper，查询一条记录T getOne(Wrapper&lt;T&gt; queryWrapper, boolean throwEx);// 根据 Wrapper，查询一条记录Map&lt;String, Object&gt; getMap(Wrapper&lt;T&gt; queryWrapper);// 根据 Wrapper，查询一条记录&lt;V&gt; V getObj(Wrapper&lt;T&gt; queryWrapper, Function&lt;? super Object, V&gt; mapper); 参数说明 类型 参数名 描述 Serializable id 主键Id Wrapper queryWrapper 实体对象封装操作类QueryWrapper boolean throwEx 有多个result是否抛出异常 T entity 实体对象 Function&lt;? super Object,V&gt; mapper 转换函数 2.1.6 List1234567891011121314151617181920//查询所有List&lt;T&gt; list();// 查询列表List&lt;T&gt; list(Wrapper&lt;T&gt; queryWrapper);// 查询（根据ID 批量查询）Collection&lt;T&gt; listByIds(Collection&lt;? extends Serializable&gt; idList);// 查询（根据 columnMap 条件）Collection&lt;T&gt; listByMap(Map&lt;String, Object&gt; columnMap);// 查询所有列表List&lt;Map&lt;String, Object&gt;&gt; listMaps();// 查询列表List&lt;Map&lt;String, Object&gt;&gt; listMaps(Wrapper&lt;T&gt; queryWrapper);// 查询全部记录List&lt;Object&gt; listObjs();// 查询全部记录&lt;V&gt; List&lt;V&gt; listObjs(Function&lt;? super Object, V&gt; mapper);// 根据 Wrapper 条件，查询全部记录List&lt;Object&gt; listObjs(Wrapper&lt;T&gt; queryWrapper);// 根据 Wrapper 条件，查询全部记录&lt;V&gt; List&lt;V&gt; listObjs(Wrapper&lt;T&gt; queryWrapper, Function&lt;? super Object, V&gt; mapper); 参数说明 类型 参数名 描述 Wrapper queryWrapper 实体对象封装操作类QueryWrapper Collection&lt;? extends Serializable idList 主键ID列表 Map&lt;? String,Object&gt; columnMap 表字段map对象 Function&lt;? super Object&gt; mapper 转换函数 2.1.7 Page12345678// 无条件翻页查询IPage&lt;T&gt; page(IPage&lt;T&gt; page);// 翻页查询IPage&lt;T&gt; page(IPage&lt;T&gt; page, Wrapper&lt;T&gt; queryWrapper);// 无条件翻页查询IPage&lt;Map&lt;String, Object&gt;&gt; pageMaps(IPage&lt;T&gt; page);// 翻页查询IPage&lt;Map&lt;String, Object&gt;&gt; pageMaps(IPage&lt;T&gt; page, Wrapper&lt;T&gt; queryWrapper); 参数说明 类型 参数名 描述 IPage page 翻页对象 Wrapper queryWrapper 实体对象封装操作类QueryWrapper 2.1.8 Count1234// 查询总记录数int count();// 根据 Wrapper 条件，查询总记录数int count(Wrapper&lt;T&gt; queryWrapper); 参数说明 类型 参数名 描述 Wrapper queryWrapper 实体对象封装操作类QueryWrapper 2.1.9 Chain query 12345678// 链式查询 普通QueryChainWrapper&lt;T&gt; query();// 链式查询 lambda 式。注意：不支持 KotlinLambdaQueryChainWrapper&lt;T&gt; lambdaQuery(); // 示例：query().eq(&quot;column&quot;, value).one();lambdaQuery().eq(Entity::getId, value).list(); update 12345678// 链式更改 普通UpdateChainWrapper&lt;T&gt; update();// 链式更改 lambda 式。注意：不支持 Kotlin LambdaUpdateChainWrapper&lt;T&gt; lambdaUpdate();// 示例：update().eq(&quot;column&quot;, value).remove();lambdaUpdate().eq(Entity::getId, value).update(entity); 2.2 Mapper CRUD接口 说明 通用 CRUD 封装BaseMapper接口，为 Mybatis-Plus 启动时自动解析实体表关系映射转换为 Mybatis 内部对象注入容器 泛型T为任意实体对象 参数 Serializable 为任意类型主键 Mybatis-Plus 不推荐使用复合主键约定每一张表都有自己的唯一 id 主键 对象Wrapper为条件构造器 2.2.1 Insert12// 插入一条记录int insert(T entity); 参数说明 类型 参数名 描述 T entity 实体对象 2.2.2 Delete12345678// 根据 entity 条件，删除记录int delete(@Param(Constants.WRAPPER) Wrapper&lt;T&gt; wrapper);// 删除（根据ID 批量删除）int deleteBatchIds(@Param(Constants.COLLECTION) Collection&lt;? extends Serializable&gt; idList);// 根据 ID 删除int deleteById(Serializable id);// 根据 columnMap 条件，删除记录int deleteByMap(@Param(Constants.COLUMN_MAP) Map&lt;String, Object&gt; columnMap); 参数说明 类型 参数名 描述 TWrapper &lt; T &gt; wrapper 实体对象封装操作类可以为 null Collection &lt;? extends Serializable&gt; idList 主键ID列表不能为null以及 empty Serializable id 主键ID Map &lt; String, Object&gt; columnMap 表字段 map 对 2.2.3 Update1234// 根据 whereEntity 条件，更新记录int update(@Param(Constants.ENTITY) T entity, @Param(Constants.WRAPPER) Wrapper&lt;T&gt; updateWrapper);// 根据 ID 修改int updateById(@Param(Constants.ENTITY) T entity); 参数说明 类型 参数名 描述 T entity 实体对象（set条件值，可为null） Wrapper updateWrapper 实体对象封装操作类（可以为 null,里面的 entity 用于生成 where 语句） 2.2.4 Select12345678910111213141516171819202122// 根据 ID 查询T selectById(Serializable id);// 根据 entity 条件，查询一条记录T selectOne(@Param(Constants.WRAPPER) Wrapper&lt;T&gt; queryWrapper);// 查询（根据ID 批量查询）List&lt;T&gt; selectBatchIds(@Param(Constants.COLLECTION) Collection&lt;? extends Serializable&gt; idList);// 根据 entity 条件，查询全部记录List&lt;T&gt; selectList(@Param(Constants.WRAPPER) Wrapper&lt;T&gt; queryWrapper);// 查询（根据 columnMap 条件）List&lt;T&gt; selectByMap(@Param(Constants.COLUMN_MAP) Map&lt;String, Object&gt; columnMap);// 根据 Wrapper 条件，查询全部记录List&lt;Map&lt;String, Object&gt;&gt; selectMaps(@Param(Constants.WRAPPER) Wrapper&lt;T&gt; queryWrapper);// 根据 Wrapper 条件，查询全部记录。注意： 只返回第一个字段的值List&lt;Object&gt; selectObjs(@Param(Constants.WRAPPER) Wrapper&lt;T&gt; queryWrapper);// 根据 entity 条件，查询全部记录（并翻页）IPage&lt;T&gt; selectPage(IPage&lt;T&gt; page, @Param(Constants.WRAPPER) Wrapper&lt;T&gt; queryWrapper);// 根据 Wrapper 条件，查询全部记录（并翻页）IPage&lt;Map&lt;String, Object&gt;&gt; selectMapsPage(IPage&lt;T&gt; page, @Param(Constants.WRAPPER) Wrapper&lt;T&gt; queryWrapper);// 根据 Wrapper 条件，查询总记录数Integer selectCount(@Param(Constants.WRAPPER) Wrapper&lt;T&gt; queryWrapper); 参数说明 类型 参数名 描述 Serilizable id 主键Id Wrapper queryWrapper 实体对象封装操作类（可以为null） Collection&lt;? extends Serializable&gt; idList 主键ID列表不能为null以及empty Map&lt;String,Object&gt; columnMap 表字段map对象 IPage page 分页查询条件（可以为 RowBounds.DEFAULT） 2.2.5 mapper层 选装件 说明： 选装件位于 com.baomidou.mybatisplus.extension.injector.methods.additional 包下需要配合Sql 注入器使用 AlwayUpdateSomeColumnById 1int alwaysUpdateSomeColumnById(T entity); insertBatchSomeColumn 1int insertBatchSomeColumn(List&lt;T&gt; entityList); deleteByIdWithFill 1int deleteByIdWithFill(T entity);","tags":[{"name":"笔记","slug":"笔记","permalink":"http://luoyd.cn/tags/笔记/"},{"name":"持久层框架","slug":"持久层框架","permalink":"http://luoyd.cn/tags/持久层框架/"},{"name":"Mybatis-plus","slug":"Mybatis-plus","permalink":"http://luoyd.cn/tags/Mybatis-plus/"},{"name":"springboot","slug":"springboot","permalink":"http://luoyd.cn/tags/springboot/"}]},{"title":"学生信息管理系统SQL语句","date":"2019-11-13T07:02:53.234Z","path":"2019/11/13/学生信息管理系统sql/","text":"student(学号#,姓名,性别,年龄) course(课程号#，课程名，教师号#) score(学号#，课程号#，成绩) teacher(教师号#，教师名) 1.查询“001”课程比“002”课程成绩高的所有学生的学号 12select a.stuNo from score a,score b where a.cNo=&apos;c001&apos; and b.cNo=&apos;c002&apos; and a.stuNo=b.stuNo and a.score&gt;b.score 2.查询平均成绩大于60分的同学的学号和平均成绩 123select stuNo,avg(score)from score group by stuNo having avg(score)&gt;60 3.查询所有同学的学号、姓名、选课数、总成绩 123select a.stuNo,a.stuName,count(cNo),sum(score) from student a,score b where a.stuNo=b.stuNo group by a.stuNo,a.stuName 4.查询姓“赵”的老师的个数 123select count(tName),tName from teacher where tName like &apos;赵%&apos; group by tName 5.查询没学过“某某”老师课的同学的学号、姓名 1234select stuNo,stuName from student where stuNo not in (select a.stuNo from student a,score b where a.stuNo=b.stuNo and cNo in (select d.cNo from teacher c,course d where c.tNo=d.tNo and c.tName=&apos;钱市保&apos;)) 6.查询学过“001”并且也学过编号“002”课程的同学的学号、姓名； 12select a.stuNo,a.stuName from student a,score b,score c where a.stuNo=b.stuNo and b.stuNo=c.stuNo and b.cNo=&apos;c001&apos; and c.cNo=&apos;c002&apos; 7.查询学过“某某”老师所教的所有课的同学的学号、姓名 123456select stuNo,stuName from student where stuNo in (select stuNo from score a,course b,teacher c where a.cNo=b.cNo and b.tNo=c.tNo and c.tName=&apos;钱市保&apos; group by stuNo having count(a.cNo)&gt;=(select count(cNo) from course d,teacher e where d.tNo=e.tNo and e.tName=&apos;钱市保&apos;)) 老师所教课程为一门课 123select stuNo,stuName from student where stuNo in (select a.stuNo from student a,score b where a.stuNo=b.stuNo and b.cNo in (select cNo from teacher c,course d where c.tNo=d.tNo and c.tName=&apos;钱市保&apos;)) 8.查询课程编号“002”的成绩比课程编号“001”课程低的所有同学的学号、姓名 1234select stuNo,stuName from student where stuNo in (select a.stuNo from score a,score b where a.cNo=&apos;c001&apos; and b.cNo=&apos;c002&apos; and a.stuNo=b.stuNo and a.score&gt;b.score) 9.查询所有课程成绩小于60分的同学的学号、姓名 12345select stuNo,stuName from student where stuNo in (select stuNo from score where score&lt;60 group by stuNo having count(cNo)=(select count(cNo) from course)) 10.查询没有学全所有课的同学的学号、姓名 1234select b.stuNo,a.stuName,count(b.cNo) from student a,score b where a.stuNo=b.stuNo group by b.stuNo,a.stuName having count(b.cNo)&lt;(select count(cNo) from course) 11.查询至少有一门课与学号为“1”的同学所学相同的同学的学号和姓名 123select distinct a.stuNo,stuName from student a,score b where a.stuNo=b.stuNo and cNo in (select cNo from score where stuNo=&apos;001&apos;) 12.查询至少学过学号为“001”同学一门课的其他同学学号和姓名 123&amp;&amp;&amp; select distinct a.stuNo,stuName from student a,score b where a.stuNo=b.stuNo and cNo all join (select cNo from score where stuNo=&apos;001&apos;) 13.把“SC”表中“某某”老师教的课的成绩都更改为此课程的平均成绩 12345update score set score=savg from score d,(select avg(score) as savg,a.cNo from score a,course b,teacher c where a.cNo=b.cNo and b.tNo=c.tNo and tName=&apos;钱市保&apos; group by a.cNo) e where d.cNo=e.cNo 老师所教课程为一门课 123456update score set score=(select avg(score) from score group by cNo having cNo=(select a.cNo from course a,teacher b where a.tNo=b.tNo and b.tName=&apos;钱市保&apos;)) where cNo=(select a.cNo from course a,teacher b where a.tNo=b.tNo and b.tName=&apos;钱市保&apos;) select * from score 14.查询和“001”号的同学学习的课程完全相同的其他同学学号和姓名 1234select stuNo from score where cNo in (select cNo from score where stuNo=&apos;005&apos;) group by stuNo having count(cNo)=(select count(*) from score where stuNo=&apos;005&apos;) 15.删除学习“某某”老师课的SC表记录 12delete from score where cNo=(select cNo from course a,teacher b where a.tNo=b.tNo and b.tName=&apos;钱市保&apos;) select * from score 16.向SC表中插入一些记录，这些记录要求符合以下条件：没有上过编号“003”课程的同学学号、2号课的平均成绩 17.按平均成绩从高到低显示所有学生的“C语言”、“sql”、“java”三门的课程成绩 按如下形式显示： 学生ID,C语言,sql,JAVA,有效课程数,有效平均分 18.查询各科成绩最高和最低的分：以如下形式显示：课程ID，最高分，最低分 12select cNo,max(score) as 最高分,min(score) as 最低分 from score group by cNo 19.按各科平均成绩从低到高和及格率的百分数从高到低顺序 123456789101112select avg(c.score),count(a.score)/count(b.score) from score c,(select a.cNo,count(a.score) from score a where a.score&lt;60 group by a.cNo) d,(select b.cNo,count(b.score) from score b group by b.cNo) e where d.cNo=e.cNo group by c.cNo order by avg(c.score) desc (select a.cNo,count(a.score) from score a where a.score&lt;60 group by a.cNo) d (select b.cNo,count(b.score) from score b group by b.cNo) e 20.查询如下课程平均成绩和及格率的百分数(用”1行”显示): C语言（001），数据结构（002），JAVA（003），离散数学（004） 21.查询不同老师所教不同课程平均分从高到低显示 1234select tNo,a.cNo,avg(score) from course a,score b where a.cNo=b.cNo group by tNo,a.cNo order by avg(score) desc 22.查询如下课程成绩第 3 名到第 6 名的学生成绩单：C语言（001），数据结构（002），JAVA（003），离散数学（004） [学生ID],[学生姓名],C语言,数据结构,JAVA,离散数学,平均成绩 23.统计列印各科成绩,各分数段人数:课程ID,课程名称,[100-85],[85-70],[70-60],[ &lt;60] 1234567select distinct e.cNo,count(a.stuNo) as &apos;100-85&apos;,count(b.stuNo) as &apos;85-70&apos;,count(c.stuNo) as &apos;70-60&apos;,count(d.stuNo) as &apos;&lt;60&apos; from score a,score b,score c,score d,score e where a.cNo in (select cNo from course) and a.score between 85 and 100 and b.cNo in (select cNo from course) and b.score between 71 and 84 and c.cNo in (select cNo from course) and c.score between 60 and 70 and d.cNo in (select cNo from course) and d.score&lt;60 group by e.cNo,a.stuNo,b.stuNo,c.stuNo,d.stuNo having a.stuNo&lt;&gt;b.stuNo and a.stuNo&lt;&gt;c.stuNo and a.stuNo&lt;&gt;d.stuNo and b.stuNo&lt;&gt;c.stuNo and b.stuNo&lt;&gt;d.stuNo and c.stuNo&lt;&gt;d.stuNo select cNo,count(stuNo) from score where score between 70 and 100 and cNo=&apos;c001&apos; group by cNo 24.查询学生平均成绩及其名次 123select stuNo,avg(score) from score group by stuNo order by avg(score) desc 25.查询各科成绩前三名的记录:(不考虑成绩并列情况) 123456select a.stuNo,a.cNo,a.score from score a where a.score in (select top 3 score from score b where a.cNo=b.cNo order by score) order by a.cNo 26.查询每门课程被选修的学生数 123select b.cNo ,count(stuNo) from score a right join course b on a.cNo=b.cNo group by b.cNo 27.查询出只选修了一门课程的全部学生的学号和姓名 1234select b.stuNo,a.stuName from student a,score b where a.stuNo=b.stuNo group by b.stuNo,a.stuName having count(b.cNo)=1 28.查询男生、女生人数 12select stuSex,count(stuSex) from student group by stuSex 29.查询姓‘zhao’的学生名单 12select * from student where stuName like &apos;赵%&apos; 30.查询同名同性学生名单，并统计同名人数 123select a.stuNo,a.stuName,count(a.stuNo) from student a,student b where a.stuName=b.stuName and a.stuSex=b.stuSex and a.stuNo&lt;&gt;b.stuNo group by a.stuNo,a.stuName 31.1981年出生的学生名单(注：Student表中Sage列的类型是datetime 32.、查询每门课程的平均成绩，结果按平均成绩升序排列，平均成绩相同时，按课程号降序排列 123select cNo,avg(score) from score group by cNo order by avg(score) asc,cNo 33.查询平均成绩大于70的所有学生的学号、姓名和平均成绩 1234select b.stuNo,a.stuName,avg(score) from student a,score b where a.stuNo=b.stuNo group by b.stuNo,a.stuName having avg(score)&gt;70 34.查询课程名称为“java”，且分数低于70的学生姓名和分数 12select a.stuName,b.score from student a,score b where a.stuNo=b.stuNo and score&lt;70 and b.cNo=(select cNo from course where cName=&apos;java&apos;) 35.查询所有学生的选课情况 1234567select a.stuNo,c.cNo from student a,score b,course c where a.stuNo=b.stuNo and b.cNo=c.cNo order by a.stuNo select a.stuNo,cNo from student a left join (select a.stuNo,c.cNo from student a,score b,course c where a.stuNo=b.stuNo and b.cNo=c.cNo) d on a.stuNo=d.stuNo order by a.stuNo 36.查询任何一门课程成绩在70分以上的姓名、课程名称和分数 12select a.stuName,b.cNo,score from student a,score b where score&gt;70 and a.stuNo=b.stuNo 37.查询不及格的课程，并按课程号从大到小排列 123select cNo,score from score where score&lt;60 order by cNo 38.查询课程编号为003且课程成绩在60分以上的学生的学号和姓名 12select b.stuNo,a.stuName from student a,score b where b.cNo=&apos;c003&apos; and score&gt;60 and a.stuNo=b.stuNo 39.求选了课程的学生人数 1select count(a.stuNo) from (select distinct stuNo from score) a 40.查询选修“赵”老师所授课程的学生中，成绩最高的学生姓名及其成绩 1234select b.stuNo,a.stuName,max(score) from student a,score b where a.stuNo=b.stuNo and b.cNo in (select a.cNo from course a,teacher b where a.tNo=b.tNo and b.tName=&apos;钱市保&apos;) group by b.stuNo,a.stuName,b.cNo having b.cNo in (select a.cNo from course a,teacher b where a.tNo=b.tNo and b.tName=&apos;钱市保&apos;) 41.查询各个课程及相应的选修人数 12345select cNo,count(stuNo) from score group by cNo select b.cNo ,count(stuNo) from score a right join course b on a.cNo=b.cNo group by b.cNo 42.查询不同课程成绩相同的学生的学号、课程号、学生成绩 12select a.stuNo,a.cNo,a.score from score a,score b where a.stuNo=b.stuNo and a.score=b.score and a.cNo&lt;&gt;b.cNo 查询每门功成绩最好的前两名 123456select a.stuNo,a.cNo,a.score from score a where score in(select top 2 score from score b where a.cNo=b.cNo order by score desc) order by a.cNo 44.统计每门课程的学生选修人数（超过2人的课程才统计）。要求输出课程号和选修人数，查询结果按人数降序排列,若人数相同，按课程号升序排列 1234select cNo,count(stuNo) 课程数 from score group by cNo having count(stuNo)&gt;2 order by count(stuNo) desc,cNo 45.检索至少选修两门课程的学生学号 123select stuNo from score group by stuNo having count(cNo)&gt;=2 46.查询全部学生都选修的课程的课程号和课程名 1234567select a.cNo,b.cName from score a,course b where a.cNo=b.cNo group by a.cNo,b.cName having count(a.stuNo)=(select count(stuNo) from student) select a.cNo,b.cName from score a,course b group by a.cNo,b.cName,b.cNo having a.cNo=b.cNo and count(a.stuNo)=(select count(stuNo) from student) 47.查询没学过“钱”老师讲授的任一门课程的学生姓名 12345678910select stuNo,stuName from student where stuNo not in (select stuNo from score a,course b,teacher c where a.cNo=b.cNo and b.tNo=c.tNo and c.tName=&apos;钱市保&apos; group by stuNo having count(a.cNo)&lt;=(select count(cNo) from course d,teacher e where d.tNo=e.tNo and e.tName=&apos;钱市保&apos;)) select stuNo,stuName from student where stuNo not in (select stuNo from score where cNo in (select cNo from teacher c,course d where c.tNo=d.tNo and c.tName=&apos;钱市保&apos;)) 48.查询两门以上不及格课程的同学的学号及其平均成绩 1234select stuNo,avg(score) from score where score&lt;60 group by stuNo having count(cNo)&gt;2 49.检索“004”课程分数小于60，按分数降序排列的同学学号 123select stuNo from score where score&lt;60 and cNo=&apos;c004&apos; order by score desc 50.删除“2”同学的“001”课程的成绩 1delete from score where stuNo=&apos;002&apos; and cNo=&apos;c001&apos;","tags":[{"name":"悦读","slug":"悦读","permalink":"http://luoyd.cn/tags/悦读/"},{"name":"MySQL","slug":"MySQL","permalink":"http://luoyd.cn/tags/MySQL/"},{"name":"笔记","slug":"笔记","permalink":"http://luoyd.cn/tags/笔记/"},{"name":"学生管理系统","slug":"学生管理系统","permalink":"http://luoyd.cn/tags/学生管理系统/"}]},{"title":"MySQL","date":"2019-09-28T10:05:35.375Z","path":"2019/09/28/mysql/","text":"1、数据库基本操作 选择要操作的数据库 12world:数据库名use world; 显示已存在的数据库列表 1show databases; 显示指定数据库下的表的信息 1show tables; 显示指定表的列的信息 12world.country:数据库名.表名show columns from world.country; 显示指定表的索引信息 12world.country:数据库名.表名show index from world.country; 显示指定数据库下的表的详细信息 12world:数据库名show table status from world; 显示指定数据库下的表名称以字母’c’开头的表的详细信息 12world:数据库名show table status from world like &apos;c%&apos;; 显示数据库表的结构，如：字段名，字段类型等 12world.country:数据库名.表名describe world.country; 查看创建表的SQL语句 12demo.test：数据库名.表名show create table demo.test; 查看创建存储过程的SQL语句 12demo.test_proc：数据库名.存储过程名show create procedure demo.test_proc; 查看创建视图的SQL语句 12demo.test_view：数据库名.视图名show create view demo.test_view; 查看创建函数的SQL语句 12demo.test_fun：数据库名.函数名show create function demo.test_fun; 查看当前用户的数据库权限 1show grants; 查看指定用户的数据库权限 12admin@localhost:用户名@访问主机show grants for &apos;admin&apos;@&apos;localhost&apos;; 查询数据库用户信息 1select * from mysql.user; 获取服务器版本信息 1SELECT VERSION(); 获取当前数据库名 (或者返回空) 1SELECT DATABASE(); 获取当前用户名 1SELECT USER(); 获取服务器状态 1SHOW STATUS; 获取服务器配置变量 1SHOW VARIABLES; 例如： 查询自增长值的步长，即每次增加多少，默认为1。 1show variables like &apos;%auto_increment%&apos;; 设置自增长值每次增加的数值，会影响所有数据表。 1set auto_increment_increment=3; 设置自增长值的起始值，会影响所有数据表。 1set auto_increment_offset=100; mysql运行在安全模式下时，非主键条件下是无法执行update或者delete命令的 查看安全模式状态 1show variables like &apos;%sql_safe_updates%&apos;; 设置安全模式为关闭 1set sql_safe_updates=off; 获取最近一次向具有identity属性(即自增列)的表插入数据时对应的自增列的值，@@identity是系统定义的全局变量。 1select @@identity; LAST_INSERT_ID函数将返回当前连接自增列最新的 insert or update 操作生成的第一个记录的ID。因为其基于Connection的，所以也是线程安全的。 1select LAST_INSERT_ID(); 2、创建、删除用户及授权 创建一个新的用户，并设置登录密码 test:用户名;localhost:本地主机访问(如果需要其他任意主机访问，请使用通配符’%’);123456:用户密码; 1create user &apos;test&apos;@&apos;localhost&apos; identified by &apos;123456&apos;; 创建一个新的用户，不指定登录密码，即不需要登录密码 1create user &apos;test01&apos;@&apos;localhost&apos;; 删除指定的用户 1drop user &apos;test01&apos;@&apos;localhost&apos;; 修改用户名 123test@localhost:要修改的用户名和访问主机test@%:修改为的用户名和访问主机rename user &apos;test&apos;@&apos;localhost&apos; to &apos;test&apos;@&apos;%&apos;; 修改用户密码 123test@localhost:要修改的用户名和访问主机123456:新的用户密码set password for &apos;test&apos;@&apos;localhost&apos; = Password(&apos;123456&apos;); 授予指定用户’test’对于’world’数据库下’country’表的查询权限 123select:查询权限;world.country:数据库名.表名;&apos;test&apos;@&apos;localhost&apos;:用户名@访问主机;grant select on world.country to &apos;test&apos;@&apos;localhost&apos;; 立即启用修改(默认再次登录才会生效) 1flush privileges; 撤销指定用户’test’对于’world’数据库下’country’表的查询权限 12select:查询权限;world.country:数据库名.表名;&apos;test&apos;@&apos;localhost&apos;:用户名@访问主机;revoke select on world.country from &apos;test&apos;@&apos;localhost&apos;; 立即启用修改(默认再次登录才会生效) 1flush privileges; 授予指定用户’test’对于’world’数据库下所有表的查询、新增、修改、删除权限 1grant select,insert,update,delete on world.* to &apos;test&apos;@&apos;localhost&apos;; 撤销指定用户’test’对于’world’数据库下所有表的查询、新增、修改、删除权限 1revoke select,insert,update,delete on world.* from &apos;test&apos;@&apos;localhost&apos;; 授予指定用户’test’对于’world’数据库下所有表的表结构进行创建、修改、删除权限 1grant create,alter,drop on world.* to &apos;test&apos;@&apos;localhost&apos;; 撤销指定用户’test’对于’world’数据库下所有表的表结构进行创建、修改、删除权限 1revoke create,alter,drop on world.* from &apos;test&apos;@&apos;localhost&apos;; 授予指定用户’test’对于’world’数据库下所有存储过程的执行权限，并且该用户有权限转授予其他用户 1grant execute on world.* to &apos;test&apos;@&apos;localhost&apos; with grant option; 撤销指定用户’test’对于’world’数据库下所有存储过程的执行权限，转授予权限一并撤销 1revoke execute on world.* from &apos;test&apos;@&apos;localhost&apos;; 3、数据库字符校对集字符校对集，即排序规则，在某个字符集的情况下，字符集的排列顺序应该是什么，称之为校对集。 12345查看所有的字符校对集后缀为_bin:表示基于二进制编码的直接比较后缀为_ci:表示对大小写不敏感的比较后缀为_cs:表示对大小写敏感的比较show collation; 4、创建、删除数据库和表 创建一个名为’test’的数据库 1create database test; 创建一个名为’test’的数据库，如果该数据库已存在则不创建，否则再创建 并指定默认字符集为’utf8’，字符校对集为’utf8_general_ci’ 1create database if not exists test default charset utf8 collate utf8_general_ci; 删除名为’test’的数据库 1drop database test; 创建一个名为’Student’的数据表，如果该数据表已存在则不创建，否则再创建 engine:指定数据库引擎为’InnoDB’auto_increment:指定自增列的起始值为1 12345678910111213141516create table if not exists Student&#123; ID int not null auto_increment, #自动增长列 StuNo varchar(32) not null, StuName varchar(8) not null, StuSex varchar(8) null, StuBirthday tinyint null, CreateTime datetime null, primary key (ID) #指定主键列 &#125;engine=InnoDB auto_increment=1 default charset=utf8 collate=utf8_general_ci; 删除数据表 student，该操作会删除所有数据包括表结构、视图、索引、约束等。 1drop table test.student; 删除数据表中的所有数据，该操作会删除表中所有的数据，但是会保留表结构、视图、索引、约束等。 1truncate table test.student; 创建一个临时表，临时表的创建与数据表的创建类似，只不过需要添加关键字 temporary。 临时表的作用域为当前会话，即当前连接可见，当断开当前连接时会自动销毁，当然也可以手动删除，删除方式与数据表一样。 1234create temporary table Product&#123; ProName varchar(32) not null, Price decimal(10,3) not null default 0.000&#125;; 复制指定数据表的表结构到创建的新表。 1create table test.StudentBak like test.student; 复制指定数据表的表结构及所有数据到创建的新表。 1create table test.StudentBak select * from test.student; 5、DML操作 向数据表中插入数据 1234insert into student(StuNo,StuName,StuSex,Stubirthday,CreateTime) select &apos;A001&apos;,&apos;小张&apos;,&apos;男&apos;,str_to_date(&apos;1988-06-09&apos;,&apos;%Y-%m-%d&apos;),current_timestamp() union allselect &apos;A002&apos;,&apos;小红&apos;,&apos;女&apos;,str_to_date(&apos;1990-08-10&apos;,&apos;%Y-%m-%d&apos;),current_timestamp() 在插入重复的数据时，会直接跳过重复数据的插入。在有自增列或主键的数据表中不起作用，因为自增列和主键都具有唯一性。 1insert ignore into test.student(stuno,stuname,stusex,stubirthday,createtime) values (&apos;A003&apos;,&apos;小鱼&apos;,&apos;女&apos;,&apos;1991-07-07&apos;,current_timestamp()); MySQL的WHERE子句默认是不区分大小写的，如果需要区分大小写，就要在字段前加上关键字 binary 1select * from student where stuno=&apos;a001&apos;; #&apos;1&apos;, &apos;A001&apos;, &apos;小张&apos;, &apos;男&apos;, &apos;1988-06-09&apos;, &apos;2018-01-12 12:17:00&apos; select * from student where binary stuno=&apos;a001&apos;; #null limit:用于设置返回的记录数。 offset:用于设置select语句开始查询的数据偏移量，默认为零。 表示只取前10条数据 1select * from world.city limit 10; 表示跃过5条，从第6条数据开始取10条数据。 1select * from world.city limit 10 offset 5; 表示从第10条开始取5条数据。 1select * from world.city limit 10,5; regexp:用于设置正则表达式匹配项，类似于模糊匹配like。 表示查询名称以字符 ‘A’(不区分大小写)开头的记录。 1select * from world.city where Name regexp &apos;^A&apos;; 表示查询名称中包含字符串 ‘mer’ 的记录。 1select * from world.city where Name regexp &apos;mer&apos;; 表示查询名称以字符 ‘a’ 或字符 ‘b’ 开头的记录或者以字符 ‘r’ 结尾的记录。 1select * from world.city where Name regexp &apos;^\\[ab]|r$&apos;; 6、DDL操作 向指定数据表添加一列，默认添加到数据表字段的末尾。 1alter table test.student add column1 varchar(10) null; 向指定数据表添加一列，并设置默认值为：0 1alter table demo.chinesecharinfo add column IsUseful tinyint unsigned not null default 0; first关键字用于把添加的列设置为第一列。 1alter table test.student add column1 varchar(10) null first; after关键字用于把添加的列设置在指定列的后面，StuSex为指定列的列名。 1alter table test.student add column1 varchar(10) null after StuSex; 删除指定列名的列，当数据表仅剩一个字段时，无法进行删除。 1alter table test.student drop column1; 修改指定列的数据类型，并设置该列位于指定列名的列之后。 1alter table test.student modify column1 char(10) null after CreateTime; 关键字column可省略 1alter table test.student modify column column1 char(10) null after CreateTime; 修改指定列的列名和数据类型，并设置该列位于指定列名的列之后。 column1:为原列名 column2:为新的列名 1alter table test.student change column1 column2 varchar(10) null after CreateTime; 修改指定列的默认值。 1alter table test.student alter column2 set default &apos;123&apos;; 删除指定列的默认值。 1alter table test.student alter column2 drop default; 修改数据表的存储引擎。 123alter table test.student engine = myisam;alter table test.student engine = InnoDB; 修改数据表的自增长值的起始值。 1alter table test.student auto_increment=10; 重建自增长列，当删除数据过多，自增长列的值比较混乱时可以使用，但是重建时如果有新的数据插入，有可能会出现混乱。 12345alter table test.student drop ID;alter table test.student add ID int not null auto_increment first;alter table test.student add primary key(ID); 修改数据表的表名称。1alter table test.student rename to test.StudentBak; 7、索引 查看指定数据表的索引。 1show index from test.student; 删除指定的索引。 1drop index index_name on test.student; 修改表结构的方式删除索引。 1alter table test.student drop index index_name; 创建普通索引。 1create index index_name on test.student(StuNo); 修改表结构的方式添加索引，这种方式可以不指定索引名称，不指定系统会自动默认一个索引名称。 1alter table test.student add index index_name(StuNo); 创建唯一索引，指定创建唯一索引的列的值必须是唯一的，不能重复，但是可以为null。 1create unique index index_name on test.student(StuNo); 修改表结构的方式添加唯一索引。 1alter table test.student add unique index index_name(StuNo); 修改表结构的方式添加主键，必须保证添加主键的列的值不能为null，并且是唯一的，不可重复。 1alter table test.student add primary key PrimaryKey_Name(ID); 删除指定数据表的主键，删除主键时只需指定 primary key，删除索引时必须指定索引名。 注意：当主键列同时是自增长列时，不能直接删除主键，需要先删除自增长约束。 1alter table test.student drop primary key; 添加全文索引。 1alter table test.student add fulltext index_name(StuNo); 加上关键字ignore创建的唯一索引和主键，在插入重复数据时，会直接过滤掉重复数据，并且不会报错，否则就会抛出错误。 123alter ignore table test.student add primary key(ID);alter ignore table test.student add unique index index_name(StuNo); 8、事务 关闭自动提交事务 1set autocommit=0; 开启自动提交事务，默认为开启。 1set autocommit=1; 显式地开启一个事务，有以下两种方法。 12start transaction;begin; commit用于提交事务，只有当自动提交事务被关闭时需要使用。 1commit; rollback用于回滚事务，撤销对于数据库所做的未提交的操作。 1rollback; 用于设置一个保存点，identifier是指保存点的名称。 1savepoint identifier; 用于删除一个保存点，如果指定的保存点不存在，将会抛出一个异常。 1release savepoint identifier; 把事务回滚到指定的保存点。 1rollback to identifier; 设置事务隔离级别，只对下一个事务有效。 1set transaction isolation level &#123;事务隔离级别&#125;; 设置事务隔离级别，对当前会话的事务有效。 1set session transaction isolation level &#123;事务隔离级别&#125;; 设置事务隔离级别，对后面建立MySQL连接的事务有效。 1set global transaction isolation level &#123;事务隔离级别&#125;; 事务的隔离级别 1read uncommitted(读取未提交): 该级别引发的问题是脏读，会读取到其他事务未提交的数据。 read committed(读取已提交): 该级别引发的问题是不可重复读，即设置为该级别的事务只能读取到其他事务已经提交的数据，未提交的数据不能读取，会造成多次查询的结果不一致。 repeatable read(可重复读): 该级别引发的问题是幻读，即当用户修改某一范围内的数据行时，另一个事务又在该范围内插入了新的行，当用户再次读取该范围内的数据时，会发现有新的数据行没有被修改。 该级别是MySQL数据库默认的事务隔离级别。注意：该级别不会对事务查询到的行加行锁，也就是该事务查询到的行，其他事务依然能进行修改，但是能保证数据的一致性。 serializable(可串行化): 该级别是MySQL中事务隔离级别最高的，该级别会锁住事务中操作的整张表，因此不会出现以上三个级别的问题。但是这种隔离级别并发性极地，开发中很少会用到。","tags":[{"name":"悦读","slug":"悦读","permalink":"http://luoyd.cn/tags/悦读/"},{"name":"数据库","slug":"数据库","permalink":"http://luoyd.cn/tags/数据库/"},{"name":"MySQL","slug":"MySQL","permalink":"http://luoyd.cn/tags/MySQL/"},{"name":"笔记","slug":"笔记","permalink":"http://luoyd.cn/tags/笔记/"}]},{"title":"邮箱正则表达式","date":"2019-09-26T14:04:15.000Z","path":"2019/09/26/邮箱正则表达式/","text":"邮箱正则表达式/^([a-zA-Z0-9_\\.\\-])+\\@(([a-zA-Z0-9\\-])+\\.)+([a-zA-Z0-9]{2,4})+$/123456789101112131415import java.util.regex.Matcher;import java.util.regex.Pattern;public class RegexMatches &#123; public static void main(String args[]) &#123; String str = &quot;&quot;; String pattern = &quot;\\w[-\\w.+]*@([A-Za-z0-9][-A-Za-z0-9]+\\.)+[A-Za-z]&#123;2,14&#125;&quot;; Pattern r = Pattern.compile(pattern); Matcher m = r.matcher(str); System.out.println(m.matches()); &#125;&#125;","tags":[{"name":"正则表达式","slug":"正则表达式","permalink":"http://luoyd.cn/tags/正则表达式/"},{"name":"邮箱","slug":"邮箱","permalink":"http://luoyd.cn/tags/邮箱/"}]},{"title":"我的Bootstrap4 学习笔记","date":"2019-09-26T06:16:19.825Z","path":"2019/09/26/Bootstrap4/","text":"1、Bootstraps安装使用Bootstrap4 CDN12345678910111213&lt;!--新Bootstrap 4 核心CSS文件 --&gt;&lt;link rel=&quot;stylesheet&quot; href=&quot;https://cdn.staticfile.org/twitter-bootstrap/4.3.1/css/bootstrap.min.css&quot;&gt;&lt;!--Jquery文件。务必在bootstrap.min.js之前引入 --&gt;&lt;script src=&quot;https://cdn.staticfile.org/jquery/3.2.1/jquery.min.js&quot;&gt;&lt;/script&gt;&lt;!--bootstrap.bundle.min.js 用于弹窗、提示下拉菜单，包含了popper.min.js--&gt;&lt;script src=&quot;https:cdn.staticfile.org/popper.js/1.15.0/umd/popper.min.js&quot;&gt;&lt;/script&gt;&lt;br&gt;&lt;!--最新的Bootstrap4 核心JavaScript文件 --&gt;&lt;script src=&quot;https://cdn.staticfile.org/twitter-bootstrap/4.3.1/js/bootstrap.min.js&quot;&gt;&lt;/script&gt;&lt;meta name=&quot;viewport&quot; content=&quot;width=device-width,initial-scale=1,shrink-to-fit=no&quot;&gt; width=device-width 表示宽度是设备屏幕的宽度initial-scale=1 表示初始的缩放比例shrink-to-fit=no 自动适应手机屏幕宽度 容器类 .container类用于固定宽度并支持响应式布局的容器。 .container-fluid类用于100%宽度，占据全部视口（viewport）的容器。2、Bootstrap4 网格系统网格类(5个类) .col- 针对所有设备 .col-sm- 平板-屏幕宽度等于或大于576px .col-md- 桌面显示器屏幕-屏幕宽度等于或大于768px .col-lg- 大桌面显示器 宽度等于或大于992px .col-xl- 屏幕宽度等于或大于1200px规则 网格每一行需要放在设置.container(固定宽度)或.container-fluid(全屏宽度)类的容器中，以便自动设置外边距与内边距。 使用行来创建水平列组。 内容需要放在列中，并且只有列可以是行的直接子节点。 预定义的类如.row,.col-sm-4可用于快速制作网格布局。 列通过填充创建内容的间隙。这个间隙是通过.rows类上的负边距设置第一行和最后一行的偏移。 网格列是通过跨越指定的12个列来创建。 偏移列通过offset-*-*类来设置。第一个星号是sm(576px),md(768px),lg(992px),xl(1200px)。第二个星号是1～11的数字。 例如：.offset-md-*类。将一个列的左外边距（margin）增加列即把.col-md-\\往右移四列格。3、BootStrap4 文字排版默认设置 默认的font-size为16px，line-height为1.5。 默认的font-family为Helvetica Neue。 所有的&lt;p&gt;元素margin-top:0、margin-bottom:1rem(16px)。 &lt;h1&gt;(2.5rem = 40px)、&lt;h2&gt;(2rem = 32px)、&lt;h3&gt;(1.75rem = 28px)、&lt;h4&gt;(1.5rem = 24px)、&lt;h5&gt;(1.25rem = 20px)、&lt;h6&gt;(1rem = 16px) Display标题类可以输出更大更粗的字体样式,.display-1~.display-4字体依次减小。 &lt;small&gt;元素用于创建字号更小的颜色更浅的文本，&lt;mark&gt;为黄色背景及有一定的内边距，&lt;abbr&gt;为显示在文本底部的一条虚线边框，&lt;blockquote&gt;用于引用内容。4、Bootstrap4 颜色 文本颜色类 .text-muted:柔和的文本.text-primary:重要的文本（蓝色）.text-success:执行成功的文本（绿色）.text-info:代表一些提示信息的文本（靛青色）.text-warning:警告文本（黄色）.text-danger危险操作文本（红色）.text-secondary:副标题（灰色）.text-dark:深灰色字体.text-light:浅灰色文本文本（白色背景看不清楚）.text-white:白色文本（白色背景看不清楚） 背景颜色 bg-primary:重要的背景颜色（蓝色）bg-success:执行成功背景颜色（绿色）bg-info:信息提示背景颜色（浅蓝色）bg-waring:警告背景颜色（黄色）bg-danger:危险背景颜色（红色）bg-secondary:副标题背景颜色（灰色）bg-dark:深灰色背景颜色bg-light:浅灰色背景颜色 5、Bootstrap4 表格 基础表格 .table 例： 条纹表格 .table-striped 带边框表格 .table-bordered 鼠标悬停状态表格 .table-hover 为表格的每行添加鼠标悬停效果（灰色背景） 黑色背景表格 .table-dark 为表格添加黑色背景 黑色条纹表格 .table-dark和.table-striped 联合使用 鼠标悬停效果-黑色背景表格.table-dark和.table-hover 联合使用 指定意义的颜色类设置表格行或者单元格设置颜色 .table-*（颜色：primary、success、danger…） 表头颜色 .thead-dark给表头添加黑色背景。.thead-light 用于给表添加灰色背景。 较小的表格 .table-sm 通过减少内边距来设置较小的表格 响应式表格.table-responsive在屏幕小于992px时创建水平滚钉条，如果可视区宽度大于992px则显示不同效果（没有滚动条） .table-responsive-sm 屏幕宽度小于576px.table-responsive-md 屏幕宽度小于768px.table-responsive-lg 屏幕宽度小于992px.table-responsive-xl 屏幕宽度小于1200px 6、Bootstrap4 图像形状 圆角图片 .rounded 1&lt;img src= &quot;lyd.jpg&quot; class=&quot;rounded&quot; alt=&quot;**&quot;&gt; 椭圆图片 .rounded-circle 缩略图(图片有边框) .img-thumbnail 图片对齐方式 .float-right(右对齐) .float-left(左对齐) 响应式图片 .img-fluid(max-width:100%，height:auto) 7、Bootstrap4 Jumbotron &lt;div&gt;元素中添加.Jumbotron类（超大屏幕）创建一个超大灰色背景框， 全屏幕的Jumbotron：在.jumbotron-fluid类里的div添加.container或.container-fluid类实现8、信息提示框 提示框在.alert类后面添加.ale+rt-success, .alert-info, .alert-warning, .alert-danger, .alert-primary, .alert-secondary, .alert-light,. alert-dark类实现 提示框添加链接： 提示框中在链接的标签上添加.alert-link类 关闭提示框 在提示框的div中添加.alert-dismissible 然后在关闭按钮的链接上添加class=”close”和data-dismiss=”alert”类。 提示框动画 .fade和.show类用于设置提示框在关闭时的淡出和淡入效果。&lt;div class=”alert alert-danger alert-dismissible fade show”&gt;9、按钮样式 12345678910111213141516171819&lt;button type=&quot;button&quot; class=&quot;btn&quot;&gt;基本按钮&lt;/button&gt;&lt;button type=&quot;button&quot; class=&quot;btn btn-primary&quot;&gt;主要按钮&lt;/button&gt;&lt;button type=&quot;button&quot; class=&quot;btn btn-secondary&quot;&gt;次要按钮&lt;/button&gt;&lt;button type=&quot;button&quot; class=&quot;btn btn-success&quot;&gt;成功&lt;/button&gt;&lt;button type=&quot;button&quot; class=&quot;btn btn-info&quot;&gt;信息&lt;/button&gt;&lt;button type=&quot;button&quot; class=&quot;btn btn-warning&quot;&gt;警告&lt;/button&gt;&lt;button type=&quot;button&quot; class=&quot;btn btn-danger&quot;&gt;危险&lt;/button&gt;&lt;button type=&quot;button&quot; class=&quot;btn btn-dark&quot;&gt;黑色&lt;/button&gt;&lt;button type=&quot;button&quot; class=&quot;btn btn-light&quot;&gt;浅色&lt;/button&gt;&lt;button type=&quot;button&quot; class=&quot;btn btn-link&quot;&gt;链接&lt;/button&gt; 按钮类可以作用与&lt;a&gt;、&lt;button&gt;或者&lt;input&gt;元素上。1234&lt;a href=&quot;#&quot; class=&quot;btn btn-info&quot; role=&quot;button&quot;&gt;链接按钮&lt;/a&gt;&lt;button type=&quot;button&quot; class=&quot;btn btn-info&quot;&gt;按钮&lt;/button&gt;&lt;input type=&quot;button&quot; class=&quot;btn btn-info&quot; value=&quot;输入框按钮&quot;&gt;&lt;input type=&quot;submit&quot; class=&quot;btn btn-info&quot; value=&quot;提交按钮&quot;&gt; 按钮设置边框 &lt;button type=”button” class=”btn btn-outline-*&gt;*按钮&lt;/button&gt; *可以是primary（主要按钮） secondary（次要按钮） success（成功） info（信息） waring（警告） danger（危险） dark（黑色） light（浅色）注意设置按钮边框为浅色时还要在其后加text-dark。 不同大小的按钮 btn-lg(大号) btn-sm(小号) 不设置即为默认，为中号 块级按钮 .btn-block 激活和禁用的按钮 .active类设置按钮是可用的 disabled 属性设置按钮是不可点击的 注意&lt;a&gt;元素不支持disable属性，可以通过.disable类来禁止链接的点击。 按钮组bootstrap4允许将按钮放在同一行上，可以在&lt;div&gt;元素上添加.btn-group类创建按钮组。 12345&lt;div class=&quot;btn-group&quot;&gt; &lt;button type=&quot;button&quot; class=&quot;btn btn-primary&quot;&gt;Apple&lt;/button&gt; &lt;button type=&quot;button&quot; class=&quot;btn btn-primary&quot;&gt;Samsung&lt;/button&gt; &lt;button type=&quot;button&quot; class=&quot;btn btn-primary&quot;&gt;Sony&lt;/button&gt;&lt;/div&gt; .btn-group-lg|sm类设置按钮组的大小。 .btn-group-vertical类创建垂直按钮组 在按钮组内设置下拉菜单 1234567&lt;div class=&quot;btn-group&quot;&gt; &lt;button type=&quot;button&quot; class=&quot;btn btn-primary dropdown-toggle&quot; data-toggle=&quot;dropdown&quot;&gt;Sony&lt;/button&gt; &lt;div class=&quot;dropdown-menu&quot;&gt; &lt;a class=&quot;dropdown-item&quot; href=&quot;#&quot;&gt;Tablet&lt;/a&gt; &lt;a class=&quot;dropdown-item&quot; href=&quot;#&quot;&gt;Smartphone&lt;/a&gt; &lt;/div&gt;&lt;/div&gt; 拆分按钮下拉菜单1234567891011&lt;div class=&quot;btn-group&quot;&gt; &lt;button type=&quot;button&quot; class=&quot;btn btn-primary&quot;&gt;Sony&lt;/button&gt; &lt;button type=&quot;button&quot; class=&quot;btn btn-primary dropdown-toggle dropdown-toggle-split&quot; data-toggle=&quot;dropdown&quot;&gt; &lt;span class=&quot;caret&quot;&gt;&lt;/span&gt; &lt;/button&gt; &lt;div class=&quot;dropdown-menu&quot;&gt; &lt;a class=&quot;dropdown-item&quot; href=&quot;#&quot;&gt;Tablet&lt;/a&gt; &lt;a class=&quot;dropdown-item&quot; href=&quot;#&quot;&gt;Smartphone&lt;/a&gt; &lt;/div&gt;&lt;/div&gt; 垂直按钮组及下拉菜单12345678910&lt;div class=&quot;btn-group-vertical&quot;&gt; &lt;button type=&quot;button&quot; class=btn btn-primary&gt;Apple&lt;/button&gt; &lt;div class=&quot;btn-group&quot;&gt; &lt;button type=&quot;button&quot; class=&quot;btn btn-primary dropdown-toggle&quot;data-toggle=&quot;dropdown&quot;&gt;Sony&lt;button&gt; &lt;div class=&quot;dropdown-menu&quot;&gt; &lt;a class=&quot;dropdown-item&quot;href=&quot;#&quot;&gt;Tablet&lt;/a&gt; &lt;a class=&quot;dropdown-item&quot; href=&quot;#&quot;&gt;Smartphone&lt;/a&gt; &lt;/div&gt; &lt;/div&gt;&lt;/div&gt;","tags":[{"name":"HTML","slug":"HTML","permalink":"http://luoyd.cn/tags/HTML/"},{"name":"CSS","slug":"CSS","permalink":"http://luoyd.cn/tags/CSS/"},{"name":"悦读","slug":"悦读","permalink":"http://luoyd.cn/tags/悦读/"},{"name":"前端组件库","slug":"前端组件库","permalink":"http://luoyd.cn/tags/前端组件库/"}]}]