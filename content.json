[{"title":"前端代码规范","date":"2020-01-16T02:18:00.000Z","path":"2020/01/16/前端代码规范/","text":"前端 JS 项目开发规范规范的目的是为了编写高质量的代码，让你的团队成员每天得心情都是愉悦的，大家在一起是快乐的。 引自《阿里规约》的开头片段： —-现代软件架构的复杂性需要协同开发完成，如何高效地协同呢？无规矩不成方圆，无规范难以协同，比如，制订交通法规表面上是要限制行车权，实际上是保障公众的人身安全，试想如果没有限速，没有红绿灯，谁还敢上路行驶。对软件来说，适当的规范和标准绝不是消灭代码内容的创造性、优雅性，而是限制过度个性化，以一种普遍认可的统一方式一起做事，提升协作效率，降低沟通成本。代码的字里行间流淌的是软件系统的血液，质量的提升是尽可能少踩坑，杜绝踩重复的坑，切实提升系统稳定性，码出质量。 一、编程规约(一)命名规范1.1.1 项目命名全部采用小写方式， 以中划线分隔。 正例：mall-management-system 反例：mall_management-system / mallManagementSystem 1.1.2 目录命名全部采用小写方式， 以中划线分隔，有复数结构时，要采用复数命名法， 缩写不用复数 正例： scripts / styles / components / images / utils / layouts / demo-styles / demo-scripts / img / doc 反例： script / style / demo_scripts / demoStyles / imgs / docs 【特殊】VUE 的项目中的 components 中的组件目录，使用 kebab-case 命名 正例： head-search / page-loading / authorized / notice-icon 反例： HeadSearch / PageLoading 【特殊】VUE 的项目中的除 components 组件目录外的所有目录也使用 kebab-case 命名正例： page-one / shopping-car / user-management 反例： ShoppingCar / UserManagement 1.1.3 JS、CSS、SCSS、HTML、PNG 文件命名全部采用小写方式， 以中划线分隔 正例： render-dom.js / signup.css / index.html / company-logo.png 反例： renderDom.js / UserManagement.html 1.1.4 命名严谨性代码中的命名严禁使用拼音与英文混合的方式，更不允许直接使用中文的方式。 说明：正确的英文拼写和语法可以让阅读者易于理解，避免歧义。注意，即使纯拼音命名方式也要避免采用 正例：henan / luoyang / rmb 等国际通用的名称，可视同英文。 反例：DaZhePromotion [打折] / getPingfenByName() [评分] / int 某变量 = 3 杜绝完全不规范的缩写，避免望文不知义： 反例：AbstractClass“缩写”命名成 AbsClass；condition“缩写”命名成 condi，此类随意缩写严重降低了代码的可阅读性。 (二)HTML 规范 （Vue Template 同样适用）1.2.1 HTML 类型推荐使用 HTML5 的文档类型申明： .（建议使用 text/html 格式的 HTML。避免使用 XHTML。XHTML 以及它的属性，比如 application/xhtml+xml 在浏览器中的应用支持与优化空间都十分有限）。 规定字符编码 IE 兼容模式 规定字符编码 doctype 大写 正例： 1234567891011&lt;!DOCTYPE html&gt;&lt;html&gt; &lt;head&gt; &lt;meta http-equiv=\"X-UA-Compatible\" content=\"IE=Edge\" /&gt; &lt;meta charset=\"UTF-8\" /&gt; &lt;title&gt;Page title&lt;/title&gt; &lt;/head&gt; &lt;body&gt; &lt;img src=\"images/company-logo.png\" alt=\"Company\" /&gt; &lt;/body&gt;&lt;/html&gt; 1.2.2 缩进缩进使用 2 个空格（一个 tab） 嵌套的节点应该缩进。 1.2.3 分块注释在每一个块状元素，列表元素和表格元素后，加上一对 HTML 注释。注释格式 &lt;!– 英文 中文 start &gt; &lt;!– 英文 中文 end &gt;正例： 123456789101112&lt;body&gt; &lt;!-- header 头部 start --&gt; &lt;header&gt; &lt;div class=\"container\"&gt; &lt;a href=\"#\"&gt; &lt;!-- 图片会把a标签给撑开，所以不用设置a标签的大小 --&gt; &lt;img src=\"images/header.jpg\" /&gt; &lt;/a&gt; &lt;/div&gt; &lt;/header&gt; &lt;!-- header 头部 end --&gt;&lt;/body&gt; 1.2.4 语义化标签HTML5 中新增很多语义化标签，所以优先使用语义化标签，避免一个页面都是 div 或者 p 标签 正例 12&lt;header&gt;&lt;/header&gt;&lt;footer&gt;&lt;/footer&gt; 反例 123&lt;div&gt; &lt;p&gt;&lt;/p&gt;&lt;/div&gt; 1.2.5 引号使用双引号(“ “) 而不是单引号(‘ ‘) 。 正例： &lt;div class=&quot;news-div&quot;&gt;&lt;/div&gt; 反例： &lt;div class=&#39;news-div&#39;&gt;&lt;/div&gt; (三) CSS 规范1.3.1 命名 类名使用小写字母，以中划线分隔 id 采用驼峰式命名 scss 中的变量、函数、混合、placeholder 采用驼峰式命名 ID 和 class 的名称总是使用可以反应元素目的和用途的名称，或其他通用的名称，代替表象和晦涩难懂的名称 不推荐： 1234567.fw-800 &#123; font-weight: 800;&#125;.red &#123; color: red;&#125; 推荐: 1234567.heavy &#123; font-weight: 800;&#125;.important &#123; color: red;&#125; 1.3.2 选择器1)css 选择器中避免使用标签名从结构、表现、行为分离的原则来看，应该尽量避免 css 中出现 HTML 标签，并且在 css 选择器中出现标签名会存在潜在的问题。 2)很多前端开发人员写选择器链的时候不使用 直接子选择器（注：直接子选择器和后代选择器的区别）。有时，这可能会导致疼痛的设计问题并且有时候可能会很耗性能。然而，在任何情况下，这是一个非常不好的做法。如果你不写很通用的，需要匹配到 DOM 末端的选择器， 你应该总是考虑直接子选择器。 不推荐: 123.content .title &#123; font-size: 2rem;&#125; 推荐: 123.content &gt; .title &#123; font-size: 2rem;&#125; 1.3.3 尽量使用缩写属性不推荐： 12345678border-top-style: none;font-family: palatino, georgia, serif;font-size: 100%;line-height: 1.6;padding-bottom: 2em;padding-left: 1em;padding-right: 1em;padding-top: 0; 推荐： 123border-top: 0;font: 100%/1.6 palatino, georgia, serif;padding: 0 1em 2em; 1.3.4 每个选择器及属性独占一行不推荐： 123button&#123; width:100px;height:50px;color:#fff;background:#00a0e9;&#125; 推荐： 123456button&#123; width:100px; height:50px; color:#fff; background:#00a0e9;&#125; 1.3.5 省略0后面的单位不推荐： 1234div&#123; padding-bottom: 0px; margin: 0em;&#125; 推荐： 1234div&#123; padding-bottom: 0; margin: 0;&#125; 1.3.6 避免使用ID选择器及全局标签选择器防止污染全局样式不推荐： 1234#header&#123; padding-bottom: 0px; margin: 0em;&#125; 推荐： 1234.header&#123; padding-bottom: 0px; margin: 0em;&#125; (四) LESS 规范1.4.1 代码组织1)将公共less文件放置在style/less/common文件夹例:// color.less,common.less 2)按以下顺序组织1、@import;2、变量声明;3、样式声明; 12345678@import &quot;mixins/size.less&quot;;@default-text-color: #333;.page &#123; width: 960px; margin: 0 auto;&#125; 1.4.2 避免嵌套层级过多 将嵌套深度限制在3级。对于超过4级的嵌套，给予重新评估。这可以避免出现过于详实的CSS选择器。避免大量的嵌套规则。当可读性受到影响时，将之打断。推荐避免出现多于20行的嵌套规则出现 不推荐： 1234567.main&#123; .title&#123; .name&#123; color:#fff &#125; &#125;&#125; 推荐： 12345.main-title&#123; .name&#123; color:#fff &#125;&#125; (五) Javascript 规范1.5.1 命名1) 采用小写驼峰命名 lowerCamelCase，代码中的命名均不能以下划线，也不能以下划线或美元符号结束反例： _name / name_ / name$ 2) 方法名、参数名、成员变量、局部变量都统一使用 lowerCamelCase 风格，必须遵从驼峰形式。正例： localValue / getHttpMessage() / inputUserId **其中 method 方法命名必须是 动词 或者 动词+名词 形式** 正例：saveShopCarData /openShopCarInfoDialog 反例：save / open / show / go **特此说明，增删查改，详情统一使用如下 5 个单词，不得使用其他（目的是为了统一各个端）** add / update / delete / detail / get 附： 函数方法常用的动词: 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354get 获取/set 设置,add 增加/remove 删除create 创建/destory 移除start 启动/stop 停止open 打开/close 关闭,read 读取/write 写入load 载入/save 保存,create 创建/destroy 销毁begin 开始/end 结束,backup 备份/restore 恢复import 导入/export 导出,split 分割/merge 合并inject 注入/extract 提取,attach 附着/detach 脱离bind 绑定/separate 分离,view 查看/browse 浏览edit 编辑/modify 修改,select 选取/mark 标记copy 复制/paste 粘贴,undo 撤销/redo 重做insert 插入/delete 移除,add 加入/append 添加clean 清理/clear 清除,index 索引/sort 排序find 查找/search 搜索,increase 增加/decrease 减少play 播放/pause 暂停,launch 启动/run 运行compile 编译/execute 执行,debug 调试/trace 跟踪observe 观察/listen 监听,build 构建/publish 发布input 输入/output 输出,encode 编码/decode 解码encrypt 加密/decrypt 解密,compress 压缩/decompress 解压缩pack 打包/unpack 解包,parse 解析/emit 生成connect 连接/disconnect 断开,send 发送/receive 接收download 下载/upload 上传,refresh 刷新/synchronize 同步update 更新/revert 复原,lock 锁定/unlock 解锁check out 签出/check in 签入,submit 提交/commit 交付push 推/pull 拉,expand 展开/collapse 折叠begin 起始/end 结束,start 开始/finish 完成enter 进入/exit 退出,abort 放弃/quit 离开obsolete 废弃/depreciate 废旧,collect 收集/aggregate 聚集 3) 常量命名全部大写，单词间用下划线隔开，力求语义表达完整清楚，不要嫌名字长。正例： MAX_STOCK_COUNT 反例： MAX_COUNT 1.5.2 代码格式1) 使用 2 个空格进行缩进正例： 12345if (x &lt; y) &#123; x += 10;&#125; else &#123; x += 1;&#125; 2) 不同逻辑、不同语义、不同业务的代码之间插入一个空行分隔开来以提升可读性。 说明：任何情形，没有必要插入多个空行进行隔开。 1.5.3 字符串统一使用单引号(‘)，不使用双引号(“)。这在创建 HTML 字符串非常有好处： 正例: 12let str = 'foo';let testDiv = '&lt;div id=\"test\"&gt;&lt;/div&gt;'; 反例: 12let str = 'foo';let testDiv = \"&lt;div id='test'&gt;&lt;/div&gt;\"; 1.5.4 对象声明1)使用字面值创建对象正例： let user = {}; 反例： let user = new Object(); 2) 使用字面量来代替对象构造器正例： 12345var user = &#123; age: 0, name: 1, city: 3&#125;; 反例： 1234var user = new Object();user.age = 0;user.name = 0;user.city = 0; 1.5.5 使用 ES6,7必须优先使用 ES6,7 中新增的语法糖和函数。这将简化你的程序，并让你的代码更加灵活和可复用。 必须强制使用 ES6, ES7 的新语法，比如箭头函数、await/async ， 解构， let ， for…of 等等 1.5.6 括号下列关键字后必须有大括号（即使代码块的内容只有一行）：if, else, for, while, do, switch, try, catch, finally, with。 正例： 123if (condition) &#123; doSomething();&#125; 反例： 1if (condition) doSomething(); 1.5.7 undefined 判断永远不要直接使用 undefined 进行变量判断；使用 typeof 和字符串’undefined’对变量进行判断。 正例： 123if (typeof person === 'undefined') &#123; ...&#125; 反例： 123if (person === undefined) &#123; ...&#125; 1.5.8 条件判断和循环最多三层条件判断能使用三目运算符和逻辑运算符解决的，就不要使用条件判断，但是谨记不要写太长的三目运算符。如果超过 3 层请抽成函数，并写清楚注释。 1.5.9 this 的转换命名对上下文 this 的引用只能使用’self’来命名 1.5.10 慎用 console.log因 console.log 大量使用会有性能问题，所以在非 webpack 项目中谨慎使用 log 功能 二、Vue 项目规范(一) Vue 编码基础vue 项目规范以 Vue 官方规范 （https://cn.vuejs.org/v2/style-guide/） 中的 A 规范为基础，在其上面进行项目开发，故所有代码均遵守该规范。 请仔仔细细阅读 Vue 官方规范，切记，此为第一步。 2.1.1. 组件规范1) 组件名为多个单词。组件名应该始终是多个单词组成（大于等于 2），且命名规范为KebabCase格式。这样做可以避免跟现有的以及未来的 HTML 元素相冲突，因为所有的 HTML 元素名称都是单个单词的。 正例： 1234export default &#123; name: 'TodoItem' // ...&#125;; 反例： 12345678export default &#123; name: 'Todo', // ...&#125;export default &#123; name: 'todo-item', // ...&#125; 2) 组件文件名为 pascal-case 格式正例： 12components/|- my-component.vue 反例： 123components/|- myComponent.vue|- MyComponent.vue 3) 基础组件文件名为 base 开头，使用完整单词而不是缩写。正例： 1234components/|- base-button.vue|- base-table.vue|- base-icon.vue 反例： 1234components/|- MyButton.vue|- VueTable.vue|- Icon.vue 4) 和父组件紧密耦合的子组件应该以父组件名作为前缀命名正例： 12345components/|- todo-list.vue|- todo-list-item.vue|- todo-list-item-button.vue|- user-profile-options.vue （完整单词） 反例： 12345components/|- TodoList.vue|- TodoItem.vue|- TodoButton.vue|- UProfOpts.vue （使用了缩写） 5) 在 Template 模版中使用组件，应使用 PascalCase 模式，并且使用自闭合组件。正例： 123&lt;!-- 在单文件组件、字符串模板和 JSX 中 --&gt;&lt;MyComponent /&gt;&lt;Row&gt;&lt;table :column=\"data\"/&gt;&lt;/Row&gt; 反例： 1&lt;my-component /&gt; &lt;row&gt;&lt;table :column=\"data\"/&gt;&lt;/row&gt; 6) 组件的 data 必须是一个函数当在组件中使用 data 属性的时候 (除了 new Vue 外的任何地方)，它的值必须是返回一个对象的函数。 因为如果直接是一个对象的话，子组件之间的属性值会互相影响。 正例： 1234567export default &#123; data () &#123;​ return &#123;​ name: 'jack'​ &#125; &#125;&#125; 反例： 12345export default &#123; data: &#123;​ name: 'jack' &#125;&#125; 7) Prop 定义应该尽量详细 必须使用 camelCase 驼峰命名 必须指定类型 必须加上注释，表明其含义 必须加上 required 或者 default，两者二选其一 如果有业务需要，必须加上 validator 验证 正例： 12345678910111213141516171819 props: &#123; // 组件状态，用于控制组件的颜色 status: &#123; ​ type: String, required: true, ​ validator: function (value) &#123; ​ return [ ​ 'succ', ​ 'info', ​ 'error' ​ ].indexOf(value) !== -1 ​ &#125; &#125;, // 用户级别，用于显示皇冠个数 userLevel：&#123; type: String, required: true &#125;&#125; 8) 为组件样式设置作用域正例： 12345678910&lt;template&gt; &lt;button class=\"btn btn-close\"&gt;X&lt;/button&gt;&lt;/template&gt;&lt;!-- 使用 `scoped` 特性 --&gt;&lt;style scoped&gt; .btn-close &#123; background-color: red; &#125;&lt;/style&gt; 反例： 123456789&lt;template&gt; &lt;button class=\"btn btn-close\"&gt;X&lt;/button&gt;&lt;/template&gt;&lt;!-- 没有使用 `scoped` 特性 --&gt;&lt;style&gt; .btn-close &#123; background-color: red; &#125;&lt;/style&gt; 9) 如果特性元素较多，应该主动换行。正例： 1234&lt;MyComponent foo=\"a\" bar=\"b\" baz=\"c\" foo=\"a\" bar=\"b\" baz=\"c\" foo=\"a\" bar=\"b\" baz=\"c\" /&gt; 反例： 1&lt;MyComponent foo=\"a\" bar=\"b\" baz=\"c\" foo=\"a\" bar=\"b\" baz=\"c\" foo=\"a\" bar=\"b\" baz=\"c\" foo=\"a\" bar=\"b\" baz=\"c\"/&gt; 2.1.2. 模板中使用简单的表达式组件模板应该只包含简单的表达式，复杂的表达式则应该重构为计算属性或方法。复杂表达式会让你的模板变得不那么声明式。我们应该尽量描述应该出现的是什么，而非如何计算那个值。而且计算属性和方法使得代码可以重用。 正例： 123456789101112&lt;template&gt; &lt;p&gt;&#123;&#123; normalizedFullName &#125;&#125;&lt;/p&gt;&lt;/template&gt;// 复杂表达式已经移入一个计算属性computed: &#123; normalizedFullName: function () &#123;​ return this.fullName.split(' ').map(function (word) &#123;​ return word[0].toUpperCase() + word.slice(1)​ &#125;).join(' ') &#125;&#125; 反例： 123456789&lt;template&gt; &lt;p&gt; &#123;&#123; fullName.split(' ').map(function (word) &#123;​ return word[0].toUpperCase() + word.slice(1) &#125;).join(' ') &#125;&#125; &lt;/p&gt;&lt;/template&gt; 2.1.3 指令都使用缩写形式指令推荐都使用缩写形式，(用 : 表示 v-bind: 、用 @ 表示 v-on: 和用 # 表示 v-slot:) 正例： 1234&lt;input @input=\"onInput\" @focus=\"onFocus\"&gt; 反例： 1234&lt;input v-on:input=\"onInput\" @focus=\"onFocus\"&gt; 2.1.4 标签顺序保持一致单文件组件应该总是让标签顺序保持为 &lt;template&gt; 、&lt;script&gt;、 &lt;style&gt; 正例： 123&lt;template&gt;...&lt;/template&gt;&lt;script&gt;...&lt;/script&gt;&lt;style&gt;...&lt;/style&gt; 反例： 123&lt;template&gt;...&lt;/template&gt;&lt;style&gt;...&lt;/style&gt;&lt;script&gt;...&lt;/script&gt; 2.1.5 必须为 v-for 设置键值 key2.1.6 v-show 与 v-if 选择如果运行时，需要非常频繁地切换，使用 v-show ；如果在运行时，条件很少改变，使用 v-if。 2.1.7 script 标签内部结构顺序components &gt; props &gt; data &gt; computed &gt; watch &gt; filter &gt; 钩子函数（钩子函数按其执行顺序） &gt; methods 2.1.8 Vue Router 规范1) 页面跳转数据传递使用路由参数页面跳转，例如 A 页面跳转到 B 页面，需要将 A 页面的数据传递到 B 页面，推荐使用 路由参数进行传参，而不是将需要传递的数据保存 vuex，然后在 B 页面取出 vuex 的数据，因为如果在 B 页面刷新会导致 vuex 数据丢失，导致 B 页面无法正常显示数据。 正例： 12let id = ' 123';this.$router.push(&#123; name: 'userCenter', query: &#123; id: id &#125; &#125;); 2) 使用路由懒加载（延迟加载）机制12345678&#123; path: '/uploadAttachment', name: 'uploadAttachment', meta: &#123; title: '上传附件' &#125;, component: () =&gt; import('@/view/components/uploadAttachment/index.vue') &#125;, 3) router 中的命名规范path、childrenPoints 命名规范采用kebab-case命名规范（尽量vue文件的目录结构保持一致，因为目录、文件名都是kebab-case，这样很方便找到对应的文件） name 命名规范采用KebabCase命名规范且和component组件名保持一致！（因为要保持keep-alive特性，keep-alive按照component的name进行缓存，所以两者必须高度保持一致） 1234567891011121314151617181920212223242526272829303132333435363738// 动态加载export const reload = [ &#123; path: '/reload', name: 'reload', component: Main, meta: &#123; title: '动态加载', icon: 'icon iconfont' &#125;, children: [ &#123; path: '/reload/smart-reload-list', name: 'SmartReloadList', meta: &#123; title: 'SmartReload', childrenPoints: [ &#123; title: '查询', name: 'smart-reload-search' &#125;, &#123; title: '执行reload', name: 'smart-reload-update' &#125;, &#123; title: '查看执行结果', name: 'smart-reload-result' &#125; ] &#125;, component: () =&gt; import('@/views/reload/smart-reload/smart-reload-list.vue') &#125; ] &#125;]; 4) router 中的 path 命名规范path除了采用kebab-case命名规范以外，必须以 / 开头，即使是children里的path也要以 / 开头。如下示例 *目的： 经常有这样的场景：某个页面有问题，要立刻找到这个vue文件，如果不用以/开头，path为parent和children组成的，可能经常需要在router文件里搜索多次才能找到，而如果以/开头，则能立刻搜索到对应的组件* 1234567891011121314151617181920212223242526&#123; path: '/file', name: 'File', component: Main, meta: &#123; title: '文件服务', icon: 'ios-cloud-upload' &#125;, children: [ &#123; path: '/file/file-list', name: 'FileList', component: () =&gt; import('@/views/file/file-list.vue') &#125;, &#123; path: '/file/file-add', name: 'FileAdd', component: () =&gt; import('@/views/file/file-add.vue') &#125;, &#123; path: '/file/file-update', name: 'FileUpdate', component: () =&gt; import('@/views/file/file-update.vue') &#125; ] &#125; (二) Vue 项目目录规范2.2.1 基础vue 项目中的所有命名一定要与后端命名统一。 比如权限：后端 privilege, 前端无论 router , store, api 等都必须使用 privielege 单词！ 2.2.2 使用 Vue-cli 脚手架使用 vue-cli3 来初始化项目，项目名按照上面的命名规范。 2.2.3 目录说明目录名按照上面的命名规范，其中 components 组件用大写驼峰，其余除 components 组件目录外的所有目录均使用 kebab-case 命名。 1234567891011121314151617181920212223src 源码目录|-- api 所有api接口|-- assets 静态资源，images, icons, styles等|-- components 公用组件|-- config 配置信息|-- constants 常量信息，项目所有Enum, 全局常量等|-- directives 自定义指令|-- filters 过滤器，全局工具|-- datas 模拟数据，临时存放|-- lib 外部引用的插件存放及修改文件|-- mock 模拟接口，临时存放|-- plugins 插件，全局使用|-- router 路由，统一管理|-- store vuex, 统一管理|-- themes 自定义样式主题|-- views 视图目录| |-- role role模块名| |-- |-- role-list.vue role列表页面| |-- |-- role-add.vue role新建页面| |-- |-- role-update.vue role更新页面| |-- |-- index.less role模块样式| |-- |-- components role模块通用组件文件夹| |-- employee employee模块 1) api 目录 文件、变量命名要与后端保持一致。 此目录对应后端 API 接口，按照后端一个 controller 一个 api js 文件。若项目较大时，可以按照业务划分子目录，并与后端保持一致。 api 中的方法名字要与后端 api url 尽量保持语义高度一致性。 对于 api 中的每个方法要添加注释，注释与后端 swagger 文档保持一致。 正例： 后端 url： EmployeeController.java 123/employee/add/employee/delete/&#123;id&#125;/employee/update 前端： employee.js 123456789101112// 添加员工addEmployee: (data) =&gt; &#123; return postAxios('/employee/add', data)&#125;,// 更新员工信息updateEmployee: (data) =&gt; &#123; return postAxios('/employee/update', data)&#125;, // 删除员工deleteEmployee: (employeeId) =&gt; &#123; return postAxios('/employee/delete/' + employeeId) &#125;, 2) assets 目录assets 为静态资源，里面存放 images, styles, icons 等静态资源，静态资源命名格式为 kebab-case 123456|assets|-- icons|-- images| |-- background-color.png| |-- upload-header.png|-- styles 3) components 目录此目录应按照组件进行目录划分，目录命名为 KebabCase，组件命名规则也为 KebabCase 12345678|components|-- error-log| |-- index.vue| |-- index.less|-- markdown-editor| |-- index.vue| |-- index.js|-- kebab-case 4) constants 目录此目录存放项目所有常量，如果常量在 vue 中使用，请使用 vue-enum 插件(https://www.npmjs.com/package/vue-enum) 目录结构： 1234|constants|-- index.js|-- role.js|-- employee.js 例子： employee.js 1234567891011121314151617181920212223242526272829303132333435363738export const EMPLOYEE_STATUS = &#123; NORMAL: &#123; value: 1, desc: '正常' &#125;, DISABLED: &#123; value: 1, desc: '禁用' &#125;, DELETED: &#123; value: 2, desc: '已删除' &#125;&#125;;export const EMPLOYEE_ACCOUNT_TYPE = &#123; QQ: &#123; value: 1, desc: 'QQ登录' &#125;, WECHAT: &#123; value: 2, desc: '微信登录' &#125;, DINGDING: &#123; value: 3, desc: '钉钉登录' &#125;, USERNAME: &#123; value: 4, desc: '用户名密码登录' &#125;&#125;;export default &#123; EMPLOYEE_STATUS, EMPLOYEE_ACCOUNT_TYPE&#125;; 5) router 与 store 目录这两个目录一定要将业务进行拆分，不能放到一个 js 文件里。 router 尽量按照 views 中的结构保持一致 store 按照业务进行拆分不同的 js 文件 6) views 目录 命名要与后端、router、api 等保持一致 components 中组件要使用 PascalCase 规则 123456789101112|-- views 视图目录| |-- role role模块名| | |-- role-list.vue role列表页面| | |-- role-add.vue role新建页面| | |-- role-update.vue role更新页面| | |-- index.less role模块样式| | |-- components role模块通用组件文件夹| | | |-- role-header.vue role头部组件| | | |-- role-modal.vue role弹出框组件| |-- employee employee模块| |-- behavior-log 行为日志log模块| |-- code-generator 代码生成器模块 2.2.4 注释说明整理必须加注释的地方 公共组件使用说明 api 目录的接口 js 文件必须加注释 store 中的 state, mutation, action 等必须加注释 vue 文件中的 template 必须加注释，若文件较大添加 start end 注释 vue 文件的 methods，每个 method 必须添加注释 vue 文件的 data, 非常见单词要加注释 2.2.5 其他1) 尽量不要手动操作 DOM因使用 vue 框架，所以在项目开发中尽量使用 vue 的数据驱动更新 DOM，尽量（不到万不得已）不要手动操作 DOM，包括：增删改 dom 元素、以及更改样式、添加事件等。 2) 删除无用代码因使用了 git/svn 等代码版本工具，对于无用代码必须及时删除，例如：一些调试的 console 语句、无用的弃用功能代码。","tags":[{"name":"前端","slug":"前端","permalink":"http://luoyd.cn/tags/前端/"},{"name":"规范","slug":"规范","permalink":"http://luoyd.cn/tags/规范/"}]},{"title":"Java开发规范","date":"2020-01-16T02:18:00.000Z","path":"2020/01/16/后台代码规范/","text":"JAVA 开发规范 v1.0.0 2019/09/06 本篇规范基于阿里巴巴、华为的开发手册，添加了我们团队的开发风格规范，补充了一些细节。感谢前人的经验和付出，让我们可以有机会站在巨人的肩膀上眺望星辰大海。 规范不是为了约束和禁锢大家的创造力，而是为了帮助大家能够在正确的道路上，尽可能的避免踩坑和跑偏。规范可以让我们无论单枪匹马还是与众人同行的时候都能得心应手。规范可以让我们在面对日益变态的需求和做代码接盘侠的时候，更优雅从容。 规则并不是完美的，通过约束和禁止在特定情况下的特性，可能会对代码实现造成影响。但是我们制定规则的目的：为了大多数程序员小伙伴可以得到更多的好处，如果在团队实际运作中认为某个规则无法遵循或有更好的做法，希望大家可以共同改进该规范。 一、编程规范1、好代码的原则我们参考 Kent Beck 的简单设计四原则来指导我们的如何写出优秀的代码，如何有效地判断我们的代码是优秀的。 通过所有测试（Passes its tests）：强调的是外部需求，这是代码实现最重要的 尽可能消除重复 (Minimizes duplication)：代码的模块架构设计，保证代码的正交性，保证代码更容易修改 尽可能清晰表达 (Maximizes clarity)：代码的可阅读性，保证代码是容易阅读的 更少代码元素 (Has fewer elements)：保证代码是简洁的，在简洁和表达力之间，我们更看重表达力 以上四个原则的重要程度依次降低， 这组定义被称做简单设计原则。 2、项目命名规范全部采用小写方式， 以中划线分隔。 正例：mall-management-system / order-service-client / user-api 反例：mall_management-system / mallManagementSystem / orderServiceClient 3、TODO/FIXME 规范TODO/TBD(to be determined) 注释一般用来描述已知待改进、待补充的修改点,并且加上作者名称。FIXME 注释一般用来描述已知缺陷，它们都应该有统一风格，方便文本搜索统一处理。如： 12// TODO &lt;author-name&gt;: 补充XX处理// FIXME &lt;author-name&gt;: XX缺陷 4、方法参数规范无论是 controller，service，manager，dao 亦或是其他的代码，每个方法最多 3 个参数，如果超出 3 个参数的话，要封装成 javabean 对象。 方便他人调用，降低出错几率。尤其是当参数是同一种类型，仅仅依靠顺序区分，稍有不慎便是灾难性后果，而且排查起来也极其恶心。 保持代码整洁、清晰度。当一个个方法里充斥着一堆堆参数的时候，再坚强的人，也会身心疲惫。 反例： 12345678910/*** 使用证书加密数据工具方法** @param param* @param password 加密密码* @param priCert 私钥* @param pubCert 公钥* @return 返回加密后的字符串*/public String signEnvelop(JdRequestParam param, String password, String priCert, String pubCert)&#123;&#125; 5、注释规范5-1、注释和代码一样重要注释是我们披荆斩棘历经磨难翻越需求这座大山时，留下的踪迹和收获的经验教训，这些宝贵的知识除了证明我们曾经存在过，也提醒着后来的人们殷鉴不远、继往开来。 注释除了说明作用、逻辑之外。还有一个很重要的原因：当业务逻辑过于复杂，代码过于庞大的时候，注释就变成了一道道美化环境、分离与整理逻辑思路的路标。这是很重要的一点，它能有效得帮助我们免于陷入代码与业务逻辑的泥沼之中。 正例： 12345678910111213141516171819202122/*** 开始抽奖方法* 保存中奖信息、奖励用户积分等* @param luckDrawDTO* @return ResponseDTO 返回中奖信息*/public ResponseDTO&lt;String&gt; startLuckDraw(LuckDrawDTO luckDrawDTO) &#123; // -------------- 1、校验抽奖活动基本信息 ------------------------ xxx伪代码一顿操作 // -------------- 2、新增抽奖记录 ------------------------------- xxx伪代码一顿操作 // -------------- 3、如果需要消耗积分，则扣除钢镚积分 ------------- xxx伪代码一顿操作 // -------------- 4、获取奖品信息，开始翻滚吧 -------------------- xxx伪代码一顿操作 return ResponseDTO.succ(luckDrawPrizeVO);&#125; 5-2、注释和代码的一致性注释并不是越多越好，当注释过多，维护代码的同时，还需要维护注释，不仅变成了一种负担，也与我们当初添加注释的初衷背道而驰。 首先：大家应该通过清晰的逻辑架构，好的变量命名来提高代码可读性；需要的时候，才辅以注释说明。注释是为了帮助阅读者快速读懂代码，所以要从读者的角度出发，按需注释。注释内容要简洁、明了、无二义性，信息全面且不冗余。 其次：无论是修改、复制代码时，都要仔细核对注释内容是否正确。只改代码，不改注释是一种不文明行为，破坏了代码与注释的一致性，会让阅读者迷惑、费解，甚至误解。 反例： 12// 查询部门EmployeeDTO employee = employeeDao.listByDeptId(deptId); 5-3、方法注释方法要尽量通过方法名自解释，不要写无用、信息冗余的方法头，不要写空有格式的方法头注释。 方法头注释内容可选，但不限于：功能说明、返回值，用法、算法实现等等。尤其是对外的方法接口声明，其注释，应当将重要、有用的信息表达清楚。 正例： 12345678/** * 解析转换时间字符串为 LocalDate 时间类 * 调用前必须校验字符串格式 否则可能造成解析失败的错误异常 * * @param dateStr 必须是 yyyy-MM-dd 格式的字符串 * @return LocalDate */public static LocalDate parseYMD(String dateStr)&#123;&#125; 反例： 1234567/** * 校验对象 * * @param t * @return String */public static &lt;T&gt; String checkObj(T t); 反例中出现的问题： 方法注释没有说明具体的作用、使用事项。 参数、返回值，空有格式没内容。这是非常重要一点，任何人调用任何方法之前都需要知道方法对参数的要求，以及返回值是什么。 二、项目规范1、代码目录结构统一的目录结构是所有项目的基础。 1234567891011121314src 源码目录|-- common 各个项目的通用类库|-- config 项目的配置信息|-- constant 全局公共常量|-- handler 全局处理器|-- interceptor 全局连接器|-- listener 全局监听器|-- module 各个业务|-- |--- employee 员工模块|-- |--- role 角色模块|-- |--- login 登录模块|-- third 三方服务，比如redis, oss，微信sdk等等|-- util 全局工具类|-- Application.java 启动类 2、common 目录规范common 目录用于存放各个项目通用的项目，但是又可以依照项目进行特定的修改。 123456789src 源码目录|-- common 各个项目的通用类库|-- |--- anno 通用注解，比如权限，登录等等|-- |--- constant 通用常量，比如 ResponseCodeConst|-- |--- domain 全局的 javabean，比如 BaseEntity,PageParamDTO 等|-- |--- exception 全局异常，如 BusinessException|-- |--- json json 类库，如 LongJsonDeserializer，LongJsonSerializer|-- |--- swagger swagger 文档|-- |--- validator 适合各个项目的通用 validator，如 CheckEnum，CheckBigDecimal 等 3、config 目录规范config 目录用于存放各个项目通用的项目，但是又可以依照项目进行特定的修改。 123456src 源码目录|-- config 项目的所有配置信息|-- |--- MvcConfig mvc的相关配置，如interceptor,filter等|-- |--- DataSourceConfig 数据库连接池的配置|-- |--- MybatisConfig mybatis的配置|-- |--- .... 其他 4、module 目录规范module 目录里写项目的各个业务，每个业务一个独立的顶级文件夹，在文件里进行 mvc 的相关划分。其中，domain 包里存放 entity, dto, vo，bo 等 javabean 对象 123456789101112131415src|-- module 所有业务模块|-- |-- role 角色模块|-- |-- |--RoleController.java controller|-- |-- |--RoleConst.java role相关的常量|-- |-- |--RoleService.java service|-- |-- |--RoleDao.java dao|-- |-- |--domain domain|-- |-- |-- |-- RoleEntity.java 表对应实体|-- |-- |-- |-- RoleDTO.java dto对象|-- |-- |-- |-- RoleVO.java 返回对象|-- |-- employee 员工模块|-- |-- login 登录模块|-- |-- email 邮件模块|-- |-- .... 其他 5、 domain 包中的 javabean 命名规范1） javabean 的整体要求： 不得有任何的业务逻辑或者计算 基本数据类型必须使用包装类型（Integer, Double、Boolean 等） 不允许有任何的默认值 每个属性必须添加注释，并且必须使用多行注释。 必须使用 lombok 简化 getter/setter 方法 建议对象使用 lombok 的 @Builder ，@NoArgsConstructor，同时使用这两个注解，简化对象构造方法以及set方法。 正例： 1234567891011121314151617@Builder@NoArgsConstructor@Datapublic class DemoDTO &#123; private String name; private Integer age;&#125;// 使用示例：DemoDTO demo = DemoDTO.builder() .name(\"yeqiu\") .age(66) .build(); 2）数据对象；XxxxEntity，要求： 以 Entity 为结尾（阿里是为 DO 为结尾） Xxxx 与数据库表名保持一致 类中字段要与数据库字段保持一致，不能缺失或者多余 类中的每个字段添加注释，并与数据库注释保持一致 不允许有组合 项目内的日期类型必须统一，建议使用 java.util.Date，java.sql.Timestamp，java.time.LocalDateTime 其中只一。 3）传输对象；XxxxDTO，要求： 不可以继承自 Entity DTO 可以继承、组合其他 DTO，VO，BO 等对象 DTO 只能用于前端、RPC 的请求参数 3）视图对象；XxxxVO，要求： 不可继承自 Entity VO 可以继承、组合其他 DTO，VO，BO 等对象 VO 只能用于返回前端、rpc 的业务数据封装对象 4）业务对象 BO，要求： 不可以继承自 Entity BO 对象只能用于 service，manager，dao 层，不得用于 controller 层 三、MVC 规范1、整体分层 controller 层 service 层 manager 层 dao 层 2、 controller 层规范1） 只允许在 method 上添加 RequestMapping 注解，不允许加在 class 上（为了方便的查找 url，放到 url 不能一次性查找出来） 正例： 1234567@RestControllerpublic class DepartmentController &#123; @GetMapping(\"/department/list\") public ResponseDTO&lt;List&lt;DepartmentVO&gt;&gt; listDepartment() &#123; return departmentService.listDepartment(); &#125; 反例： 1234567@RequestMapping (\"/department\")public class DepartmentController &#123; @GetMapping(\"/list\") public ResponseDTO&lt;List&lt;DepartmentVO&gt;&gt; listDepartment() &#123; return departmentService.listDepartment(); &#125; 2）不推荐使用 rest 命名 url， 只能使用 get/post 方法。url 命名上规范如下： 虽然 Rest 大法好，但是有时并不能一眼根据 url 看出来是什么操作，所以我们选择了后者，这个没有对与错，只有哪个更适合我们的团队。 /业务模块/子模块/动作 正例： 12345GET /department/get/&#123;id&#125; 查询某个部门详细信息POST /department/query 复杂查询POST /department/add 添加部门POST /department/update 更新部门GET /department/delete/&#123;id&#125; 删除部门 3）每个方法必须添加 swagger 文档注解 @ApiOperation ，并填写接口描述信息，描述最后必须加上作者信息 @author 哪吒 。 正例： 12345@ApiOperation(\"更新部门信息 @author 哪吒\")@PostMapping(\"/department/update\")public ResponseDTO&lt;String&gt; updateDepartment(@Valid @RequestBody DeptUpdateDTO deptUpdateDTO) &#123; return departmentService.updateDepartment(deptUpdateDTO);&#125; 4）controller 负责协同和委派业务，充当路由的角色，每个方法要保持简洁： 不做任何的业务逻辑操作 不做任何的参数、业务校验，参数校验只允许使用@Valid 注解做简单的校验 不做任何的数据组合、拼装、赋值等操作 正例： 12345@ApiOperation(\"添加部门 @author 哪吒\")@PostMapping(\"/department/add\")public ResponseDTO&lt;String&gt; addDepartment(@Valid @RequestBody DepartmentCreateDTO departmentCreateDTO) &#123; return departmentService.addDepartment(departmentCreateDTO);&#125; 5）只能在 controller 层获取当前请求用户，并传递给 service 层。 因为获取当前请求用户是从 ThreadLocal 里获取取的，在 service、manager、dao 层极有可能是其他非 request 线程调用，会出现 null 的情况，尽量避免 123456@ApiOperation(\"添加员工 @author yandanyang\")@PostMapping(\"/employee/add\")public ResponseDTO&lt;String&gt; addEmployee(@Valid @RequestBody EmployeeAddDTO employeeAddDTO) &#123; LoginTokenBO requestToken = SmartRequestTokenUtil.getRequestUser(); return employeeService.addEmployee(employeeAddDTO, requestToken);&#125; 3、 service 层规范1）合理拆分 service 文件，如果业务较大，请拆分为多个 service。 如订单业务,所有业务都写到 OrderService 中会导致文件过大，故需要进行拆分如下： OrderQueryService 订单查询业务 OrderCreateService 订单新建业务 OrderDeliverService 订单发货业务 OrderValidatorService 订单验证业务 2）谨慎处理 @Transactional 事务注解的使用，不要简单对 service 的方法添加个 @Transactional 注解就觉得万事大吉了。应当合并对数据库的操作，尽量减少添加了@Transactional方法内的业务逻辑。@Transactional 注解内的 rollbackFor 值必须使用异常的基类 Throwable.class 对于@Transactional 注解，当 spring 遇到该注解时，会自动从数据库连接池中获取 connection，并开启事务然后绑定到 ThreadLocal 上，如果业务并没有进入到最终的 操作数据库环节，那么就没有必要获取连接并开启事务，应该直接将 connection 返回给数据库连接池，供其他使用（比较难以讲解清楚，如果不懂的话就主动去问）。 反例： 12345678910111213141516171819202122232425@Transactional(rollbackFor = Throwable.class)public ResponseDTO&lt;String&gt; upOrDown(Long departmentId, Long swapId) &#123; // 验证 1 DepartmentEntity departmentEntity = departmentDao.selectById(departmentId); if (departmentEntity == null) &#123; return ResponseDTO.wrap(DepartmentResponseCodeConst.NOT_EXISTS); &#125; // 验证 2 DepartmentEntity swapEntity = departmentDao.selectById(swapId); if (swapEntity == null) &#123; return ResponseDTO.wrap(DepartmentResponseCodeConst.NOT_EXISTS); &#125; // 验证 3 Long count = employeeDao.countByDepartmentId(departmentId) if (count != null &amp;&amp; count &gt; 0) &#123; return ResponseDTO.wrap(DepartmentResponseCodeConst.EXIST_EMPLOYEE); &#125; // 操作数据库 4 Long departmentSort = departmentEntity.getSort(); departmentEntity.setSort(swapEntity.getSort()); departmentDao.updateById(departmentEntity); swapEntity.setSort(departmentSort); departmentDao.updateById(swapEntity); return ResponseDTO.succ();&#125; 以上代码前三步都是使用 connection 进行验证操作，由于方法上有@Transactional 注解，所以这三个验证都是使用的同一个 connection。 若对于复杂业务、复杂的验证逻辑，会导致整个验证过程始终占用该 connection 连接，占用时间可能会很长，直至方法结束，connection 才会交还给数据库连接池。 对于复杂业务的不可预计的情况，长时间占用同一个 connection 连接不是好的事情，应该尽量缩短占用时间。 正例： 123456789101112131415161718192021222324252627282930DepartmentService.javapublic ResponseDTO&lt;String&gt; upOrDown(Long departmentId, Long swapId) &#123; DepartmentEntity departmentEntity = departmentDao.selectById(departmentId); if (departmentEntity == null) &#123; return ResponseDTO.wrap(DepartmentResponseCodeConst.NOT_EXISTS); &#125; DepartmentEntity swapEntity = departmentDao.selectById(swapId); if (swapEntity == null) &#123; return ResponseDTO.wrap(DepartmentResponseCodeConst.NOT_EXISTS); &#125; Long count = employeeDao.countByDepartmentId(departmentId) if (count != null &amp;&amp; count &gt; 0) &#123; return ResponseDTO.wrap(DepartmentResponseCodeConst.EXIST_EMPLOYEE); &#125; departmentManager.upOrDown(departmentSort,swapEntity); return ResponseDTO.succ();&#125;DepartmentManager.java@Transactional(rollbackFor = Throwable.class)public void upOrDown(DepartmentEntity departmentEntity ,DepartmentEntity swapEntity)&#123; Long departmentSort = departmentEntity.getSort(); departmentEntity.setSort(swapEntity.getSort()); departmentDao.updateById(departmentEntity); swapEntity.setSort(departmentSort); departmentDao.updateById(swapEntity);&#125; 将数据在 service 层准备好，然后传递给 manager 层，由 manager 层添加@Transactional 进行数据库操作。 3）需要注意的是：注解 @Transactional 事务在类的内部方法调用是不会生效的 反例：如果发生异常，saveData方法上的事务注解并不会起作用 123456789101112@Servicepublic class OrderService&#123; public void createOrder(OrderCreateDTO createDTO)&#123; this.saveData(createDTO); &#125; @Transactional(rollbackFor = Throwable.class) public void saveData(OrderCreateDTO createDTO)&#123; orderDao.insert(createDTO); &#125;&#125; Spring采用动态代理(AOP)实现对bean的管理和切片，它为我们的每个class生成一个代理对象。只有在代理对象之间进行调用时，可以触发切面逻辑。而在同一个class中，方法A调用方法B，调用的是原对象的方法，而不通过代理对象。所以Spring无法拦截到这次调用，也就无法通过注解保证事务了。简单来说，在同一个类中的方法调用，不会被方法拦截器拦截到，因此事务不会起作用。 解决方案： 可以将方法放入另一个类，如新增 manager层，通过spring注入，这样符合了在对象之间调用的条件。 启动类添加@EnableAspectJAutoProxy(exposeProxy = true)，方法内使用AopContext.currentProxy()获得代理类，使用事务。 123456789101112SpringBootApplication.java@EnableAspectJAutoProxy(exposeProxy = true)@SpringBootApplicationpublic class SpringBootApplication &#123;&#125;OrderService.javapublic void createOrder(OrderCreateDTO createDTO)&#123; OrderService orderService = (OrderService)AopContext.currentProxy(); orderService.saveData(createDTO);&#125; 4）service是具体的业务处理逻辑服务层，尽量避免将web层某些参数传递到service中。 反例： 123456789101112131415public ResponseDTO&lt;String&gt; handlePinganRequest(HttpServletRequest request)&#123; InputStreamReader inputStreamReader = new InputStreamReader(request.getInputStream(), \"GBK\"); BufferedReader reader = new BufferedReader(inputStreamReader); StringBuilder sb = new StringBuilder(); String str; while ((str = reader.readLine()) != null) &#123; sb.append(str); &#125; if(!JSON.isValid(msg))&#123; return ResponseDTO.wrap(ResponseCodeConst.ERROR_PARAM); &#125; PinganMsgDTO PinganMsgDTO = JSON.parseObject(msg,PinganMsgDTO.class); // 示例结束&#125; 反例中出现的问题： 反例中把 HttpServletRequest 传递到service中，是为了获取Request流中的字符信息，然后才是真正的业务处理。按照分层的初衷：将代码、业务逻辑解耦，正确的做法应该是handlePinganRequest方法将String字符作为参数直接处理业务，将从Request中获取字符的操作放入controller中。 另一个坏处是不方便做单元测试，还得一个new一个HttpServletRequest并制造一个InputStream，然而这样做并不能模拟到真实的业务情景及数据。 4、 manager 层规范manager 层的作用(引自《阿里 java 手册》)： 对第三方平台封装的层，预处理返回结果及转化异常信息； 对 Service 层通用能力的下沉，如缓存方案、中间件通用处理； 与 DAO 层交互，对多个 DAO 的组合复用。 5、 dao 层规范优先使用 mybatis-plus 框架。如果需要多个数据源操作的，可以选择使用 SmartDb 框架。 1）所有 Dao 继承自 BaseMapper 2）禁止使用 Mybatis-plus 的 Wrapper 条件构建器 3）禁止直接在 mybatis xml 中写死常量，应从 dao 中传入到 xml 中 3）建议不要使用星号 * 代替所有字段 正例： 12345678910111213 NoticeDao.java Integer noticeCount(@Param(\"sendStatus\") Integer sendStatus);--------------------------------------------- NoticeMapper.xml &lt;select id=\"noticeCount\" resultType=\"integer\"&gt; select count(1) from t_notice where send_status = #&#123;sendStatus&#125; &lt;/select&gt; 反例： 12345678910111213 NoticeDao.java Integer noticeCount();--------------------------------------------- NoticeMapper.xml &lt;select id=\"noticeCount\" resultType=\"integer\"&gt; select count(1) from t_notice where send_status = 0 &lt;/select&gt; 3）dao层方法命名规范 获取单个对象的方法用 get 做前缀。 获取多个对象的方法用 list 做前缀。 获取统计值的方法用 count 做前缀。 插入的方法用 save/insert 做前缀。 删除的方法用 remove/delete 做前缀。 修改的方法用 update 做前缀。 建议：dao层方法命名尽量以sql语义命名，避免与业务关联。 正例： 1List&lt;PerformanceDTO&gt; listByMonthAndItemId(@Param(\"month\") String month, @Param(\"itemId\") Integer itemId); 反例： 1List&lt;PerformanceDTO&gt; getInternalData(@Param(\"month\") String month, @Param(\"itemId\") Integer itemId); 反例中出现的不规范操作： get代表单个查询，批量查询的应该 list 开头。 命名与业务关联，局限了dao方法的使用场景和范围，降低了方法的复用性，造成他人困惑以及重复造轮子。 6、boolean类型的属性命名规范 类中布尔类型的变量，都不要加is，否则部分框架解析会引起序列化错误。反例：定义为基本数据类型 Boolean isDeleted；的属性，它的方法也是 isDeleted()，RPC在反向解析的时候，“以为”对应的属性名称是 deleted，导致属性获取不到，进而抛出异常。 这是阿里巴巴开发手册中的原文，我们团队的规定是：boolean 类型的类属性和数据表字段都统一使用 flag 结尾。虽然使用 isDeleted，is_deleted 从字面语义上更直观，但是比起可能出现的潜在错误，这点牺牲还是值得的。 正例： 1deletedFlag，deleted_flag，onlineFlag，online_flag 7、四、数据库 规范1 建表规范表必备三字段：id, create_time, update_time id 字段 Long 类型，单表自增，自增长度为 1 create_time 字段 datetime 类型，默认值 CURRENT_TIMESTAMP update_time 字段 datetime 类型，默认值 CURRENT_TIMESTAMP, On update CURRENT_TIMESTAMP 2 枚举类表字段注释需要将所有枚举含义进行注释修改或增加字段的状态描述，必须要及时同步更新注释。如下表的 sync_status 字段 同步状态 0 未开始 1同步中 2同步成功 3失败。 正例： 12345678CREATE TABLE `t_change_data` ( `id` BIGINT(20) UNSIGNED NOT NULL AUTO_INCREMENT, `sync_status` TINYINT(3) UNSIGNED NOT NULL DEFAULT '0' COMMENT '同步状态 0 未开始 1同步中 2同步成功 3失败', `sync_time` DATETIME NULL DEFAULT NULL COMMENT '同步时间', `create_time` DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP, `update_time` DATETIME NULL DEFAULT NULL ON UPDATE CURRENT_TIMESTAMP, PRIMARY KEY (`change_data_id`)) 反例： 12345678CREATE TABLE `t_change_data` ( `id` BIGINT(20) UNSIGNED NOT NULL AUTO_INCREMENT, `sync_status` TINYINT(3) UNSIGNED NOT NULL DEFAULT '0' COMMENT '同步状态 ', `sync_time` DATETIME NULL DEFAULT NULL COMMENT '同步时间', `create_time` DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP, `update_time` DATETIME NULL DEFAULT NULL ON UPDATE CURRENT_TIMESTAMP, PRIMARY KEY (`change_data_id`)) 3 合理结合业务给表字段添加索引和唯一索引具体索引规范请参照《阿里巴巴 Java 开发手册》索引规约 五、其他1、代码提交规范 提交前应该冷静、仔细检查一下，确保没有忘记加入版本控制或不应该提交的文件。 提交前应该先编译一次（idea里ctrl+F9），防止出现编译都报错的情况。 提交前先更新pull一次代码，提交前发生冲突要比提交后发生冲突容易解决的多。 提交前检查代码是否格式化，是否符合代码规范，无用的包引入、变量是否清除等等。 提交时检查注释是否准确简洁的表达出了本次提交的内容。 2、maven项目 pom禁止出现相同 groupId，artifactId 的依赖配置。 项目名称应该与 artifactId 保持一致。 定期检查jar包依赖关系，及时排除解决冲突的jar包。 3、保持项目整洁使用git，必须添加 .gitignore 忽略配置文件。不要提交与项目无关的内容文件：idea配置、target包等。","tags":[{"name":"规范","slug":"规范","permalink":"http://luoyd.cn/tags/规范/"},{"name":"Java","slug":"Java","permalink":"http://luoyd.cn/tags/Java/"},{"name":"后台","slug":"后台","permalink":"http://luoyd.cn/tags/后台/"}]},{"title":"Mybatis-plus","date":"2019-12-24T04:28:04.301Z","path":"2019/12/24/Mybatis-plus/","text":"Mybatis-Plus特性 特点 概述 无入侵 只增强不做改变，引入之后现有工程不产生影响 损耗小 启动时自动注入基本CURD，性能基本无损耗，直接面向对象操作 强大的CRUD 操作 内置通用Mapper、Service，通过少量配置即可实现单表大部分 CRUD操作，更有强大的条件构造器，满足各类使用需求 支持Lambda形式调用 通过Lambda表达式，方便的编写各类查询条件，无需再担心字段写错 支持主键自动生成 支持多达 4 种主键策略（内含分布式唯一ID 生成器 - Sequence），可自由配置，完美解决主键问题 支持 ActiveRecord 模式 支持 ActiveRecord 形式调用，实体类只需继承 Model 类即可进行强大的 CRUD 操作 支持自定义全局通用操作 支持全局通用方法注入Write once, use anywhere 内置代码生成器 采用代码或者 Maven 插件可快速生成 Mapper 、Model、Service 、 Controller 层代码，支持模板引擎以及自定义配置 内置分页插件 基于 MyBatis物理分页，开发者无需关心具体操作，配置好插件之后，写分页等同于普通 List 查询 分页插件支持多种数据库 支持MySQL、MariaDB、Oracle、DB2、H2、HSQL、SQLite、Postgre、SQLServer 等多种数据库 内置性能分析插件 可输出Sql语句以及其执行时间，建议开发测试时启用该功能，能快速揪出慢查询 内置全局拦截插件 提供全表delete、update操作智能分析阻断，也可自定义拦截规则，预防误操作 框架结构 使用1、安装 Maven12345&lt;dependency&gt; &lt;groupId&gt;com.baomidou&lt;/groupId&gt; &lt;artifactId&gt;mybatis-plus-boot-starter&lt;/artifactId&gt; &lt;version&gt;3.3.0&lt;/version&gt;&lt;/dependency&gt; 2、配置 在SpringBoot启动类中添加@MapperScan注解，扫描Mapper文件夹 123456789@SpringBootApplication@MapperScan(&quot;com.baomidou.mybatisplus.samples.quickstart.mapper&quot;)public class Application &#123; public static void main(String[] args) &#123; SpringApplication.run(QuickStartApplication.class, args); &#125;&#125; 在application.yml配置文件中添加Mysql数据库相关配置 123456789 # DataSource Configspring: datasource: driver-class-name: org.h2.Driver schema: classpath:db/schema-h2.sql data: classpath:db/data-h2.sql url: jdbc:h2:mem:test username: root password: test 3、测试 实体类 1234567@Datapublic class User &#123; private Long id; private String name; private Integer age; private String email;&#125; Mapper类 123public interface UserMapper extends BaseMapper&lt;User&gt; &#123;&#125; 测试类 12345678910111213141516@RunWith(SpringRunner.class)@SpringBootTestpublic class SampleTest &#123; @Autowired private UserMapper userMapper; @Test public void testSelect() &#123; System.out.println((&quot;----- selectAll method test ------&quot;)); List&lt;User&gt; userList = userMapper.selectList(null); Assert.assertEquals(5, userList.size()); userList.forEach(System.out::println); &#125;&#125; UserMapper中的selectList()方法的参数为MP内置的条件封装Wrapper，所以不填写即无任何条件 4、注解4.1 @TableName 表名注解 属性 类型 必须指定 默认值 描述 value String 否 “” 表名 schema String 否 “” schema(@since3.1.1) keepGlobalPrefix boolean 否 false 是否保持使用全局的 tablePrefix 的值(如果设置了全局 tablePrefix 且自行设置了 value 的值) resultMap String 否 “” xml中resultMap的id autoResultMap boolean 否 false 是否自动构建 resultMap 并使用(如果设置 resultMap 则不会进行 resultMap 的自动构建并注入)(@since 3.1.2) 关于autoResultMap的说明: 从mp的原理上讲,因为底层是mybatis,所以一些mybatis的常识你要知道,mp只是帮你注入了常用crud 注入之前可以说是动态的(根据你entity的字段以及注解变化而变化),但是注入之后是静态的(等于你写在xml的东西)而对于直接指定typeHandler,mybatis只支持你写在2个地方: 1、定义在resultMap里,只作用于select查询的返回结果封装 2、定义在insert和updatesql的#{property}里的property后面(例:#{property,typehandler=xxx.xxx.xxx}),只作用于设置值而除了这两种直接指定typeHandler,mybatis有一个全局的扫描你自己的typeHandler包的配置,这是根据你的property的类型去找typeHandler并使用这个属性的作用就是:如果你的property类型… todo 4.2 @TableId 主键注解 属性 类型 必须指定 默认值 描述 value String 否 “” 主键字段名 type Enum 否 IdType.NONE 主键类型 4.2.1 IdType 值 描述 AUTO 数据库自增 INPUT 自行输入 ID_WORKER 分布式全局唯一ID长整型类型 UUID 32位UUID字符串 NONE 无状态 ID_WORKER_STR 分布式全局唯一ID字符串类型 4.3 @TableField 字段注解 属性 类 型 必须指定 默认值 描述 value String 否 “” 字段名 el String 否 “” 映射为原生 #{ … } 逻辑,相当于写在 xml 里的 #{ … } 部分 exist boolean 否 true 是否为数据库表字段 condition String 否 “” 字段 where 实体查询比较条件,有值设置则按设置的值为准,没有则为默认全局 update String 否 “” 字段 update set 部分注入, 例update=”%s+1”：表示更新时会set version=version+1(该属性优先级高于 el 属性) insertStrategy Enum N DEFAULT 例：NOT_NULL: insert into table_a(column) values (#{columnProperty}) (since v_3.1.2) updateStrategy Enum N DEFAULT 例：IGNORED: update table_a set column=#{columnProperty} (since v_3.1.2) whereStrategy Enum N DEFAULT 例：NOT_EMPTY: where column=#{columnProperty} (since v_3.1.2) fill num 否 FieldFill.DEFAULT 字段自动填充策略 select boolean 否 true 是否进行 select 查询 keepGlobalFormat Boolean 否 false 是否保持使用全局的 format 进行处理(@since 3.1.1) 4.3.1 FiledStrategy 值 描述 IGNORED 忽略判断 NOT_NULL 非忽略判断 NOT_EMPTY 非空判断(只对字符串类型字段,其他类型字段依然为非NULL判断) DEFAULT 追随全局配置 4.3.2 FileFill 值 描述 DEFAULT 默认不处理 INSERT 插入时填充字段 UPDATE 更新时填充字段 INSERT_UPDATE 插入和更新时填充字段 4.4 @Version 乐观锁注解、标记@version在字段上 4.4.1 EnumValue 通枚举类注解（注解在枚举字段上） 4.4.2 TableLogic 表字段逻辑处理注解（逻辑删除） 属性 类型 必须指定 默认值 描述 value String 否 “” 逻辑未删除值 delval String 否 “” 逻辑删除值 4.4.3 SqlParser 租户注解(3.1.1开始支持注解在mapper上) 属性 类型 必须指定 默认值 描述 filter boolean 否 flase true: 表示过滤SQL解析，即不会进入ISqlParser解析链，否则会进解析链并追加例如tenant_id等条件 4.5 @keySequence 序列主键策略Oracle 属性 类型 必须指定 默认值 描述 value String 否 “” 序列名 clazz Class 否 Long.class id的类型, 可以指定String.class，这样返回的Sequence值是字符串”1” 核心功能1、代码生成器1.1 添加依赖 添加代码生成器依赖 12345&lt;dependency&gt; &lt;groupId&gt;com.baomidou&lt;/groupId&gt; &lt;artifactId&gt;mybatis-plus-generator&lt;/artifactId&gt; &lt;version&gt;3.3.0&lt;/version&gt;&lt;/dependency&gt; 添加 模板引擎 依赖，MyBatis-Plus 支持 Velocity（默认）、Freemarker、Beetl，用户可以选择自己熟悉的模板引擎，如果都不满足您的要求，可以采用自定义模板引擎。 Velocity（默认）： 12345&lt;dependency&gt; &lt;groupId&gt;org.apache.velocity&lt;/groupId&gt; &lt;artifactId&gt;velocity-engine-core&lt;/artifactId&gt; &lt;version&gt;2.1&lt;/version&gt;&lt;/dependency&gt; Freemarker： 12345&lt;dependency&gt; &lt;groupId&gt;org.freemarker&lt;/groupId&gt; &lt;artifactId&gt;freemarker&lt;/artifactId&gt; &lt;version&gt;2.3.29&lt;/version&gt;&lt;/dependency&gt; Beetl: 12345&lt;dependency&gt; &lt;groupId&gt;com.ibeetl&lt;/groupId&gt; &lt;artifactId&gt;beetl&lt;/artifactId&gt; &lt;version&gt;3.0.15.RELEASE&lt;/version&gt;&lt;/dependency&gt; 注意！如果您选择了非默认引擎，需要在 AutoGenerator 中 设置模板引擎。 12345678910111213AutoGenerator generator = new AutoGenerator();// set freemarker enginegenerator.setTemplateEngine(new FreemarkerTemplateEngine());// set beetl enginegenerator.setTemplateEngine(new BeetlTemplateEngine());// set custom engine (reference class is your custom engine class)generator.setTemplateEngine(new CustomTemplateEngine());// other config... 1.2 编写配置 配置GlobalConfig 1234GlobalConfig globalConfig = new GlobalConfig();globalConfig.setOutputDir(System.getProperty(&quot;user.dir&quot;) + &quot;/src/main/java&quot;);globalConfig.setAuthor(&quot;jobob&quot;);globalConfig.setOpen(false); 配置 DataSourceConfig 12345DataSourceConfig dataSourceConfig = new DataSourceConfig();dataSourceConfig.setUrl(&quot;jdbc:mysql://localhost:3306/ant?useUnicode=true&amp;useSSL=false&amp;characterEncoding=utf8&quot;);dataSourceConfig.setDriverName(&quot;com.mysql.jdbc.Driver&quot;);dataSourceConfig.setUsername(&quot;root&quot;);dataSourceConfig.setPassword(&quot;password&quot;); 1.3 自定义模板引擎请继承类 com.baomidou.mybatisplus.generator.engine.AbstractTemplateEngine 1.4 自定义代码模板12345678//指定自定义模板路径, 位置：/resources/templates/entity2.java.ftl(或者是.vm)//注意不要带上.ftl(或者是.vm), 会根据使用的模板引擎自动识别TemplateConfig templateConfig = new TemplateConfig() .setEntity(&quot;templates/entity2.java&quot;);AutoGenerator mpg = new AutoGenerator();//配置自定义模板mpg.setTemplate(templateConfig); 1.5 自定义属性注入12345678910111213InjectionConfig injectionConfig = new InjectionConfig() &#123; //自定义属性注入:abc //在.ftl(或者是.vm)模板中，通过$&#123;cfg.abc&#125;获取属性 @Override public void initMap() &#123; Map&lt;String, Object&gt; map = new HashMap&lt;&gt;(); map.put(&quot;abc&quot;, this.getConfig().getGlobalConfig().getAuthor() + &quot;-mp&quot;); this.setMap(map); &#125;&#125;;AutoGenerator mpg = new AutoGenerator();//配置自定义属性注入mpg.setCfg(injectionConfig); 12345entity2.java.ftl自定义属性注入abc=$&#123;cfg.abc&#125;entity2.java.vm自定义属性注入abc=$!&#123;cfg.abc&#125; 1.6 字段其他字段查询注入 12345678910111213new DataSourceConfig().setDbQuery(new MySqlQuery() &#123; /** * 重写父类预留查询自定义字段&lt;br&gt; * 这里查询的 SQL 对应父类 tableFieldsSql 的查询字段，默认不能满足你的需求请重写它&lt;br&gt; * 模板中调用： table.fields 获取所有字段信息， * 然后循环字段获取 field.customMap 从 MAP 中获取注入字段如下 NULL 或者 PRIVILEGES */ @Override public String[] fieldCustom() &#123; return new String[]&#123;&quot;NULL&quot;, &quot;PRIVILEGES&quot;&#125;; &#125;&#125;) 2、CRUD接口2.1 Service CRUD接口 说明 通用 Service CRUD 封装IService接口，进一步封装 CRUD 采用 get 查询单行 remove 删除 list 查询集合 page 分页 前缀命名方式区分 Mapper 层避免混淆 泛型T为任意实体对象 建议如果存在自定义通用 Service 方法的可能，请创建自己的 IBaseService 继承 Mybatis-Plus 提供的基类 对象 Wrapper 为 条件构造器 2.1.1 Save123456// 插入一条记录（选择字段，策略插入）boolean save(T entity);// 插入（批量）boolean saveBatch(Collection&lt;T&gt; entityList);// 插入（批量）boolean saveBatch(Collection&lt;T&gt; entityList, int batchSize); 参数说明 类型 参数名 描述 T entity 实体对象 Collection entityList 实体对象集合 int batchSize 插入批次数量 2.1.2 SaveOrUpdate12345678// TableId 注解存在更新记录，否插入一条记录boolean saveOrUpdate(T entity);// 根据updateWrapper尝试更新，否继续执行saveOrUpdate(T)方法boolean saveOrUpdate(T entity, Wrapper&lt;T&gt; updateWrapper);// 批量修改插入boolean saveOrUpdateBatch(Collection&lt;T&gt; entityList);// 批量修改插入boolean saveOrUpdateBatch(Collection&lt;T&gt; entityList, int batchSize); 参数说明 类型 参数名 描述 T entity 实体对象 Wrapper updateWrapper 实体对象封装操作类UpdateWrapper Collection entityList 实体对象集合 int batchSize 插入批次数量 2.1.3 Remove12345678// 根据 entity 条件，删除记录boolean remove(Wrapper&lt;T&gt; queryWrapper);// 根据 ID 删除boolean removeById(Serializable id);// 根据 columnMap 条件，删除记录boolean removeByMap(Map&lt;String, Object&gt; columnMap);// 删除（根据ID 批量删除）boolean removeByIds(Collection&lt;? extends Serializable&gt; idList); 参数说明 类型 参数名 描述 Wrapper queryWrapper 实体包装类QueryWrapper Serializable id 主键ID Map&lt;String, Object&gt; columnMap 表字段 map 对象 Collection&lt;? extends Serializable&gt; idList 主键ID列表 2.1.4 Update12345678910// 根据 UpdateWrapper 条件，更新记录 需要设置sqlsetboolean update(Wrapper&lt;T&gt; updateWrapper);// 根据 whereEntity 条件，更新记录boolean update(T entity, Wrapper&lt;T&gt; updateWrapper);// 根据 ID 选择修改boolean updateById(T entity);// 根据ID 批量更新boolean updateBatchById(Collection&lt;T&gt; entityList);// 根据ID 批量更新boolean updateBatchById(Collection&lt;T&gt; entityList, int batchSize); 参数说明 类型 参数名 描述 Wrapper updateWrapper 实体对象封装操作类UpdateWrapper T entity 实体对象 Collection entityList 实体对象集合 int batchSize 更新批次数量 2.1.5 Get12345678910// 根据 ID 查询T getById(Serializable id);// 根据 Wrapper，查询一条记录。结果集，如果是多个会抛出异常，随机取一条加上限制条件 wrapper.last(&quot;LIMIT 1&quot;)T getOne(Wrapper&lt;T&gt; queryWrapper);// 根据 Wrapper，查询一条记录T getOne(Wrapper&lt;T&gt; queryWrapper, boolean throwEx);// 根据 Wrapper，查询一条记录Map&lt;String, Object&gt; getMap(Wrapper&lt;T&gt; queryWrapper);// 根据 Wrapper，查询一条记录&lt;V&gt; V getObj(Wrapper&lt;T&gt; queryWrapper, Function&lt;? super Object, V&gt; mapper); 参数说明 类型 参数名 描述 Serializable id 主键Id Wrapper queryWrapper 实体对象封装操作类QueryWrapper boolean throwEx 有多个result是否抛出异常 T entity 实体对象 Function&lt;? super Object,V&gt; mapper 转换函数 2.1.6 List1234567891011121314151617181920//查询所有List&lt;T&gt; list();// 查询列表List&lt;T&gt; list(Wrapper&lt;T&gt; queryWrapper);// 查询（根据ID 批量查询）Collection&lt;T&gt; listByIds(Collection&lt;? extends Serializable&gt; idList);// 查询（根据 columnMap 条件）Collection&lt;T&gt; listByMap(Map&lt;String, Object&gt; columnMap);// 查询所有列表List&lt;Map&lt;String, Object&gt;&gt; listMaps();// 查询列表List&lt;Map&lt;String, Object&gt;&gt; listMaps(Wrapper&lt;T&gt; queryWrapper);// 查询全部记录List&lt;Object&gt; listObjs();// 查询全部记录&lt;V&gt; List&lt;V&gt; listObjs(Function&lt;? super Object, V&gt; mapper);// 根据 Wrapper 条件，查询全部记录List&lt;Object&gt; listObjs(Wrapper&lt;T&gt; queryWrapper);// 根据 Wrapper 条件，查询全部记录&lt;V&gt; List&lt;V&gt; listObjs(Wrapper&lt;T&gt; queryWrapper, Function&lt;? super Object, V&gt; mapper); 参数说明 类型 参数名 描述 Wrapper queryWrapper 实体对象封装操作类QueryWrapper Collection&lt;? extends Serializable idList 主键ID列表 Map&lt;? String,Object&gt; columnMap 表字段map对象 Function&lt;? super Object&gt; mapper 转换函数 2.1.7 Page12345678// 无条件翻页查询IPage&lt;T&gt; page(IPage&lt;T&gt; page);// 翻页查询IPage&lt;T&gt; page(IPage&lt;T&gt; page, Wrapper&lt;T&gt; queryWrapper);// 无条件翻页查询IPage&lt;Map&lt;String, Object&gt;&gt; pageMaps(IPage&lt;T&gt; page);// 翻页查询IPage&lt;Map&lt;String, Object&gt;&gt; pageMaps(IPage&lt;T&gt; page, Wrapper&lt;T&gt; queryWrapper); 参数说明 类型 参数名 描述 IPage page 翻页对象 Wrapper queryWrapper 实体对象封装操作类QueryWrapper 2.1.8 Count1234// 查询总记录数int count();// 根据 Wrapper 条件，查询总记录数int count(Wrapper&lt;T&gt; queryWrapper); 参数说明 类型 参数名 描述 Wrapper queryWrapper 实体对象封装操作类QueryWrapper 2.1.9 Chain query 12345678// 链式查询 普通QueryChainWrapper&lt;T&gt; query();// 链式查询 lambda 式。注意：不支持 KotlinLambdaQueryChainWrapper&lt;T&gt; lambdaQuery(); // 示例：query().eq(&quot;column&quot;, value).one();lambdaQuery().eq(Entity::getId, value).list(); update 12345678// 链式更改 普通UpdateChainWrapper&lt;T&gt; update();// 链式更改 lambda 式。注意：不支持 Kotlin LambdaUpdateChainWrapper&lt;T&gt; lambdaUpdate();// 示例：update().eq(&quot;column&quot;, value).remove();lambdaUpdate().eq(Entity::getId, value).update(entity); 2.2 Mapper CRUD接口 说明 通用 CRUD 封装BaseMapper接口，为 Mybatis-Plus 启动时自动解析实体表关系映射转换为 Mybatis 内部对象注入容器 泛型T为任意实体对象 参数 Serializable 为任意类型主键 Mybatis-Plus 不推荐使用复合主键约定每一张表都有自己的唯一 id 主键 对象Wrapper为条件构造器 2.2.1 Insert12// 插入一条记录int insert(T entity); 参数说明 类型 参数名 描述 T entity 实体对象 2.2.2 Delete12345678// 根据 entity 条件，删除记录int delete(@Param(Constants.WRAPPER) Wrapper&lt;T&gt; wrapper);// 删除（根据ID 批量删除）int deleteBatchIds(@Param(Constants.COLLECTION) Collection&lt;? extends Serializable&gt; idList);// 根据 ID 删除int deleteById(Serializable id);// 根据 columnMap 条件，删除记录int deleteByMap(@Param(Constants.COLUMN_MAP) Map&lt;String, Object&gt; columnMap); 参数说明 类型 参数名 描述 TWrapper &lt; T &gt; wrapper 实体对象封装操作类可以为 null Collection &lt;?&gt; idList 主键ID列表不能为null以及 empty Serializable id 主键ID Map &lt; String, Object&gt; columnMap 表字段 map 对 2.2.3 Update1234// 根据 whereEntity 条件，更新记录int update(@Param(Constants.ENTITY) T entity, @Param(Constants.WRAPPER) Wrapper&lt;T&gt; updateWrapper);// 根据 ID 修改int updateById(@Param(Constants.ENTITY) T entity); 参数说明 类型 参数名 描述 T entity 实体对象（set条件值，可为null） Wrapper updateWrapper 实体对象封装操作类（可以为 null,里面的 entity 用于生成 where 语句） 2.2.4 Select12345678910111213141516171819202122// 根据 ID 查询T selectById(Serializable id);// 根据 entity 条件，查询一条记录T selectOne(@Param(Constants.WRAPPER) Wrapper&lt;T&gt; queryWrapper);// 查询（根据ID 批量查询）List&lt;T&gt; selectBatchIds(@Param(Constants.COLLECTION) Collection&lt;? extends Serializable&gt; idList);// 根据 entity 条件，查询全部记录List&lt;T&gt; selectList(@Param(Constants.WRAPPER) Wrapper&lt;T&gt; queryWrapper);// 查询（根据 columnMap 条件）List&lt;T&gt; selectByMap(@Param(Constants.COLUMN_MAP) Map&lt;String, Object&gt; columnMap);// 根据 Wrapper 条件，查询全部记录List&lt;Map&lt;String, Object&gt;&gt; selectMaps(@Param(Constants.WRAPPER) Wrapper&lt;T&gt; queryWrapper);// 根据 Wrapper 条件，查询全部记录。注意： 只返回第一个字段的值List&lt;Object&gt; selectObjs(@Param(Constants.WRAPPER) Wrapper&lt;T&gt; queryWrapper);// 根据 entity 条件，查询全部记录（并翻页）IPage&lt;T&gt; selectPage(IPage&lt;T&gt; page, @Param(Constants.WRAPPER) Wrapper&lt;T&gt; queryWrapper);// 根据 Wrapper 条件，查询全部记录（并翻页）IPage&lt;Map&lt;String, Object&gt;&gt; selectMapsPage(IPage&lt;T&gt; page, @Param(Constants.WRAPPER) Wrapper&lt;T&gt; queryWrapper);// 根据 Wrapper 条件，查询总记录数Integer selectCount(@Param(Constants.WRAPPER) Wrapper&lt;T&gt; queryWrapper); 参数说明 类型 参数名 描述 Serilizable id 主键Id Wrapper queryWrapper 实体对象封装操作类（可以为null） Collection&lt;? extends Serializable&gt; idList 主键ID列表不能为null以及empty Map&lt;String,Object&gt; columnMap 表字段map对象 IPage page 分页查询条件（可以为 RowBounds.DEFAULT） 2.2.5 mapper层 选装件 说明： 选装件位于 com.baomidou.mybatisplus.extension.injector.methods.additional 包下需要配合Sql 注入器使用 AlwayUpdateSomeColumnById 1int alwaysUpdateSomeColumnById(T entity); insertBatchSomeColumn 1int insertBatchSomeColumn(List&lt;T&gt; entityList); deleteByIdWithFill 1int deleteByIdWithFill(T entity);","tags":[{"name":"持久层框架","slug":"持久层框架","permalink":"http://luoyd.cn/tags/持久层框架/"},{"name":"Mybatis-plus","slug":"Mybatis-plus","permalink":"http://luoyd.cn/tags/Mybatis-plus/"},{"name":"笔记","slug":"笔记","permalink":"http://luoyd.cn/tags/笔记/"},{"name":"springboot","slug":"springboot","permalink":"http://luoyd.cn/tags/springboot/"}]},{"title":"学生信息管理系统SQL语句","date":"2019-11-13T07:02:53.234Z","path":"2019/11/13/学生信息管理系统sql/","text":"student(学号#,姓名,性别,年龄) course(课程号#，课程名，教师号#) score(学号#，课程号#，成绩) teacher(教师号#，教师名) 1.查询“001”课程比“002”课程成绩高的所有学生的学号 12select a.stuNo from score a,score b where a.cNo=&apos;c001&apos; and b.cNo=&apos;c002&apos; and a.stuNo=b.stuNo and a.score&gt;b.score 2.查询平均成绩大于60分的同学的学号和平均成绩 123select stuNo,avg(score)from score group by stuNo having avg(score)&gt;60 3.查询所有同学的学号、姓名、选课数、总成绩 123select a.stuNo,a.stuName,count(cNo),sum(score) from student a,score b where a.stuNo=b.stuNo group by a.stuNo,a.stuName 4.查询姓“赵”的老师的个数 123select count(tName),tName from teacher where tName like &apos;赵%&apos; group by tName 5.查询没学过“某某”老师课的同学的学号、姓名 1234select stuNo,stuName from student where stuNo not in (select a.stuNo from student a,score b where a.stuNo=b.stuNo and cNo in (select d.cNo from teacher c,course d where c.tNo=d.tNo and c.tName=&apos;钱市保&apos;)) 6.查询学过“001”并且也学过编号“002”课程的同学的学号、姓名； 12select a.stuNo,a.stuName from student a,score b,score c where a.stuNo=b.stuNo and b.stuNo=c.stuNo and b.cNo=&apos;c001&apos; and c.cNo=&apos;c002&apos; 7.查询学过“某某”老师所教的所有课的同学的学号、姓名 123456select stuNo,stuName from student where stuNo in (select stuNo from score a,course b,teacher c where a.cNo=b.cNo and b.tNo=c.tNo and c.tName=&apos;钱市保&apos; group by stuNo having count(a.cNo)&gt;=(select count(cNo) from course d,teacher e where d.tNo=e.tNo and e.tName=&apos;钱市保&apos;)) 老师所教课程为一门课 123select stuNo,stuName from student where stuNo in (select a.stuNo from student a,score b where a.stuNo=b.stuNo and b.cNo in (select cNo from teacher c,course d where c.tNo=d.tNo and c.tName=&apos;钱市保&apos;)) 8.查询课程编号“002”的成绩比课程编号“001”课程低的所有同学的学号、姓名 1234select stuNo,stuName from student where stuNo in (select a.stuNo from score a,score b where a.cNo=&apos;c001&apos; and b.cNo=&apos;c002&apos; and a.stuNo=b.stuNo and a.score&gt;b.score) 9.查询所有课程成绩小于60分的同学的学号、姓名 12345select stuNo,stuName from student where stuNo in (select stuNo from score where score&lt;60 group by stuNo having count(cNo)=(select count(cNo) from course)) 10.查询没有学全所有课的同学的学号、姓名 1234select b.stuNo,a.stuName,count(b.cNo) from student a,score b where a.stuNo=b.stuNo group by b.stuNo,a.stuName having count(b.cNo)&lt;(select count(cNo) from course) 11.查询至少有一门课与学号为“1”的同学所学相同的同学的学号和姓名 123select distinct a.stuNo,stuName from student a,score b where a.stuNo=b.stuNo and cNo in (select cNo from score where stuNo=&apos;001&apos;) 12.查询至少学过学号为“001”同学一门课的其他同学学号和姓名 123&amp;&amp;&amp; select distinct a.stuNo,stuName from student a,score b where a.stuNo=b.stuNo and cNo all join (select cNo from score where stuNo=&apos;001&apos;) 13.把“SC”表中“某某”老师教的课的成绩都更改为此课程的平均成绩 12345update score set score=savg from score d,(select avg(score) as savg,a.cNo from score a,course b,teacher c where a.cNo=b.cNo and b.tNo=c.tNo and tName=&apos;钱市保&apos; group by a.cNo) e where d.cNo=e.cNo 老师所教课程为一门课 123456update score set score=(select avg(score) from score group by cNo having cNo=(select a.cNo from course a,teacher b where a.tNo=b.tNo and b.tName=&apos;钱市保&apos;)) where cNo=(select a.cNo from course a,teacher b where a.tNo=b.tNo and b.tName=&apos;钱市保&apos;) select * from score 14.查询和“001”号的同学学习的课程完全相同的其他同学学号和姓名 1234select stuNo from score where cNo in (select cNo from score where stuNo=&apos;005&apos;) group by stuNo having count(cNo)=(select count(*) from score where stuNo=&apos;005&apos;) 15.删除学习“某某”老师课的SC表记录 12delete from score where cNo=(select cNo from course a,teacher b where a.tNo=b.tNo and b.tName=&apos;钱市保&apos;) select * from score 16.向SC表中插入一些记录，这些记录要求符合以下条件：没有上过编号“003”课程的同学学号、2号课的平均成绩 17.按平均成绩从高到低显示所有学生的“C语言”、“sql”、“java”三门的课程成绩 按如下形式显示： 学生ID,C语言,sql,JAVA,有效课程数,有效平均分 18.查询各科成绩最高和最低的分：以如下形式显示：课程ID，最高分，最低分 12select cNo,max(score) as 最高分,min(score) as 最低分 from score group by cNo 19.按各科平均成绩从低到高和及格率的百分数从高到低顺序 123456789101112select avg(c.score),count(a.score)/count(b.score) from score c,(select a.cNo,count(a.score) from score a where a.score&lt;60 group by a.cNo) d,(select b.cNo,count(b.score) from score b group by b.cNo) e where d.cNo=e.cNo group by c.cNo order by avg(c.score) desc (select a.cNo,count(a.score) from score a where a.score&lt;60 group by a.cNo) d (select b.cNo,count(b.score) from score b group by b.cNo) e 20.查询如下课程平均成绩和及格率的百分数(用”1行”显示): C语言（001），数据结构（002），JAVA（003），离散数学（004） 21.查询不同老师所教不同课程平均分从高到低显示 1234select tNo,a.cNo,avg(score) from course a,score b where a.cNo=b.cNo group by tNo,a.cNo order by avg(score) desc 22.查询如下课程成绩第 3 名到第 6 名的学生成绩单：C语言（001），数据结构（002），JAVA（003），离散数学（004） [学生ID],[学生姓名],C语言,数据结构,JAVA,离散数学,平均成绩 23.统计列印各科成绩,各分数段人数:课程ID,课程名称,[100-85],[85-70],[70-60],[ &lt;60] 1234567select distinct e.cNo,count(a.stuNo) as &apos;100-85&apos;,count(b.stuNo) as &apos;85-70&apos;,count(c.stuNo) as &apos;70-60&apos;,count(d.stuNo) as &apos;&lt;60&apos; from score a,score b,score c,score d,score e where a.cNo in (select cNo from course) and a.score between 85 and 100 and b.cNo in (select cNo from course) and b.score between 71 and 84 and c.cNo in (select cNo from course) and c.score between 60 and 70 and d.cNo in (select cNo from course) and d.score&lt;60 group by e.cNo,a.stuNo,b.stuNo,c.stuNo,d.stuNo having a.stuNo&lt;&gt;b.stuNo and a.stuNo&lt;&gt;c.stuNo and a.stuNo&lt;&gt;d.stuNo and b.stuNo&lt;&gt;c.stuNo and b.stuNo&lt;&gt;d.stuNo and c.stuNo&lt;&gt;d.stuNo select cNo,count(stuNo) from score where score between 70 and 100 and cNo=&apos;c001&apos; group by cNo 24.查询学生平均成绩及其名次 123select stuNo,avg(score) from score group by stuNo order by avg(score) desc 25.查询各科成绩前三名的记录:(不考虑成绩并列情况) 123456select a.stuNo,a.cNo,a.score from score a where a.score in (select top 3 score from score b where a.cNo=b.cNo order by score) order by a.cNo 26.查询每门课程被选修的学生数 123select b.cNo ,count(stuNo) from score a right join course b on a.cNo=b.cNo group by b.cNo 27.查询出只选修了一门课程的全部学生的学号和姓名 1234select b.stuNo,a.stuName from student a,score b where a.stuNo=b.stuNo group by b.stuNo,a.stuName having count(b.cNo)=1 28.查询男生、女生人数 12select stuSex,count(stuSex) from student group by stuSex 29.查询姓‘zhao’的学生名单 12select * from student where stuName like &apos;赵%&apos; 30.查询同名同性学生名单，并统计同名人数 123select a.stuNo,a.stuName,count(a.stuNo) from student a,student b where a.stuName=b.stuName and a.stuSex=b.stuSex and a.stuNo&lt;&gt;b.stuNo group by a.stuNo,a.stuName 31.1981年出生的学生名单(注：Student表中Sage列的类型是datetime 32.、查询每门课程的平均成绩，结果按平均成绩升序排列，平均成绩相同时，按课程号降序排列 123select cNo,avg(score) from score group by cNo order by avg(score) asc,cNo 33.查询平均成绩大于70的所有学生的学号、姓名和平均成绩 1234select b.stuNo,a.stuName,avg(score) from student a,score b where a.stuNo=b.stuNo group by b.stuNo,a.stuName having avg(score)&gt;70 34.查询课程名称为“java”，且分数低于70的学生姓名和分数 12select a.stuName,b.score from student a,score b where a.stuNo=b.stuNo and score&lt;70 and b.cNo=(select cNo from course where cName=&apos;java&apos;) 35.查询所有学生的选课情况 1234567select a.stuNo,c.cNo from student a,score b,course c where a.stuNo=b.stuNo and b.cNo=c.cNo order by a.stuNo select a.stuNo,cNo from student a left join (select a.stuNo,c.cNo from student a,score b,course c where a.stuNo=b.stuNo and b.cNo=c.cNo) d on a.stuNo=d.stuNo order by a.stuNo 36.查询任何一门课程成绩在70分以上的姓名、课程名称和分数 12select a.stuName,b.cNo,score from student a,score b where score&gt;70 and a.stuNo=b.stuNo 37.查询不及格的课程，并按课程号从大到小排列 123select cNo,score from score where score&lt;60 order by cNo 38.查询课程编号为003且课程成绩在60分以上的学生的学号和姓名 12select b.stuNo,a.stuName from student a,score b where b.cNo=&apos;c003&apos; and score&gt;60 and a.stuNo=b.stuNo 39.求选了课程的学生人数 1select count(a.stuNo) from (select distinct stuNo from score) a 40.查询选修“赵”老师所授课程的学生中，成绩最高的学生姓名及其成绩 1234select b.stuNo,a.stuName,max(score) from student a,score b where a.stuNo=b.stuNo and b.cNo in (select a.cNo from course a,teacher b where a.tNo=b.tNo and b.tName=&apos;钱市保&apos;) group by b.stuNo,a.stuName,b.cNo having b.cNo in (select a.cNo from course a,teacher b where a.tNo=b.tNo and b.tName=&apos;钱市保&apos;) 41.查询各个课程及相应的选修人数 12345select cNo,count(stuNo) from score group by cNo select b.cNo ,count(stuNo) from score a right join course b on a.cNo=b.cNo group by b.cNo 42.查询不同课程成绩相同的学生的学号、课程号、学生成绩 12select a.stuNo,a.cNo,a.score from score a,score b where a.stuNo=b.stuNo and a.score=b.score and a.cNo&lt;&gt;b.cNo 查询每门功成绩最好的前两名 123456select a.stuNo,a.cNo,a.score from score a where score in(select top 2 score from score b where a.cNo=b.cNo order by score desc) order by a.cNo 44.统计每门课程的学生选修人数（超过2人的课程才统计）。要求输出课程号和选修人数，查询结果按人数降序排列,若人数相同，按课程号升序排列 1234select cNo,count(stuNo) 课程数 from score group by cNo having count(stuNo)&gt;2 order by count(stuNo) desc,cNo 45.检索至少选修两门课程的学生学号 123select stuNo from score group by stuNo having count(cNo)&gt;=2 46.查询全部学生都选修的课程的课程号和课程名 1234567select a.cNo,b.cName from score a,course b where a.cNo=b.cNo group by a.cNo,b.cName having count(a.stuNo)=(select count(stuNo) from student) select a.cNo,b.cName from score a,course b group by a.cNo,b.cName,b.cNo having a.cNo=b.cNo and count(a.stuNo)=(select count(stuNo) from student) 47.查询没学过“钱”老师讲授的任一门课程的学生姓名 12345678910select stuNo,stuName from student where stuNo not in (select stuNo from score a,course b,teacher c where a.cNo=b.cNo and b.tNo=c.tNo and c.tName=&apos;钱市保&apos; group by stuNo having count(a.cNo)&lt;=(select count(cNo) from course d,teacher e where d.tNo=e.tNo and e.tName=&apos;钱市保&apos;)) select stuNo,stuName from student where stuNo not in (select stuNo from score where cNo in (select cNo from teacher c,course d where c.tNo=d.tNo and c.tName=&apos;钱市保&apos;)) 48.查询两门以上不及格课程的同学的学号及其平均成绩 1234select stuNo,avg(score) from score where score&lt;60 group by stuNo having count(cNo)&gt;2 49.检索“004”课程分数小于60，按分数降序排列的同学学号 123select stuNo from score where score&lt;60 and cNo=&apos;c004&apos; order by score desc 50.删除“2”同学的“001”课程的成绩 1delete from score where stuNo=&apos;002&apos; and cNo=&apos;c001&apos;","tags":[{"name":"悦读","slug":"悦读","permalink":"http://luoyd.cn/tags/悦读/"},{"name":"笔记","slug":"笔记","permalink":"http://luoyd.cn/tags/笔记/"},{"name":"MySQL","slug":"MySQL","permalink":"http://luoyd.cn/tags/MySQL/"},{"name":"学生管理系统","slug":"学生管理系统","permalink":"http://luoyd.cn/tags/学生管理系统/"}]},{"title":"MySQL","date":"2019-09-28T10:05:35.375Z","path":"2019/09/28/mysql/","text":"1、数据库基本操作 选择要操作的数据库 12world:数据库名use world; 显示已存在的数据库列表 1show databases; 显示指定数据库下的表的信息 1show tables; 显示指定表的列的信息 12world.country:数据库名.表名show columns from world.country; 显示指定表的索引信息 12world.country:数据库名.表名show index from world.country; 显示指定数据库下的表的详细信息 12world:数据库名show table status from world; 显示指定数据库下的表名称以字母’c’开头的表的详细信息 12world:数据库名show table status from world like &apos;c%&apos;; 显示数据库表的结构，如：字段名，字段类型等 12world.country:数据库名.表名describe world.country; 查看创建表的SQL语句 12demo.test：数据库名.表名show create table demo.test; 查看创建存储过程的SQL语句 12demo.test_proc：数据库名.存储过程名show create procedure demo.test_proc; 查看创建视图的SQL语句 12demo.test_view：数据库名.视图名show create view demo.test_view; 查看创建函数的SQL语句 12demo.test_fun：数据库名.函数名show create function demo.test_fun; 查看当前用户的数据库权限 1show grants; 查看指定用户的数据库权限 12admin@localhost:用户名@访问主机show grants for &apos;admin&apos;@&apos;localhost&apos;; 查询数据库用户信息 1select * from mysql.user; 获取服务器版本信息 1SELECT VERSION(); 获取当前数据库名 (或者返回空) 1SELECT DATABASE(); 获取当前用户名 1SELECT USER(); 获取服务器状态 1SHOW STATUS; 获取服务器配置变量 1SHOW VARIABLES; 例如： 查询自增长值的步长，即每次增加多少，默认为1。 1show variables like &apos;%auto_increment%&apos;; 设置自增长值每次增加的数值，会影响所有数据表。 1set auto_increment_increment=3; 设置自增长值的起始值，会影响所有数据表。 1set auto_increment_offset=100; mysql运行在安全模式下时，非主键条件下是无法执行update或者delete命令的 查看安全模式状态 1show variables like &apos;%sql_safe_updates%&apos;; 设置安全模式为关闭 1set sql_safe_updates=off; 获取最近一次向具有identity属性(即自增列)的表插入数据时对应的自增列的值，@@identity是系统定义的全局变量。 1select @@identity; LAST_INSERT_ID函数将返回当前连接自增列最新的 insert or update 操作生成的第一个记录的ID。因为其基于Connection的，所以也是线程安全的。 1select LAST_INSERT_ID(); 2、创建、删除用户及授权 创建一个新的用户，并设置登录密码 test:用户名;localhost:本地主机访问(如果需要其他任意主机访问，请使用通配符’%’);123456:用户密码; 1create user &apos;test&apos;@&apos;localhost&apos; identified by &apos;123456&apos;; 创建一个新的用户，不指定登录密码，即不需要登录密码 1create user &apos;test01&apos;@&apos;localhost&apos;; 删除指定的用户 1drop user &apos;test01&apos;@&apos;localhost&apos;; 修改用户名 123test@localhost:要修改的用户名和访问主机test@%:修改为的用户名和访问主机rename user &apos;test&apos;@&apos;localhost&apos; to &apos;test&apos;@&apos;%&apos;; 修改用户密码 123test@localhost:要修改的用户名和访问主机123456:新的用户密码set password for &apos;test&apos;@&apos;localhost&apos; = Password(&apos;123456&apos;); 授予指定用户’test’对于’world’数据库下’country’表的查询权限 123select:查询权限;world.country:数据库名.表名;&apos;test&apos;@&apos;localhost&apos;:用户名@访问主机;grant select on world.country to &apos;test&apos;@&apos;localhost&apos;; 立即启用修改(默认再次登录才会生效) 1flush privileges; 撤销指定用户’test’对于’world’数据库下’country’表的查询权限 12select:查询权限;world.country:数据库名.表名;&apos;test&apos;@&apos;localhost&apos;:用户名@访问主机;revoke select on world.country from &apos;test&apos;@&apos;localhost&apos;; 立即启用修改(默认再次登录才会生效) 1flush privileges; 授予指定用户’test’对于’world’数据库下所有表的查询、新增、修改、删除权限 1grant select,insert,update,delete on world.* to &apos;test&apos;@&apos;localhost&apos;; 撤销指定用户’test’对于’world’数据库下所有表的查询、新增、修改、删除权限 1revoke select,insert,update,delete on world.* from &apos;test&apos;@&apos;localhost&apos;; 授予指定用户’test’对于’world’数据库下所有表的表结构进行创建、修改、删除权限 1grant create,alter,drop on world.* to &apos;test&apos;@&apos;localhost&apos;; 撤销指定用户’test’对于’world’数据库下所有表的表结构进行创建、修改、删除权限 1revoke create,alter,drop on world.* from &apos;test&apos;@&apos;localhost&apos;; 授予指定用户’test’对于’world’数据库下所有存储过程的执行权限，并且该用户有权限转授予其他用户 1grant execute on world.* to &apos;test&apos;@&apos;localhost&apos; with grant option; 撤销指定用户’test’对于’world’数据库下所有存储过程的执行权限，转授予权限一并撤销 1revoke execute on world.* from &apos;test&apos;@&apos;localhost&apos;; 3、数据库字符校对集字符校对集，即排序规则，在某个字符集的情况下，字符集的排列顺序应该是什么，称之为校对集。 12345查看所有的字符校对集后缀为_bin:表示基于二进制编码的直接比较后缀为_ci:表示对大小写不敏感的比较后缀为_cs:表示对大小写敏感的比较show collation; 4、创建、删除数据库和表 创建一个名为’test’的数据库 1create database test; 创建一个名为’test’的数据库，如果该数据库已存在则不创建，否则再创建 并指定默认字符集为’utf8’，字符校对集为’utf8_general_ci’ 1create database if not exists test default charset utf8 collate utf8_general_ci; 删除名为’test’的数据库 1drop database test; 创建一个名为’Student’的数据表，如果该数据表已存在则不创建，否则再创建 engine:指定数据库引擎为’InnoDB’auto_increment:指定自增列的起始值为1 12345678910111213141516create table if not exists Student&#123; ID int not null auto_increment, #自动增长列 StuNo varchar(32) not null, StuName varchar(8) not null, StuSex varchar(8) null, StuBirthday tinyint null, CreateTime datetime null, primary key (ID) #指定主键列 &#125;engine=InnoDB auto_increment=1 default charset=utf8 collate=utf8_general_ci; 删除数据表 student，该操作会删除所有数据包括表结构、视图、索引、约束等。 1drop table test.student; 删除数据表中的所有数据，该操作会删除表中所有的数据，但是会保留表结构、视图、索引、约束等。 1truncate table test.student; 创建一个临时表，临时表的创建与数据表的创建类似，只不过需要添加关键字 temporary。 临时表的作用域为当前会话，即当前连接可见，当断开当前连接时会自动销毁，当然也可以手动删除，删除方式与数据表一样。 1234create temporary table Product&#123; ProName varchar(32) not null, Price decimal(10,3) not null default 0.000&#125;; 复制指定数据表的表结构到创建的新表。 1create table test.StudentBak like test.student; 复制指定数据表的表结构及所有数据到创建的新表。 1create table test.StudentBak select * from test.student; 5、DML操作 向数据表中插入数据 1234insert into student(StuNo,StuName,StuSex,Stubirthday,CreateTime) select &apos;A001&apos;,&apos;小张&apos;,&apos;男&apos;,str_to_date(&apos;1988-06-09&apos;,&apos;%Y-%m-%d&apos;),current_timestamp() union allselect &apos;A002&apos;,&apos;小红&apos;,&apos;女&apos;,str_to_date(&apos;1990-08-10&apos;,&apos;%Y-%m-%d&apos;),current_timestamp() 在插入重复的数据时，会直接跳过重复数据的插入。在有自增列或主键的数据表中不起作用，因为自增列和主键都具有唯一性。 1insert ignore into test.student(stuno,stuname,stusex,stubirthday,createtime) values (&apos;A003&apos;,&apos;小鱼&apos;,&apos;女&apos;,&apos;1991-07-07&apos;,current_timestamp()); MySQL的WHERE子句默认是不区分大小写的，如果需要区分大小写，就要在字段前加上关键字 binary 1select * from student where stuno=&apos;a001&apos;; #&apos;1&apos;, &apos;A001&apos;, &apos;小张&apos;, &apos;男&apos;, &apos;1988-06-09&apos;, &apos;2018-01-12 12:17:00&apos; select * from student where binary stuno=&apos;a001&apos;; #null limit:用于设置返回的记录数。 offset:用于设置select语句开始查询的数据偏移量，默认为零。 表示只取前10条数据 1select * from world.city limit 10; 表示跃过5条，从第6条数据开始取10条数据。 1select * from world.city limit 10 offset 5; 表示从第10条开始取5条数据。 1select * from world.city limit 10,5; regexp:用于设置正则表达式匹配项，类似于模糊匹配like。 表示查询名称以字符 ‘A’(不区分大小写)开头的记录。 1select * from world.city where Name regexp &apos;^A&apos;; 表示查询名称中包含字符串 ‘mer’ 的记录。 1select * from world.city where Name regexp &apos;mer&apos;; 表示查询名称以字符 ‘a’ 或字符 ‘b’ 开头的记录或者以字符 ‘r’ 结尾的记录。 1select * from world.city where Name regexp &apos;^\\[ab]|r$&apos;; 6、DDL操作 向指定数据表添加一列，默认添加到数据表字段的末尾。 1alter table test.student add column1 varchar(10) null; 向指定数据表添加一列，并设置默认值为：0 1alter table demo.chinesecharinfo add column IsUseful tinyint unsigned not null default 0; first关键字用于把添加的列设置为第一列。 1alter table test.student add column1 varchar(10) null first; after关键字用于把添加的列设置在指定列的后面，StuSex为指定列的列名。 1alter table test.student add column1 varchar(10) null after StuSex; 删除指定列名的列，当数据表仅剩一个字段时，无法进行删除。 1alter table test.student drop column1; 修改指定列的数据类型，并设置该列位于指定列名的列之后。 1alter table test.student modify column1 char(10) null after CreateTime; 关键字column可省略 1alter table test.student modify column column1 char(10) null after CreateTime; 修改指定列的列名和数据类型，并设置该列位于指定列名的列之后。 column1:为原列名 column2:为新的列名 1alter table test.student change column1 column2 varchar(10) null after CreateTime; 修改指定列的默认值。 1alter table test.student alter column2 set default &apos;123&apos;; 删除指定列的默认值。 1alter table test.student alter column2 drop default; 修改数据表的存储引擎。 123alter table test.student engine = myisam;alter table test.student engine = InnoDB; 修改数据表的自增长值的起始值。 1alter table test.student auto_increment=10; 重建自增长列，当删除数据过多，自增长列的值比较混乱时可以使用，但是重建时如果有新的数据插入，有可能会出现混乱。 12345alter table test.student drop ID;alter table test.student add ID int not null auto_increment first;alter table test.student add primary key(ID); 修改数据表的表名称。1alter table test.student rename to test.StudentBak; 7、索引 查看指定数据表的索引。 1show index from test.student; 删除指定的索引。 1drop index index_name on test.student; 修改表结构的方式删除索引。 1alter table test.student drop index index_name; 创建普通索引。 1create index index_name on test.student(StuNo); 修改表结构的方式添加索引，这种方式可以不指定索引名称，不指定系统会自动默认一个索引名称。 1alter table test.student add index index_name(StuNo); 创建唯一索引，指定创建唯一索引的列的值必须是唯一的，不能重复，但是可以为null。 1create unique index index_name on test.student(StuNo); 修改表结构的方式添加唯一索引。 1alter table test.student add unique index index_name(StuNo); 修改表结构的方式添加主键，必须保证添加主键的列的值不能为null，并且是唯一的，不可重复。 1alter table test.student add primary key PrimaryKey_Name(ID); 删除指定数据表的主键，删除主键时只需指定 primary key，删除索引时必须指定索引名。 注意：当主键列同时是自增长列时，不能直接删除主键，需要先删除自增长约束。 1alter table test.student drop primary key; 添加全文索引。 1alter table test.student add fulltext index_name(StuNo); 加上关键字ignore创建的唯一索引和主键，在插入重复数据时，会直接过滤掉重复数据，并且不会报错，否则就会抛出错误。 123alter ignore table test.student add primary key(ID);alter ignore table test.student add unique index index_name(StuNo); 8、事务 关闭自动提交事务 1set autocommit=0; 开启自动提交事务，默认为开启。 1set autocommit=1; 显式地开启一个事务，有以下两种方法。 12start transaction;begin; commit用于提交事务，只有当自动提交事务被关闭时需要使用。 1commit; rollback用于回滚事务，撤销对于数据库所做的未提交的操作。 1rollback; 用于设置一个保存点，identifier是指保存点的名称。 1savepoint identifier; 用于删除一个保存点，如果指定的保存点不存在，将会抛出一个异常。 1release savepoint identifier; 把事务回滚到指定的保存点。 1rollback to identifier; 设置事务隔离级别，只对下一个事务有效。 1set transaction isolation level &#123;事务隔离级别&#125;; 设置事务隔离级别，对当前会话的事务有效。 1set session transaction isolation level &#123;事务隔离级别&#125;; 设置事务隔离级别，对后面建立MySQL连接的事务有效。 1set global transaction isolation level &#123;事务隔离级别&#125;; 事务的隔离级别 1read uncommitted(读取未提交): 该级别引发的问题是脏读，会读取到其他事务未提交的数据。 read committed(读取已提交): 该级别引发的问题是不可重复读，即设置为该级别的事务只能读取到其他事务已经提交的数据，未提交的数据不能读取，会造成多次查询的结果不一致。 repeatable read(可重复读): 该级别引发的问题是幻读，即当用户修改某一范围内的数据行时，另一个事务又在该范围内插入了新的行，当用户再次读取该范围内的数据时，会发现有新的数据行没有被修改。 该级别是MySQL数据库默认的事务隔离级别。注意：该级别不会对事务查询到的行加行锁，也就是该事务查询到的行，其他事务依然能进行修改，但是能保证数据的一致性。 serializable(可串行化): 该级别是MySQL中事务隔离级别最高的，该级别会锁住事务中操作的整张表，因此不会出现以上三个级别的问题。但是这种隔离级别并发性极地，开发中很少会用到。","tags":[{"name":"悦读","slug":"悦读","permalink":"http://luoyd.cn/tags/悦读/"},{"name":"笔记","slug":"笔记","permalink":"http://luoyd.cn/tags/笔记/"},{"name":"数据库","slug":"数据库","permalink":"http://luoyd.cn/tags/数据库/"},{"name":"MySQL","slug":"MySQL","permalink":"http://luoyd.cn/tags/MySQL/"}]},{"title":"邮箱正则表达式","date":"2019-09-26T14:04:15.000Z","path":"2019/09/26/邮箱正则表达式/","text":"邮箱正则表达式/^([a-zA-Z0-9_\\.\\-])+\\@(([a-zA-Z0-9\\-])+\\.)+([a-zA-Z0-9]{2,4})+$/123456789101112131415import java.util.regex.Matcher;import java.util.regex.Pattern;public class RegexMatches &#123; public static void main(String args[]) &#123; String str = &quot;&quot;; String pattern = &quot;\\w[-\\w.+]*@([A-Za-z0-9][-A-Za-z0-9]+\\.)+[A-Za-z]&#123;2,14&#125;&quot;; Pattern r = Pattern.compile(pattern); Matcher m = r.matcher(str); System.out.println(m.matches()); &#125;&#125;","tags":[{"name":"正则表达式","slug":"正则表达式","permalink":"http://luoyd.cn/tags/正则表达式/"},{"name":"邮箱","slug":"邮箱","permalink":"http://luoyd.cn/tags/邮箱/"}]},{"title":"我的Bootstrap4 学习笔记","date":"2019-09-26T06:16:19.825Z","path":"2019/09/26/Bootstrap4/","text":"1、Bootstraps安装使用Bootstrap4 CDN12345678910111213&lt;!--新Bootstrap 4 核心CSS文件 --&gt;&lt;link rel=&quot;stylesheet&quot; href=&quot;https://cdn.staticfile.org/twitter-bootstrap/4.3.1/css/bootstrap.min.css&quot;&gt;&lt;!--Jquery文件。务必在bootstrap.min.js之前引入 --&gt;&lt;script src=&quot;https://cdn.staticfile.org/jquery/3.2.1/jquery.min.js&quot;&gt;&lt;/script&gt;&lt;!--bootstrap.bundle.min.js 用于弹窗、提示下拉菜单，包含了popper.min.js--&gt;&lt;script src=&quot;https:cdn.staticfile.org/popper.js/1.15.0/umd/popper.min.js&quot;&gt;&lt;/script&gt;&lt;br&gt;&lt;!--最新的Bootstrap4 核心JavaScript文件 --&gt;&lt;script src=&quot;https://cdn.staticfile.org/twitter-bootstrap/4.3.1/js/bootstrap.min.js&quot;&gt;&lt;/script&gt;&lt;meta name=&quot;viewport&quot; content=&quot;width=device-width,initial-scale=1,shrink-to-fit=no&quot;&gt; width=device-width 表示宽度是设备屏幕的宽度initial-scale=1 表示初始的缩放比例shrink-to-fit=no 自动适应手机屏幕宽度 容器类 .container类用于固定宽度并支持响应式布局的容器。 .container-fluid类用于100%宽度，占据全部视口（viewport）的容器。2、Bootstrap4 网格系统网格类(5个类) .col- 针对所有设备 .col-sm- 平板-屏幕宽度等于或大于576px .col-md- 桌面显示器屏幕-屏幕宽度等于或大于768px .col-lg- 大桌面显示器 宽度等于或大于992px .col-xl- 屏幕宽度等于或大于1200px规则 网格每一行需要放在设置.container(固定宽度)或.container-fluid(全屏宽度)类的容器中，以便自动设置外边距与内边距。 使用行来创建水平列组。 内容需要放在列中，并且只有列可以是行的直接子节点。 预定义的类如.row,.col-sm-4可用于快速制作网格布局。 列通过填充创建内容的间隙。这个间隙是通过.rows类上的负边距设置第一行和最后一行的偏移。 网格列是通过跨越指定的12个列来创建。 偏移列通过offset-*-*类来设置。第一个星号是sm(576px),md(768px),lg(992px),xl(1200px)。第二个星号是1～11的数字。 例如：.offset-md-*类。将一个列的左外边距（margin）增加列即把.col-md-\\往右移四列格。3、BootStrap4 文字排版默认设置 默认的font-size为16px，line-height为1.5。 默认的font-family为Helvetica Neue。 所有的&lt;p&gt;元素margin-top:0、margin-bottom:1rem(16px)。 &lt;h1&gt;(2.5rem = 40px)、&lt;h2&gt;(2rem = 32px)、&lt;h3&gt;(1.75rem = 28px)、&lt;h4&gt;(1.5rem = 24px)、&lt;h5&gt;(1.25rem = 20px)、&lt;h6&gt;(1rem = 16px) Display标题类可以输出更大更粗的字体样式,.display-1~.display-4字体依次减小。 &lt;small&gt;元素用于创建字号更小的颜色更浅的文本，&lt;mark&gt;为黄色背景及有一定的内边距，&lt;abbr&gt;为显示在文本底部的一条虚线边框，&lt;blockquote&gt;用于引用内容。4、Bootstrap4 颜色 文本颜色类 .text-muted:柔和的文本.text-primary:重要的文本（蓝色）.text-success:执行成功的文本（绿色）.text-info:代表一些提示信息的文本（靛青色）.text-warning:警告文本（黄色）.text-danger危险操作文本（红色）.text-secondary:副标题（灰色）.text-dark:深灰色字体.text-light:浅灰色文本文本（白色背景看不清楚）.text-white:白色文本（白色背景看不清楚） 背景颜色 bg-primary:重要的背景颜色（蓝色）bg-success:执行成功背景颜色（绿色）bg-info:信息提示背景颜色（浅蓝色）bg-waring:警告背景颜色（黄色）bg-danger:危险背景颜色（红色）bg-secondary:副标题背景颜色（灰色）bg-dark:深灰色背景颜色bg-light:浅灰色背景颜色 5、Bootstrap4 表格 基础表格 .table 例： 条纹表格 .table-striped 带边框表格 .table-bordered 鼠标悬停状态表格 .table-hover 为表格的每行添加鼠标悬停效果（灰色背景） 黑色背景表格 .table-dark 为表格添加黑色背景 黑色条纹表格 .table-dark和.table-striped 联合使用 鼠标悬停效果-黑色背景表格.table-dark和.table-hover 联合使用 指定意义的颜色类设置表格行或者单元格设置颜色 .table-*（颜色：primary、success、danger…） 表头颜色 .thead-dark给表头添加黑色背景。.thead-light 用于给表添加灰色背景。 较小的表格 .table-sm 通过减少内边距来设置较小的表格 响应式表格.table-responsive在屏幕小于992px时创建水平滚钉条，如果可视区宽度大于992px则显示不同效果（没有滚动条） .table-responsive-sm 屏幕宽度小于576px.table-responsive-md 屏幕宽度小于768px.table-responsive-lg 屏幕宽度小于992px.table-responsive-xl 屏幕宽度小于1200px 6、Bootstrap4 图像形状 圆角图片 .rounded 1&lt;img src= &quot;lyd.jpg&quot; class=&quot;rounded&quot; alt=&quot;**&quot;&gt; 椭圆图片 .rounded-circle 缩略图(图片有边框) .img-thumbnail 图片对齐方式 .float-right(右对齐) .float-left(左对齐) 响应式图片 .img-fluid(max-width:100%，height:auto) 7、Bootstrap4 Jumbotron &lt;div&gt;元素中添加.Jumbotron类（超大屏幕）创建一个超大灰色背景框， 全屏幕的Jumbotron：在.jumbotron-fluid类里的div添加.container或.container-fluid类实现8、信息提示框 提示框在.alert类后面添加.ale+rt-success, .alert-info, .alert-warning, .alert-danger, .alert-primary, .alert-secondary, .alert-light,. alert-dark类实现 提示框添加链接： 提示框中在链接的标签上添加.alert-link类 关闭提示框 在提示框的div中添加.alert-dismissible 然后在关闭按钮的链接上添加class=”close”和data-dismiss=”alert”类。 提示框动画 .fade和.show类用于设置提示框在关闭时的淡出和淡入效果。&lt;div class=”alert alert-danger alert-dismissible fade show”&gt;9、按钮样式 12345678910111213141516171819&lt;button type=&quot;button&quot; class=&quot;btn&quot;&gt;基本按钮&lt;/button&gt;&lt;button type=&quot;button&quot; class=&quot;btn btn-primary&quot;&gt;主要按钮&lt;/button&gt;&lt;button type=&quot;button&quot; class=&quot;btn btn-secondary&quot;&gt;次要按钮&lt;/button&gt;&lt;button type=&quot;button&quot; class=&quot;btn btn-success&quot;&gt;成功&lt;/button&gt;&lt;button type=&quot;button&quot; class=&quot;btn btn-info&quot;&gt;信息&lt;/button&gt;&lt;button type=&quot;button&quot; class=&quot;btn btn-warning&quot;&gt;警告&lt;/button&gt;&lt;button type=&quot;button&quot; class=&quot;btn btn-danger&quot;&gt;危险&lt;/button&gt;&lt;button type=&quot;button&quot; class=&quot;btn btn-dark&quot;&gt;黑色&lt;/button&gt;&lt;button type=&quot;button&quot; class=&quot;btn btn-light&quot;&gt;浅色&lt;/button&gt;&lt;button type=&quot;button&quot; class=&quot;btn btn-link&quot;&gt;链接&lt;/button&gt; 按钮类可以作用与&lt;a&gt;、&lt;button&gt;或者&lt;input&gt;元素上。1234&lt;a href=&quot;#&quot; class=&quot;btn btn-info&quot; role=&quot;button&quot;&gt;链接按钮&lt;/a&gt;&lt;button type=&quot;button&quot; class=&quot;btn btn-info&quot;&gt;按钮&lt;/button&gt;&lt;input type=&quot;button&quot; class=&quot;btn btn-info&quot; value=&quot;输入框按钮&quot;&gt;&lt;input type=&quot;submit&quot; class=&quot;btn btn-info&quot; value=&quot;提交按钮&quot;&gt; 按钮设置边框 &lt;button type=”button” class=”btn btn-outline-*&gt;*按钮&lt;/button&gt; *可以是primary（主要按钮） secondary（次要按钮） success（成功） info（信息） waring（警告） danger（危险） dark（黑色） light（浅色）注意设置按钮边框为浅色时还要在其后加text-dark。 不同大小的按钮 btn-lg(大号) btn-sm(小号) 不设置即为默认，为中号 块级按钮 .btn-block 激活和禁用的按钮 .active类设置按钮是可用的 disabled 属性设置按钮是不可点击的 注意&lt;a&gt;元素不支持disable属性，可以通过.disable类来禁止链接的点击。 按钮组bootstrap4允许将按钮放在同一行上，可以在&lt;div&gt;元素上添加.btn-group类创建按钮组。 12345&lt;div class=&quot;btn-group&quot;&gt; &lt;button type=&quot;button&quot; class=&quot;btn btn-primary&quot;&gt;Apple&lt;/button&gt; &lt;button type=&quot;button&quot; class=&quot;btn btn-primary&quot;&gt;Samsung&lt;/button&gt; &lt;button type=&quot;button&quot; class=&quot;btn btn-primary&quot;&gt;Sony&lt;/button&gt;&lt;/div&gt; .btn-group-lg|sm类设置按钮组的大小。 .btn-group-vertical类创建垂直按钮组 在按钮组内设置下拉菜单 1234567&lt;div class=&quot;btn-group&quot;&gt; &lt;button type=&quot;button&quot; class=&quot;btn btn-primary dropdown-toggle&quot; data-toggle=&quot;dropdown&quot;&gt;Sony&lt;/button&gt; &lt;div class=&quot;dropdown-menu&quot;&gt; &lt;a class=&quot;dropdown-item&quot; href=&quot;#&quot;&gt;Tablet&lt;/a&gt; &lt;a class=&quot;dropdown-item&quot; href=&quot;#&quot;&gt;Smartphone&lt;/a&gt; &lt;/div&gt;&lt;/div&gt; 拆分按钮下拉菜单1234567891011&lt;div class=&quot;btn-group&quot;&gt; &lt;button type=&quot;button&quot; class=&quot;btn btn-primary&quot;&gt;Sony&lt;/button&gt; &lt;button type=&quot;button&quot; class=&quot;btn btn-primary dropdown-toggle dropdown-toggle-split&quot; data-toggle=&quot;dropdown&quot;&gt; &lt;span class=&quot;caret&quot;&gt;&lt;/span&gt; &lt;/button&gt; &lt;div class=&quot;dropdown-menu&quot;&gt; &lt;a class=&quot;dropdown-item&quot; href=&quot;#&quot;&gt;Tablet&lt;/a&gt; &lt;a class=&quot;dropdown-item&quot; href=&quot;#&quot;&gt;Smartphone&lt;/a&gt; &lt;/div&gt;&lt;/div&gt; 垂直按钮组及下拉菜单12345678910&lt;div class=&quot;btn-group-vertical&quot;&gt; &lt;button type=&quot;button&quot; class=btn btn-primary&gt;Apple&lt;/button&gt; &lt;div class=&quot;btn-group&quot;&gt; &lt;button type=&quot;button&quot; class=&quot;btn btn-primary dropdown-toggle&quot;data-toggle=&quot;dropdown&quot;&gt;Sony&lt;button&gt; &lt;div class=&quot;dropdown-menu&quot;&gt; &lt;a class=&quot;dropdown-item&quot;href=&quot;#&quot;&gt;Tablet&lt;/a&gt; &lt;a class=&quot;dropdown-item&quot; href=&quot;#&quot;&gt;Smartphone&lt;/a&gt; &lt;/div&gt; &lt;/div&gt;&lt;/div&gt;","tags":[{"name":"HTML","slug":"HTML","permalink":"http://luoyd.cn/tags/HTML/"},{"name":"CSS","slug":"CSS","permalink":"http://luoyd.cn/tags/CSS/"},{"name":"悦读","slug":"悦读","permalink":"http://luoyd.cn/tags/悦读/"},{"name":"前端组件库","slug":"前端组件库","permalink":"http://luoyd.cn/tags/前端组件库/"}]}]