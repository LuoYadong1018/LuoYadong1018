<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Never Give Up</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://luoyd.cn/"/>
  <updated>2020-01-16T08:15:31.882Z</updated>
  <id>http://luoyd.cn/</id>
  
  <author>
    <name>罗亚东</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>前端代码规范</title>
    <link href="http://luoyd.cn/2020/01/16/%E5%89%8D%E7%AB%AF%E4%BB%A3%E7%A0%81%E8%A7%84%E8%8C%83/"/>
    <id>http://luoyd.cn/2020/01/16/前端代码规范/</id>
    <published>2020-01-16T02:18:00.000Z</published>
    <updated>2020-01-16T08:15:31.882Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前端-JS-项目开发规范"><a href="#前端-JS-项目开发规范" class="headerlink" title="前端 JS 项目开发规范"></a>前端 JS 项目开发规范</h1><p>规范的目的是为了编写高质量的代码，让你的团队成员每天得心情都是愉悦的，大家在一起是快乐的。</p><p>引自《阿里规约》的开头片段：</p><p><em>—-现代软件架构的复杂性需要协同开发完成，如何高效地协同呢？无规矩不成方圆，无规范难以协同，比如，制订交通法规表面上是要限制行车权，实际上是保障公众的人身安全，试想如果没有限速，没有红绿灯，谁还敢上路行驶。对软件来说，适当的规范和标准绝不是消灭代码内容的创造性、优雅性，而是限制过度个性化，以一种普遍认可的统一方式一起做事，提升协作效率，降低沟通成本。代码的字里行间流淌的是软件系统的血液，质量的提升是尽可能少踩坑，杜绝踩重复的坑，切实提升系统稳定性，码出质量。</em></p><h1 id="一、编程规约"><a href="#一、编程规约" class="headerlink" title="一、编程规约"></a>一、编程规约</h1><h3 id="一-命名规范"><a href="#一-命名规范" class="headerlink" title="(一)命名规范"></a>(一)命名规范</h3><h4 id="1-1-1-项目命名"><a href="#1-1-1-项目命名" class="headerlink" title="1.1.1 项目命名"></a>1.1.1 项目命名</h4><p>全部采用小写方式， 以中划线分隔。</p><p>正例：<code>mall-management-system</code></p><p>反例：<code>mall_management-system / mallManagementSystem</code></p><h4 id="1-1-2-目录命名"><a href="#1-1-2-目录命名" class="headerlink" title="1.1.2 目录命名"></a>1.1.2 目录命名</h4><p>全部采用小写方式， 以中划线分隔，有复数结构时，要采用复数命名法， 缩写不用复数</p><p>正例： <code>scripts / styles / components / images / utils / layouts / demo-styles / demo-scripts / img / doc</code></p><p>反例： <code>script / style / demo_scripts / demoStyles / imgs / docs</code></p><p>【特殊】VUE 的项目中的 components 中的组件目录，使用 kebab-case 命名</p><p>正例： <code>head-search / page-loading / authorized / notice-icon</code></p><p>反例： <code>HeadSearch / PageLoading</code></p><p>【特殊】VUE 的项目中的除 components 组件目录外的所有目录也使用 kebab-case 命名<br>正例： <code>page-one / shopping-car / user-management</code></p><p>反例： <code>ShoppingCar / UserManagement</code></p><h4 id="1-1-3-JS、CSS、SCSS、HTML、PNG-文件命名"><a href="#1-1-3-JS、CSS、SCSS、HTML、PNG-文件命名" class="headerlink" title="1.1.3 JS、CSS、SCSS、HTML、PNG 文件命名"></a>1.1.3 JS、CSS、SCSS、HTML、PNG 文件命名</h4><p>全部采用小写方式， 以中划线分隔</p><p>正例： <code>render-dom.js / signup.css / index.html / company-logo.png</code></p><p>反例： <code>renderDom.js / UserManagement.html</code></p><h4 id="1-1-4-命名严谨性"><a href="#1-1-4-命名严谨性" class="headerlink" title="1.1.4 命名严谨性"></a>1.1.4 命名严谨性</h4><p>代码中的命名严禁使用拼音与英文混合的方式，更不允许直接使用中文的方式。 说明：正确的英文拼写和语法可以让阅读者易于理解，避免歧义。注意，即使纯拼音命名方式也要避免采用</p><p>正例：<code>henan / luoyang / rmb 等国际通用的名称，可视同英文。</code></p><p>反例：<code>DaZhePromotion [打折] / getPingfenByName() [评分] / int 某变量 = 3</code></p><p><strong>杜绝完全不规范的缩写，避免望文不知义：</strong></p><p>反例：AbstractClass“缩写”命名成 AbsClass；condition“缩写”命名成 condi，此类随意缩写严重降低了代码的可阅读性。</p><h3 id="二-HTML-规范-（Vue-Template-同样适用）"><a href="#二-HTML-规范-（Vue-Template-同样适用）" class="headerlink" title="(二)HTML 规范 （Vue Template 同样适用）"></a>(二)HTML 规范 （Vue Template 同样适用）</h3><h4 id="1-2-1-HTML-类型"><a href="#1-2-1-HTML-类型" class="headerlink" title="1.2.1 HTML 类型"></a>1.2.1 HTML 类型</h4><p>推荐使用 HTML5 的文档类型申明： <!DOCTYPE html>.<br>（建议使用 text/html 格式的 HTML。避免使用 XHTML。XHTML 以及它的属性，比如 application/xhtml+xml 在浏览器中的应用支持与优化空间都十分有限）。</p><ul><li>规定字符编码</li><li>IE 兼容模式</li><li>规定字符编码</li><li>doctype 大写</li></ul><p>正例：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"IE=Edge"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Page title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"images/company-logo.png"</span> <span class="attr">alt</span>=<span class="string">"Company"</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="1-2-2-缩进"><a href="#1-2-2-缩进" class="headerlink" title="1.2.2 缩进"></a>1.2.2 缩进</h4><p>缩进使用 2 个空格（一个 tab）</p><p>嵌套的节点应该缩进。</p><h4 id="1-2-3-分块注释"><a href="#1-2-3-分块注释" class="headerlink" title="1.2.3 分块注释"></a>1.2.3 分块注释</h4><p>在每一个块状元素，列表元素和表格元素后，加上一对 HTML 注释。注释格式</p><p>&lt;!– 英文 中文 start &gt;</p><p>&lt;!– 英文 中文 end &gt;<br>正例：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- header 头部 start --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">header</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"container"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 图片会把a标签给撑开，所以不用设置a标签的大小 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"images/header.jpg"</span> /&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">header</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- header 头部 end --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="1-2-4-语义化标签"><a href="#1-2-4-语义化标签" class="headerlink" title="1.2.4 语义化标签"></a>1.2.4 语义化标签</h3><p>HTML5 中新增很多语义化标签，所以优先使用语义化标签，避免一个页面都是 div 或者 p 标签</p><p>正例</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">header</span>&gt;</span><span class="tag">&lt;/<span class="name">header</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">footer</span>&gt;</span><span class="tag">&lt;/<span class="name">footer</span>&gt;</span></span><br></pre></td></tr></table></figure><p>反例</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="1-2-5-引号"><a href="#1-2-5-引号" class="headerlink" title="1.2.5 引号"></a>1.2.5 引号</h4><p>使用双引号(“ “) 而不是单引号(‘ ‘) 。</p><p>正例： <code>&lt;div class=&quot;news-div&quot;&gt;&lt;/div&gt;</code></p><p>反例： <code>&lt;div class=&#39;news-div&#39;&gt;&lt;/div&gt;</code></p><h3 id="三-CSS-规范"><a href="#三-CSS-规范" class="headerlink" title="(三) CSS 规范"></a>(三) CSS 规范</h3><h4 id="1-3-1-命名"><a href="#1-3-1-命名" class="headerlink" title="1.3.1 命名"></a>1.3.1 命名</h4><ul><li>类名使用小写字母，以中划线分隔</li><li>id 采用驼峰式命名</li><li>scss 中的变量、函数、混合、placeholder 采用驼峰式命名</li></ul><p>ID 和 class 的名称总是使用可以反应元素目的和用途的名称，或其他通用的名称，代替表象和晦涩难懂的名称</p><p>不推荐：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.fw-800</span> &#123;</span><br><span class="line">  <span class="attribute">font-weight</span>: <span class="number">800</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.red</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: red;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>推荐:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">.heavy &#123;</span><br><span class="line">  font-weight: 800;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.important &#123;</span><br><span class="line">  color: red;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="1-3-2-选择器"><a href="#1-3-2-选择器" class="headerlink" title="1.3.2 选择器"></a>1.3.2 选择器</h4><p>1)css 选择器中避免使用标签名<br>从结构、表现、行为分离的原则来看，应该尽量避免 css 中出现 HTML 标签，并且在 css 选择器中出现标签名会存在潜在的问题。</p><p>2)很多前端开发人员写选择器链的时候不使用 直接子选择器（注：直接子选择器和后代选择器的区别）。有时，这可能会导致疼痛的设计问题并且有时候可能会很耗性能。然而，在任何情况下，这是一个非常不好的做法。如果你不写很通用的，需要匹配到 DOM 末端的选择器， 你应该总是考虑直接子选择器。</p><p>不推荐:</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.content</span> <span class="selector-class">.title</span> &#123;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">2rem</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>推荐:</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.content</span> &gt; <span class="selector-class">.title</span> &#123;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">2rem</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="1-3-3-尽量使用缩写属性"><a href="#1-3-3-尽量使用缩写属性" class="headerlink" title="1.3.3 尽量使用缩写属性"></a>1.3.3 尽量使用缩写属性</h4><p>不推荐：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">border-top-style</span>: <span class="selector-tag">none</span>;</span><br><span class="line"><span class="selector-tag">font-family</span>: <span class="selector-tag">palatino</span>, <span class="selector-tag">georgia</span>, <span class="selector-tag">serif</span>;</span><br><span class="line"><span class="selector-tag">font-size</span>: 100%;</span><br><span class="line"><span class="selector-tag">line-height</span>: 1<span class="selector-class">.6</span>;</span><br><span class="line"><span class="selector-tag">padding-bottom</span>: 2<span class="selector-tag">em</span>;</span><br><span class="line"><span class="selector-tag">padding-left</span>: 1<span class="selector-tag">em</span>;</span><br><span class="line"><span class="selector-tag">padding-right</span>: 1<span class="selector-tag">em</span>;</span><br><span class="line"><span class="selector-tag">padding-top</span>: 0;</span><br></pre></td></tr></table></figure><p>推荐：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">border-top</span>: 0;</span><br><span class="line">font: 100%/1.6 palatino, georgia, serif;</span><br><span class="line"><span class="selector-tag">padding</span>: 0 1<span class="selector-tag">em</span> 2<span class="selector-tag">em</span>;</span><br></pre></td></tr></table></figure><h4 id="1-3-4-每个选择器及属性独占一行"><a href="#1-3-4-每个选择器及属性独占一行" class="headerlink" title="1.3.4 每个选择器及属性独占一行"></a>1.3.4 每个选择器及属性独占一行</h4><p>不推荐：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">button&#123;</span><br><span class="line">  width:100px;height:50px;color:#fff;background:#00a0e9;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>推荐：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">button&#123;</span><br><span class="line">  width:100px;</span><br><span class="line">  height:50px;</span><br><span class="line">  color:#fff;</span><br><span class="line">  background:#00a0e9;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="1-3-5-省略0后面的单位"><a href="#1-3-5-省略0后面的单位" class="headerlink" title="1.3.5 省略0后面的单位"></a>1.3.5 省略0后面的单位</h4><p>不推荐：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">div&#123;</span><br><span class="line">  padding-bottom: 0px;</span><br><span class="line">  margin: 0em;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>推荐：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">div&#123;</span><br><span class="line">  padding-bottom: 0;</span><br><span class="line">  margin: 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="1-3-6-避免使用ID选择器及全局标签选择器防止污染全局样式"><a href="#1-3-6-避免使用ID选择器及全局标签选择器防止污染全局样式" class="headerlink" title="1.3.6 避免使用ID选择器及全局标签选择器防止污染全局样式"></a>1.3.6 避免使用ID选择器及全局标签选择器防止污染全局样式</h4><p>不推荐：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-id">#header</span>&#123;</span><br><span class="line">  <span class="attribute">padding-bottom</span>: <span class="number">0px</span>;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">0em</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>推荐：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">.header&#123;</span><br><span class="line">  padding-bottom: 0px;</span><br><span class="line">  margin: 0em;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="四-LESS-规范"><a href="#四-LESS-规范" class="headerlink" title="(四) LESS 规范"></a>(四) LESS 规范</h3><h4 id="1-4-1-代码组织"><a href="#1-4-1-代码组织" class="headerlink" title="1.4.1 代码组织"></a>1.4.1 代码组织</h4><h5 id="1-将公共less文件放置在style-less-common文件夹"><a href="#1-将公共less文件放置在style-less-common文件夹" class="headerlink" title="1)将公共less文件放置在style/less/common文件夹"></a>1)将公共less文件放置在style/less/common文件夹</h5><p>例:// color.less,common.less</p><h5 id="2-按以下顺序组织"><a href="#2-按以下顺序组织" class="headerlink" title="2)按以下顺序组织"></a>2)按以下顺序组织</h5><p>1、@import;<br>2、变量声明;<br>3、样式声明;</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">@import &quot;mixins/size.less&quot;;</span><br><span class="line"></span><br><span class="line">@default-text-color: #333;</span><br><span class="line"></span><br><span class="line">.page &#123;</span><br><span class="line">  width: 960px;</span><br><span class="line">  margin: 0 auto;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="1-4-2-避免嵌套层级过多"><a href="#1-4-2-避免嵌套层级过多" class="headerlink" title="1.4.2 避免嵌套层级过多"></a>1.4.2 避免嵌套层级过多</h4><p> 将嵌套深度限制在3级。对于超过4级的嵌套，给予重新评估。这可以避免出现过于详实的CSS选择器。<br>避免大量的嵌套规则。当可读性受到影响时，将之打断。推荐避免出现多于20行的嵌套规则出现</p><p>不推荐：</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.main</span>&#123;</span><br><span class="line">  <span class="selector-class">.title</span>&#123;</span><br><span class="line">    <span class="selector-class">.name</span>&#123;</span><br><span class="line">       <span class="attribute">color</span>:<span class="number">#fff</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>推荐：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">.main-title&#123;</span><br><span class="line">   .name&#123;</span><br><span class="line">      color:#fff</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="五-Javascript-规范"><a href="#五-Javascript-规范" class="headerlink" title="(五) Javascript 规范"></a>(五) Javascript 规范</h3><h4 id="1-5-1-命名"><a href="#1-5-1-命名" class="headerlink" title="1.5.1 命名"></a>1.5.1 命名</h4><h5 id="1-采用小写驼峰命名-lowerCamelCase，代码中的命名均不能以下划线，也不能以下划线或美元符号结束"><a href="#1-采用小写驼峰命名-lowerCamelCase，代码中的命名均不能以下划线，也不能以下划线或美元符号结束" class="headerlink" title="1) 采用小写驼峰命名 lowerCamelCase，代码中的命名均不能以下划线，也不能以下划线或美元符号结束"></a>1) 采用小写驼峰命名 lowerCamelCase，代码中的命名均不能以下划线，也不能以下划线或美元符号结束</h5><p>反例： <code>_name / name_ / name$</code></p><h5 id="2-方法名、参数名、成员变量、局部变量都统一使用-lowerCamelCase-风格，必须遵从驼峰形式。"><a href="#2-方法名、参数名、成员变量、局部变量都统一使用-lowerCamelCase-风格，必须遵从驼峰形式。" class="headerlink" title="2) 方法名、参数名、成员变量、局部变量都统一使用 lowerCamelCase 风格，必须遵从驼峰形式。"></a>2) 方法名、参数名、成员变量、局部变量都统一使用 lowerCamelCase 风格，必须遵从驼峰形式。</h5><p>正例： <code>localValue / getHttpMessage() / inputUserId</code></p><p>*<strong>*其中 method 方法命名必须是 动词 或者 动词+名词 形式**</strong></p><p>正例：<code>saveShopCarData /openShopCarInfoDialog</code></p><p>反例：<code>save / open / show / go</code></p><p>*<strong>*特此说明，增删查改，详情统一使用如下 5 个单词，不得使用其他（目的是为了统一各个端）**</strong></p><p><code>add / update / delete / detail / get</code></p><p><strong>附： 函数方法常用的动词:</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">get</span> 获取/<span class="keyword">set</span> 设置,</span><br><span class="line">add 增加/remove 删除</span><br><span class="line">create 创建/destory 移除</span><br><span class="line">start 启动/stop 停止</span><br><span class="line">open 打开/close 关闭,</span><br><span class="line">read 读取/write 写入</span><br><span class="line">load 载入/save 保存,</span><br><span class="line">create 创建/destroy 销毁</span><br><span class="line">begin 开始/end 结束,</span><br><span class="line">backup 备份/restore 恢复</span><br><span class="line">import 导入/export 导出,</span><br><span class="line">split 分割/merge 合并</span><br><span class="line">inject 注入/extract 提取,</span><br><span class="line">attach 附着/detach 脱离</span><br><span class="line">bind 绑定/separate 分离,</span><br><span class="line">view 查看/browse 浏览</span><br><span class="line">edit 编辑/modify 修改,</span><br><span class="line">select 选取/mark 标记</span><br><span class="line">copy 复制/paste 粘贴,</span><br><span class="line">undo 撤销/redo 重做</span><br><span class="line">insert 插入/delete 移除,</span><br><span class="line">add 加入/append 添加</span><br><span class="line">clean 清理/clear 清除,</span><br><span class="line">index 索引/sort 排序</span><br><span class="line">find 查找/search 搜索,</span><br><span class="line">increase 增加/decrease 减少</span><br><span class="line">play 播放/pause 暂停,</span><br><span class="line">launch 启动/run 运行</span><br><span class="line">compile 编译/execute 执行,</span><br><span class="line">debug 调试/trace 跟踪</span><br><span class="line">observe 观察/listen 监听,</span><br><span class="line">build 构建/publish 发布</span><br><span class="line">input 输入/output 输出,</span><br><span class="line">encode 编码/decode 解码</span><br><span class="line">encrypt 加密/decrypt 解密,</span><br><span class="line">compress 压缩/decompress 解压缩</span><br><span class="line">pack 打包/unpack 解包,</span><br><span class="line">parse 解析/emit 生成</span><br><span class="line">connect 连接/disconnect 断开,</span><br><span class="line">send 发送/receive 接收</span><br><span class="line">download 下载/upload 上传,</span><br><span class="line">refresh 刷新/synchronize 同步</span><br><span class="line">update 更新/revert 复原,</span><br><span class="line">lock 锁定/unlock 解锁</span><br><span class="line">check out 签出/check in 签入,</span><br><span class="line">submit 提交/commit 交付</span><br><span class="line">push 推/pull 拉,</span><br><span class="line">expand 展开/collapse 折叠</span><br><span class="line">begin 起始/end 结束,</span><br><span class="line">start 开始/finish 完成</span><br><span class="line">enter 进入/exit 退出,</span><br><span class="line">abort 放弃/quit 离开</span><br><span class="line">obsolete 废弃/depreciate 废旧,</span><br><span class="line">collect 收集/aggregate 聚集</span><br></pre></td></tr></table></figure><h5 id="3-常量命名全部大写，单词间用下划线隔开，力求语义表达完整清楚，不要嫌名字长。"><a href="#3-常量命名全部大写，单词间用下划线隔开，力求语义表达完整清楚，不要嫌名字长。" class="headerlink" title="3) 常量命名全部大写，单词间用下划线隔开，力求语义表达完整清楚，不要嫌名字长。"></a>3) 常量命名全部大写，单词间用下划线隔开，力求语义表达完整清楚，不要嫌名字长。</h5><p>正例： <code>MAX_STOCK_COUNT</code></p><p>反例： <code>MAX_COUNT</code></p><h4 id="1-5-2-代码格式"><a href="#1-5-2-代码格式" class="headerlink" title="1.5.2 代码格式"></a>1.5.2 代码格式</h4><h5 id="1-使用-2-个空格进行缩进"><a href="#1-使用-2-个空格进行缩进" class="headerlink" title="1) 使用 2 个空格进行缩进"></a>1) 使用 2 个空格进行缩进</h5><p>正例：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (x &lt; y) &#123;</span><br><span class="line">  x += <span class="number">10</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">  x += <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="2-不同逻辑、不同语义、不同业务的代码之间插入一个空行分隔开来以提升可读性。"><a href="#2-不同逻辑、不同语义、不同业务的代码之间插入一个空行分隔开来以提升可读性。" class="headerlink" title="2) 不同逻辑、不同语义、不同业务的代码之间插入一个空行分隔开来以提升可读性。"></a>2) 不同逻辑、不同语义、不同业务的代码之间插入一个空行分隔开来以提升可读性。</h5><blockquote><p>说明：任何情形，没有必要插入多个空行进行隔开。</p></blockquote><h4 id="1-5-3-字符串"><a href="#1-5-3-字符串" class="headerlink" title="1.5.3 字符串"></a>1.5.3 字符串</h4><p>统一使用单引号(‘)，不使用双引号(“)。这在创建 HTML 字符串非常有好处：</p><p>正例:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> str = <span class="string">'foo'</span>;</span><br><span class="line"><span class="keyword">let</span> testDiv = <span class="string">'&lt;div id="test"&gt;&lt;/div&gt;'</span>;</span><br></pre></td></tr></table></figure><p>反例:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> str = <span class="string">'foo'</span>;</span><br><span class="line"><span class="keyword">let</span> testDiv = <span class="string">"&lt;div id='test'&gt;&lt;/div&gt;"</span>;</span><br></pre></td></tr></table></figure><h4 id="1-5-4-对象声明"><a href="#1-5-4-对象声明" class="headerlink" title="1.5.4 对象声明"></a>1.5.4 对象声明</h4><h5 id="1-使用字面值创建对象"><a href="#1-使用字面值创建对象" class="headerlink" title="1)使用字面值创建对象"></a>1)使用字面值创建对象</h5><p>正例： <code>let user = {};</code></p><p>反例： <code>let user = new Object();</code></p><h5 id="2-使用字面量来代替对象构造器"><a href="#2-使用字面量来代替对象构造器" class="headerlink" title="2) 使用字面量来代替对象构造器"></a>2) 使用字面量来代替对象构造器</h5><p>正例：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> user = &#123;</span><br><span class="line">  age: <span class="number">0</span>,</span><br><span class="line">  name: <span class="number">1</span>,</span><br><span class="line">  city: <span class="number">3</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>反例：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> user = <span class="keyword">new</span> <span class="built_in">Object</span>();</span><br><span class="line">user.age = <span class="number">0</span>;</span><br><span class="line">user.name = <span class="number">0</span>;</span><br><span class="line">user.city = <span class="number">0</span>;</span><br></pre></td></tr></table></figure><h4 id="1-5-5-使用-ES6-7"><a href="#1-5-5-使用-ES6-7" class="headerlink" title="1.5.5 使用 ES6,7"></a>1.5.5 使用 ES6,7</h4><p>必须优先使用 ES6,7 中新增的语法糖和函数。这将简化你的程序，并让你的代码更加灵活和可复用。</p><blockquote><p>必须强制使用 ES6, ES7 的新语法，比如箭头函数、await/async ， 解构， let ， for…of 等等</p></blockquote><h4 id="1-5-6-括号"><a href="#1-5-6-括号" class="headerlink" title="1.5.6 括号"></a>1.5.6 括号</h4><p>下列关键字后必须有大括号（即使代码块的内容只有一行）：if, else, for, while, do, switch, try, catch, finally, with。</p><p>正例：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (condition) &#123;</span><br><span class="line">  doSomething();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>反例：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (condition) doSomething();</span><br></pre></td></tr></table></figure><h4 id="1-5-7-undefined-判断"><a href="#1-5-7-undefined-判断" class="headerlink" title="1.5.7 undefined 判断"></a>1.5.7 undefined 判断</h4><p>永远不要直接使用 undefined 进行变量判断；使用 typeof 和字符串’undefined’对变量进行判断。</p><p>正例：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (<span class="keyword">typeof</span> person === <span class="string">'undefined'</span>) &#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>反例：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (person === <span class="literal">undefined</span>) &#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="1-5-8-条件判断和循环最多三层"><a href="#1-5-8-条件判断和循环最多三层" class="headerlink" title="1.5.8 条件判断和循环最多三层"></a>1.5.8 条件判断和循环最多三层</h4><p>条件判断能使用三目运算符和逻辑运算符解决的，就不要使用条件判断，但是谨记不要写太长的三目运算符。如果超过 3 层请抽成函数，并写清楚注释。</p><h4 id="1-5-9-this-的转换命名"><a href="#1-5-9-this-的转换命名" class="headerlink" title="1.5.9 this 的转换命名"></a>1.5.9 this 的转换命名</h4><p>对上下文 this 的引用只能使用’self’来命名</p><h4 id="1-5-10-慎用-console-log"><a href="#1-5-10-慎用-console-log" class="headerlink" title="1.5.10 慎用 console.log"></a>1.5.10 慎用 console.log</h4><p>因 console.log 大量使用会有性能问题，所以在非 webpack 项目中谨慎使用 log 功能</p><h1 id="二、Vue-项目规范"><a href="#二、Vue-项目规范" class="headerlink" title="二、Vue 项目规范"></a>二、Vue 项目规范</h1><h3 id="一-Vue-编码基础"><a href="#一-Vue-编码基础" class="headerlink" title="(一) Vue 编码基础"></a>(一) Vue 编码基础</h3><p>vue 项目规范以 Vue 官方规范 （<a href="https://cn.vuejs.org/v2/style-guide/）" target="_blank" rel="noopener">https://cn.vuejs.org/v2/style-guide/）</a> 中的 A 规范为基础，在其上面进行项目开发，故所有代码均遵守该规范。</p><blockquote><p>请仔仔细细阅读 Vue 官方规范，切记，此为第一步。</p></blockquote><h4 id="2-1-1-组件规范"><a href="#2-1-1-组件规范" class="headerlink" title="2.1.1. 组件规范"></a>2.1.1. 组件规范</h4><h5 id="1-组件名为多个单词。"><a href="#1-组件名为多个单词。" class="headerlink" title="1) 组件名为多个单词。"></a>1) 组件名为多个单词。</h5><p>组件名应该始终是多个单词组成（大于等于 2），且命名规范为<code>KebabCase</code>格式。<br>这样做可以避免跟现有的以及未来的 HTML 元素相冲突，因为所有的 HTML 元素名称都是单个单词的。</p><p>正例：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  name: <span class="string">'TodoItem'</span></span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>反例：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  name: <span class="string">'Todo'</span>,</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  name: <span class="string">'todo-item'</span>,</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="2-组件文件名为-pascal-case-格式"><a href="#2-组件文件名为-pascal-case-格式" class="headerlink" title="2) 组件文件名为 pascal-case 格式"></a>2) 组件文件名为 pascal-case 格式</h5><p>正例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">components/</span><br><span class="line">|- my-component.vue</span><br></pre></td></tr></table></figure><p>反例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">components/</span><br><span class="line">|- myComponent.vue</span><br><span class="line">|- MyComponent.vue</span><br></pre></td></tr></table></figure><h5 id="3-基础组件文件名为-base-开头，使用完整单词而不是缩写。"><a href="#3-基础组件文件名为-base-开头，使用完整单词而不是缩写。" class="headerlink" title="3) 基础组件文件名为 base 开头，使用完整单词而不是缩写。"></a>3) 基础组件文件名为 base 开头，使用完整单词而不是缩写。</h5><p>正例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">components/</span><br><span class="line">|- base-button.vue</span><br><span class="line">|- base-table.vue</span><br><span class="line">|- base-icon.vue</span><br></pre></td></tr></table></figure><p>反例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">components/</span><br><span class="line">|- MyButton.vue</span><br><span class="line">|- VueTable.vue</span><br><span class="line">|- Icon.vue</span><br></pre></td></tr></table></figure><h5 id="4-和父组件紧密耦合的子组件应该以父组件名作为前缀命名"><a href="#4-和父组件紧密耦合的子组件应该以父组件名作为前缀命名" class="headerlink" title="4) 和父组件紧密耦合的子组件应该以父组件名作为前缀命名"></a>4) 和父组件紧密耦合的子组件应该以父组件名作为前缀命名</h5><p>正例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">components/</span><br><span class="line">|- todo-list.vue</span><br><span class="line">|- todo-list-item.vue</span><br><span class="line">|- todo-list-item-button.vue</span><br><span class="line">|- user-profile-options.vue （完整单词）</span><br></pre></td></tr></table></figure><p>反例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">components/</span><br><span class="line">|- TodoList.vue</span><br><span class="line">|- TodoItem.vue</span><br><span class="line">|- TodoButton.vue</span><br><span class="line">|- UProfOpts.vue （使用了缩写）</span><br></pre></td></tr></table></figure><h5 id="5-在-Template-模版中使用组件，应使用-PascalCase-模式，并且使用自闭合组件。"><a href="#5-在-Template-模版中使用组件，应使用-PascalCase-模式，并且使用自闭合组件。" class="headerlink" title="5) 在 Template 模版中使用组件，应使用 PascalCase 模式，并且使用自闭合组件。"></a>5) 在 Template 模版中使用组件，应使用 PascalCase 模式，并且使用自闭合组件。</h5><p>正例：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 在单文件组件、字符串模板和 JSX 中 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">MyComponent</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">Row</span>&gt;</span><span class="tag">&lt;<span class="name">table</span> <span class="attr">:column</span>=<span class="string">"data"</span>/&gt;</span><span class="tag">&lt;/<span class="name">Row</span>&gt;</span></span><br></pre></td></tr></table></figure><p>反例：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">my-component</span> /&gt;</span> <span class="tag">&lt;<span class="name">row</span>&gt;</span><span class="tag">&lt;<span class="name">table</span> <span class="attr">:column</span>=<span class="string">"data"</span>/&gt;</span><span class="tag">&lt;/<span class="name">row</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="6-组件的-data-必须是一个函数"><a href="#6-组件的-data-必须是一个函数" class="headerlink" title="6) 组件的 data 必须是一个函数"></a>6) 组件的 data 必须是一个函数</h5><p>当在组件中使用 data 属性的时候 (除了 new Vue 外的任何地方)，它的值必须是返回一个对象的函数。 因为如果直接是一个对象的话，子组件之间的属性值会互相影响。</p><p>正例：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  data () &#123;</span><br><span class="line">​    <span class="keyword">return</span> &#123;</span><br><span class="line">​      name: <span class="string">'jack'</span></span><br><span class="line">​    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>反例：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  data: &#123;</span><br><span class="line">​    name: <span class="string">'jack'</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="7-Prop-定义应该尽量详细"><a href="#7-Prop-定义应该尽量详细" class="headerlink" title="7) Prop 定义应该尽量详细"></a>7) Prop 定义应该尽量详细</h5><ul><li>必须使用 camelCase 驼峰命名</li><li>必须指定类型</li><li>必须加上注释，表明其含义</li><li>必须加上 required 或者 default，两者二选其一</li><li>如果有业务需要，必须加上 validator 验证</li></ul><p>正例：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"> props: &#123;</span><br><span class="line">  <span class="comment">// 组件状态，用于控制组件的颜色</span></span><br><span class="line">   status: &#123;</span><br><span class="line"> ​    type: <span class="built_in">String</span>,</span><br><span class="line">     required: <span class="literal">true</span>,</span><br><span class="line"> ​    validator: <span class="function"><span class="keyword">function</span> (<span class="params">value</span>) </span>&#123;</span><br><span class="line"> ​      <span class="keyword">return</span> [</span><br><span class="line"> ​        <span class="string">'succ'</span>,</span><br><span class="line"> ​        <span class="string">'info'</span>,</span><br><span class="line"> ​        <span class="string">'error'</span></span><br><span class="line"> ​      ].indexOf(value) !== <span class="number">-1</span></span><br><span class="line"> ​    &#125;</span><br><span class="line">   &#125;,</span><br><span class="line">    <span class="comment">// 用户级别，用于显示皇冠个数</span></span><br><span class="line">   userLevel：&#123;</span><br><span class="line">      type: <span class="built_in">String</span>,</span><br><span class="line">      required: <span class="literal">true</span></span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="8-为组件样式设置作用域"><a href="#8-为组件样式设置作用域" class="headerlink" title="8) 为组件样式设置作用域"></a>8) 为组件样式设置作用域</h5><p>正例：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">"btn btn-close"</span>&gt;</span>X<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 使用 `scoped` 特性 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scoped</span>&gt;</span></span><br><span class="line"><span class="css">  <span class="selector-class">.btn-close</span> &#123;</span></span><br><span class="line">    background-color: red;</span><br><span class="line">  &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><p>反例：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">"btn btn-close"</span>&gt;</span>X<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 没有使用 `scoped` 特性 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css">  <span class="selector-class">.btn-close</span> &#123;</span></span><br><span class="line">    background-color: red;</span><br><span class="line">  &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="9-如果特性元素较多，应该主动换行。"><a href="#9-如果特性元素较多，应该主动换行。" class="headerlink" title="9) 如果特性元素较多，应该主动换行。"></a>9) 如果特性元素较多，应该主动换行。</h5><p>正例：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">MyComponent</span> <span class="attr">foo</span>=<span class="string">"a"</span> <span class="attr">bar</span>=<span class="string">"b"</span> <span class="attr">baz</span>=<span class="string">"c"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">foo</span>=<span class="string">"a"</span> <span class="attr">bar</span>=<span class="string">"b"</span> <span class="attr">baz</span>=<span class="string">"c"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">foo</span>=<span class="string">"a"</span> <span class="attr">bar</span>=<span class="string">"b"</span> <span class="attr">baz</span>=<span class="string">"c"</span></span></span><br><span class="line"><span class="tag"> /&gt;</span></span><br></pre></td></tr></table></figure><p>反例：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">MyComponent</span> <span class="attr">foo</span>=<span class="string">"a"</span> <span class="attr">bar</span>=<span class="string">"b"</span> <span class="attr">baz</span>=<span class="string">"c"</span> <span class="attr">foo</span>=<span class="string">"a"</span> <span class="attr">bar</span>=<span class="string">"b"</span> <span class="attr">baz</span>=<span class="string">"c"</span> <span class="attr">foo</span>=<span class="string">"a"</span> <span class="attr">bar</span>=<span class="string">"b"</span> <span class="attr">baz</span>=<span class="string">"c"</span> <span class="attr">foo</span>=<span class="string">"a"</span> <span class="attr">bar</span>=<span class="string">"b"</span> <span class="attr">baz</span>=<span class="string">"c"</span>/&gt;</span></span><br></pre></td></tr></table></figure><h4 id="2-1-2-模板中使用简单的表达式"><a href="#2-1-2-模板中使用简单的表达式" class="headerlink" title="2.1.2. 模板中使用简单的表达式"></a>2.1.2. 模板中使用简单的表达式</h4><p>组件模板应该只包含简单的表达式，复杂的表达式则应该重构为计算属性或方法。复杂表达式会让你的模板变得不那么声明式。我们应该尽量描述应该出现的是什么，而非如何计算那个值。而且计算属性和方法使得代码可以重用。</p><p>正例：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;p&gt;&#123;&#123; normalizedFullName &#125;&#125;&lt;<span class="regexp">/p&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>template&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 复杂表达式已经移入一个计算属性</span></span><br><span class="line">computed: &#123;</span><br><span class="line">  normalizedFullName: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">​    <span class="keyword">return</span> <span class="keyword">this</span>.fullName.split(<span class="string">' '</span>).map(<span class="function"><span class="keyword">function</span> (<span class="params">word</span>) </span>&#123;</span><br><span class="line">​      <span class="keyword">return</span> word[<span class="number">0</span>].toUpperCase() + word.slice(<span class="number">1</span>)</span><br><span class="line">​    &#125;).join(<span class="string">' '</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>反例：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;p&gt;</span><br><span class="line">       &#123;&#123;</span><br><span class="line">          fullName.split(<span class="string">' '</span>).map(<span class="function"><span class="keyword">function</span> (<span class="params">word</span>) </span>&#123;</span><br><span class="line">​             <span class="keyword">return</span> word[<span class="number">0</span>].toUpperCase() + word.slice(<span class="number">1</span>)</span><br><span class="line">           &#125;).join(<span class="string">' '</span>)</span><br><span class="line">        &#125;&#125;</span><br><span class="line">  &lt;<span class="regexp">/p&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>template&gt;</span><br></pre></td></tr></table></figure><h4 id="2-1-3-指令都使用缩写形式"><a href="#2-1-3-指令都使用缩写形式" class="headerlink" title="2.1.3 指令都使用缩写形式"></a>2.1.3 指令都使用缩写形式</h4><p>指令推荐都使用缩写形式，(用 : 表示 v-bind: 、用 @ 表示 v-on: 和用 # 表示 v-slot:)</p><p>正例：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;input</span><br><span class="line">  @input=<span class="string">"onInput"</span></span><br><span class="line">  @focus=<span class="string">"onFocus"</span></span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure><p>反例：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;input</span><br><span class="line">  v-on:input=<span class="string">"onInput"</span></span><br><span class="line">  @focus=<span class="string">"onFocus"</span></span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure><h4 id="2-1-4-标签顺序保持一致"><a href="#2-1-4-标签顺序保持一致" class="headerlink" title="2.1.4 标签顺序保持一致"></a>2.1.4 标签顺序保持一致</h4><p>单文件组件应该总是让标签顺序保持为 <code>&lt;template&gt; 、&lt;script&gt;、 &lt;style&gt;</code></p><p>正例：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;...&lt;/template&gt;</span><br><span class="line">&lt;script&gt;...&lt;/script&gt;</span><br><span class="line">&lt;style&gt;...&lt;/style&gt;</span><br></pre></td></tr></table></figure><p>反例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;...&lt;/template&gt;</span><br><span class="line">&lt;style&gt;...&lt;/style&gt;</span><br><span class="line">&lt;script&gt;...&lt;/script&gt;</span><br></pre></td></tr></table></figure><h4 id="2-1-5-必须为-v-for-设置键值-key"><a href="#2-1-5-必须为-v-for-设置键值-key" class="headerlink" title="2.1.5 必须为 v-for 设置键值 key"></a>2.1.5 必须为 v-for 设置键值 key</h4><h4 id="2-1-6-v-show-与-v-if-选择"><a href="#2-1-6-v-show-与-v-if-选择" class="headerlink" title="2.1.6 v-show 与 v-if 选择"></a>2.1.6 v-show 与 v-if 选择</h4><p>如果运行时，需要非常频繁地切换，使用 v-show ；如果在运行时，条件很少改变，使用 v-if。</p><h4 id="2-1-7-script-标签内部结构顺序"><a href="#2-1-7-script-标签内部结构顺序" class="headerlink" title="2.1.7 script 标签内部结构顺序"></a>2.1.7 script 标签内部结构顺序</h4><p>components &gt; props &gt; data &gt; computed &gt; watch &gt; filter &gt; 钩子函数（钩子函数按其执行顺序） &gt; methods</p><h4 id="2-1-8-Vue-Router-规范"><a href="#2-1-8-Vue-Router-规范" class="headerlink" title="2.1.8 Vue Router 规范"></a>2.1.8 Vue Router 规范</h4><h5 id="1-页面跳转数据传递使用路由参数"><a href="#1-页面跳转数据传递使用路由参数" class="headerlink" title="1) 页面跳转数据传递使用路由参数"></a>1) 页面跳转数据传递使用路由参数</h5><p>页面跳转，例如 A 页面跳转到 B 页面，需要将 A 页面的数据传递到 B 页面，推荐使用 路由参数进行传参，而不是将需要传递的数据保存 vuex，然后在 B 页面取出 vuex 的数据，因为如果在 B 页面刷新会导致 vuex 数据丢失，导致 B 页面无法正常显示数据。</p><p>正例：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> id = <span class="string">' 123'</span>;</span><br><span class="line"><span class="keyword">this</span>.$router.push(&#123; <span class="attr">name</span>: <span class="string">'userCenter'</span>, <span class="attr">query</span>: &#123; <span class="attr">id</span>: id &#125; &#125;);</span><br></pre></td></tr></table></figure><h5 id="2-使用路由懒加载（延迟加载）机制"><a href="#2-使用路由懒加载（延迟加载）机制" class="headerlink" title="2) 使用路由懒加载（延迟加载）机制"></a>2) 使用路由懒加载（延迟加载）机制</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    path: <span class="string">'/uploadAttachment'</span>,</span><br><span class="line">    name: <span class="string">'uploadAttachment'</span>,</span><br><span class="line">    meta: &#123;</span><br><span class="line">      title: <span class="string">'上传附件'</span></span><br><span class="line">    &#125;,</span><br><span class="line">    component: <span class="function"><span class="params">()</span> =&gt;</span> <span class="keyword">import</span>(<span class="string">'@/view/components/uploadAttachment/index.vue'</span>)</span><br><span class="line">  &#125;,</span><br></pre></td></tr></table></figure><h5 id="3-router-中的命名规范"><a href="#3-router-中的命名规范" class="headerlink" title="3) router 中的命名规范"></a>3) router 中的命名规范</h5><p>path、childrenPoints 命名规范采用<code>kebab-case</code>命名规范（尽量vue文件的目录结构保持一致，因为目录、文件名都是<code>kebab-case</code>，这样很方便找到对应的文件）</p><p>name 命名规范采用<code>KebabCase</code>命名规范且和component组件名保持一致！（因为要保持keep-alive特性，keep-alive按照component的name进行缓存，所以两者必须高度保持一致）</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 动态加载</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> reload = [</span><br><span class="line">  &#123;</span><br><span class="line">    path: <span class="string">'/reload'</span>,</span><br><span class="line">    name: <span class="string">'reload'</span>,</span><br><span class="line">    component: Main,</span><br><span class="line">    meta: &#123;</span><br><span class="line">      title: <span class="string">'动态加载'</span>,</span><br><span class="line">      icon: <span class="string">'icon iconfont'</span></span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    children: [</span><br><span class="line">      &#123;</span><br><span class="line">        path: <span class="string">'/reload/smart-reload-list'</span>,</span><br><span class="line">        name: <span class="string">'SmartReloadList'</span>,</span><br><span class="line">        meta: &#123;</span><br><span class="line">          title: <span class="string">'SmartReload'</span>,</span><br><span class="line">          childrenPoints: [</span><br><span class="line">            &#123;</span><br><span class="line">              title: <span class="string">'查询'</span>,</span><br><span class="line">              name: <span class="string">'smart-reload-search'</span></span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">              title: <span class="string">'执行reload'</span>,</span><br><span class="line">              name: <span class="string">'smart-reload-update'</span></span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">              title: <span class="string">'查看执行结果'</span>,</span><br><span class="line">              name: <span class="string">'smart-reload-result'</span></span><br><span class="line">            &#125;</span><br><span class="line">          ]</span><br><span class="line">        &#125;,</span><br><span class="line">        component: <span class="function"><span class="params">()</span> =&gt;</span></span><br><span class="line">          <span class="keyword">import</span>(<span class="string">'@/views/reload/smart-reload/smart-reload-list.vue'</span>)</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">];</span><br></pre></td></tr></table></figure><h5 id="4-router-中的-path-命名规范"><a href="#4-router-中的-path-命名规范" class="headerlink" title="4) router 中的 path 命名规范"></a>4) router 中的 path 命名规范</h5><p>path除了采用<code>kebab-case</code>命名规范以外，必须以 / 开头，即使是children里的path也要以 / 开头。如下示例</p><p>*<br>目的：</p><p>经常有这样的场景：某个页面有问题，要立刻找到这个vue文件，如果不用以/开头，path为parent和children组成的，可能经常需要在router文件里搜索多次才能找到，而如果以/开头，则能立刻搜索到对应的组件<br>*</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    path: <span class="string">'/file'</span>,</span><br><span class="line">    name: <span class="string">'File'</span>,</span><br><span class="line">    component: Main,</span><br><span class="line">    meta: &#123;</span><br><span class="line">      title: <span class="string">'文件服务'</span>,</span><br><span class="line">      icon: <span class="string">'ios-cloud-upload'</span></span><br><span class="line">    &#125;,</span><br><span class="line">    children: [</span><br><span class="line">      &#123;</span><br><span class="line">        path: <span class="string">'/file/file-list'</span>,</span><br><span class="line">        name: <span class="string">'FileList'</span>,</span><br><span class="line">        component: <span class="function"><span class="params">()</span> =&gt;</span> <span class="keyword">import</span>(<span class="string">'@/views/file/file-list.vue'</span>)</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        path: <span class="string">'/file/file-add'</span>,</span><br><span class="line">        name: <span class="string">'FileAdd'</span>,</span><br><span class="line">        component: <span class="function"><span class="params">()</span> =&gt;</span> <span class="keyword">import</span>(<span class="string">'@/views/file/file-add.vue'</span>)</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        path: <span class="string">'/file/file-update'</span>,</span><br><span class="line">        name: <span class="string">'FileUpdate'</span>,</span><br><span class="line">        component: <span class="function"><span class="params">()</span> =&gt;</span> <span class="keyword">import</span>(<span class="string">'@/views/file/file-update.vue'</span>)</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><h3 id="二-Vue-项目目录规范"><a href="#二-Vue-项目目录规范" class="headerlink" title="(二) Vue 项目目录规范"></a>(二) Vue 项目目录规范</h3><h4 id="2-2-1-基础"><a href="#2-2-1-基础" class="headerlink" title="2.2.1 基础"></a>2.2.1 基础</h4><p>vue 项目中的所有命名一定要与后端命名统一。</p><p>比如权限：后端 privilege, 前端无论 router , store, api 等都必须使用 privielege 单词！</p><h4 id="2-2-2-使用-Vue-cli-脚手架"><a href="#2-2-2-使用-Vue-cli-脚手架" class="headerlink" title="2.2.2 使用 Vue-cli 脚手架"></a>2.2.2 使用 Vue-cli 脚手架</h4><p>使用 vue-cli3 来初始化项目，项目名按照上面的命名规范。</p><h4 id="2-2-3-目录说明"><a href="#2-2-3-目录说明" class="headerlink" title="2.2.3 目录说明"></a>2.2.3 目录说明</h4><p>目录名按照上面的命名规范，其中 components 组件用大写驼峰，其余除 components 组件目录外的所有目录均使用 kebab-case 命名。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">src                               源码目录</span><br><span class="line">|-- api                              所有api接口</span><br><span class="line">|-- assets                           静态资源，images, icons, styles等</span><br><span class="line">|-- components                       公用组件</span><br><span class="line">|-- config                           配置信息</span><br><span class="line">|-- constants                        常量信息，项目所有Enum, 全局常量等</span><br><span class="line">|-- directives                       自定义指令</span><br><span class="line">|-- filters                          过滤器，全局工具</span><br><span class="line">|-- datas                            模拟数据，临时存放</span><br><span class="line">|-- lib                              外部引用的插件存放及修改文件</span><br><span class="line">|-- mock                             模拟接口，临时存放</span><br><span class="line">|-- plugins                          插件，全局使用</span><br><span class="line">|-- router                           路由，统一管理</span><br><span class="line">|-- store                            vuex, 统一管理</span><br><span class="line">|-- themes                           自定义样式主题</span><br><span class="line">|-- views                            视图目录</span><br><span class="line">|   |-- role                             role模块名</span><br><span class="line">|   |-- |-- role-list.vue                    role列表页面</span><br><span class="line">|   |-- |-- role-add.vue                     role新建页面</span><br><span class="line">|   |-- |-- role-update.vue                  role更新页面</span><br><span class="line">|   |-- |-- index.less                      role模块样式</span><br><span class="line">|   |-- |-- components                      role模块通用组件文件夹</span><br><span class="line">|   |-- employee                         employee模块</span><br></pre></td></tr></table></figure><h5 id="1-api-目录"><a href="#1-api-目录" class="headerlink" title="1) api 目录"></a>1) api 目录</h5><ul><li>文件、变量命名要与后端保持一致。</li><li>此目录对应后端 API 接口，按照后端一个 controller 一个 api js 文件。若项目较大时，可以按照业务划分子目录，并与后端保持一致。</li><li>api 中的方法名字要与后端 api url 尽量保持语义高度一致性。</li><li>对于 api 中的每个方法要添加注释，注释与后端 swagger 文档保持一致。</li></ul><p>正例：</p><p>后端 url： EmployeeController.java</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">/employee/add</span><br><span class="line">/employee/<span class="keyword">delete</span>/&#123;id&#125;</span><br><span class="line">/employee/update</span><br></pre></td></tr></table></figure><p>前端： employee.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 添加员工</span></span><br><span class="line">addEmployee: <span class="function">(<span class="params">data</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> postAxios(<span class="string">'/employee/add'</span>, data)</span><br><span class="line">&#125;,</span><br><span class="line"><span class="comment">// 更新员工信息</span></span><br><span class="line">updateEmployee: <span class="function">(<span class="params">data</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> postAxios(<span class="string">'/employee/update'</span>, data)</span><br><span class="line">&#125;,</span><br><span class="line">  <span class="comment">// 删除员工</span></span><br><span class="line">deleteEmployee: <span class="function">(<span class="params">employeeId</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> postAxios(<span class="string">'/employee/delete/'</span> + employeeId)</span><br><span class="line"> &#125;,</span><br></pre></td></tr></table></figure><h5 id="2-assets-目录"><a href="#2-assets-目录" class="headerlink" title="2) assets 目录"></a>2) assets 目录</h5><p>assets 为静态资源，里面存放 images, styles, icons 等静态资源，静态资源命名格式为 kebab-case</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">|assets</span><br><span class="line">|-- icons</span><br><span class="line">|-- images</span><br><span class="line">|   |-- background-color.png</span><br><span class="line">|   |-- upload-header.png</span><br><span class="line">|-- styles</span><br></pre></td></tr></table></figure><h5 id="3-components-目录"><a href="#3-components-目录" class="headerlink" title="3) components 目录"></a>3) components 目录</h5><p>此目录应按照组件进行目录划分，目录命名为 KebabCase，组件命名规则也为 KebabCase</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">|components</span><br><span class="line">|-- error-log</span><br><span class="line">|   |-- index.vue</span><br><span class="line">|   |-- index.less</span><br><span class="line">|-- markdown-editor</span><br><span class="line">|   |-- index.vue</span><br><span class="line">|   |-- index.js</span><br><span class="line">|-- kebab-case</span><br></pre></td></tr></table></figure><h5 id="4-constants-目录"><a href="#4-constants-目录" class="headerlink" title="4) constants 目录"></a>4) constants 目录</h5><p>此目录存放项目所有常量，如果常量在 vue 中使用，请使用 vue-enum 插件(<a href="https://www.npmjs.com/package/vue-enum" target="_blank" rel="noopener">https://www.npmjs.com/package/vue-enum</a>)</p><p>目录结构：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">|constants</span><br><span class="line">|-- index.js</span><br><span class="line">|-- role.js</span><br><span class="line">|-- employee.js</span><br></pre></td></tr></table></figure><p>例子： employee.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> EMPLOYEE_STATUS = &#123;</span><br><span class="line">  NORMAL: &#123;</span><br><span class="line">    value: <span class="number">1</span>,</span><br><span class="line">    desc: <span class="string">'正常'</span></span><br><span class="line">  &#125;,</span><br><span class="line">  DISABLED: &#123;</span><br><span class="line">    value: <span class="number">1</span>,</span><br><span class="line">    desc: <span class="string">'禁用'</span></span><br><span class="line">  &#125;,</span><br><span class="line">  DELETED: &#123;</span><br><span class="line">    value: <span class="number">2</span>,</span><br><span class="line">    desc: <span class="string">'已删除'</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> EMPLOYEE_ACCOUNT_TYPE = &#123;</span><br><span class="line">  QQ: &#123;</span><br><span class="line">    value: <span class="number">1</span>,</span><br><span class="line">    desc: <span class="string">'QQ登录'</span></span><br><span class="line">  &#125;,</span><br><span class="line">  WECHAT: &#123;</span><br><span class="line">    value: <span class="number">2</span>,</span><br><span class="line">    desc: <span class="string">'微信登录'</span></span><br><span class="line">  &#125;,</span><br><span class="line">  DINGDING: &#123;</span><br><span class="line">    value: <span class="number">3</span>,</span><br><span class="line">    desc: <span class="string">'钉钉登录'</span></span><br><span class="line">  &#125;,</span><br><span class="line">  USERNAME: &#123;</span><br><span class="line">    value: <span class="number">4</span>,</span><br><span class="line">    desc: <span class="string">'用户名密码登录'</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  EMPLOYEE_STATUS,</span><br><span class="line">  EMPLOYEE_ACCOUNT_TYPE</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h5 id="5-router-与-store-目录"><a href="#5-router-与-store-目录" class="headerlink" title="5) router 与 store 目录"></a>5) router 与 store 目录</h5><p>这两个目录一定要将业务进行拆分，不能放到一个 js 文件里。</p><p>router 尽量按照 views 中的结构保持一致</p><p>store 按照业务进行拆分不同的 js 文件</p><h5 id="6-views-目录"><a href="#6-views-目录" class="headerlink" title="6) views 目录"></a>6) views 目录</h5><ul><li>命名要与后端、router、api 等保持一致</li><li>components 中组件要使用 PascalCase 规则</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">|-- views                            视图目录</span><br><span class="line">|   |-- role                             role模块名</span><br><span class="line">|   |   |-- role-list.vue                    role列表页面</span><br><span class="line">|   |   |-- role-add.vue                     role新建页面</span><br><span class="line">|   |   |-- role-update.vue                  role更新页面</span><br><span class="line">|   |   |-- index.less                      role模块样式</span><br><span class="line">|   |   |-- components                      role模块通用组件文件夹</span><br><span class="line">|   |   |   |-- role-header.vue                        role头部组件</span><br><span class="line">|   |   |   |-- role-modal.vue                         role弹出框组件</span><br><span class="line">|   |-- employee                         employee模块</span><br><span class="line">|   |-- behavior-log                      行为日志log模块</span><br><span class="line">|   |-- code-generator                    代码生成器模块</span><br></pre></td></tr></table></figure><h4 id="2-2-4-注释说明"><a href="#2-2-4-注释说明" class="headerlink" title="2.2.4 注释说明"></a>2.2.4 注释说明</h4><p>整理必须加注释的地方</p><ul><li>公共组件使用说明</li><li>api 目录的接口 js 文件必须加注释</li><li>store 中的 state, mutation, action 等必须加注释</li><li>vue 文件中的 template 必须加注释，若文件较大添加 start end 注释</li><li>vue 文件的 methods，每个 method 必须添加注释</li><li>vue 文件的 data, 非常见单词要加注释</li></ul><h4 id="2-2-5-其他"><a href="#2-2-5-其他" class="headerlink" title="2.2.5 其他"></a>2.2.5 其他</h4><h5 id="1-尽量不要手动操作-DOM"><a href="#1-尽量不要手动操作-DOM" class="headerlink" title="1) 尽量不要手动操作 DOM"></a>1) 尽量不要手动操作 DOM</h5><p>因使用 vue 框架，所以在项目开发中尽量使用 vue 的数据驱动更新 DOM，尽量（不到万不得已）不要手动操作 DOM，包括：增删改 dom 元素、以及更改样式、添加事件等。</p><h5 id="2-删除无用代码"><a href="#2-删除无用代码" class="headerlink" title="2) 删除无用代码"></a>2) 删除无用代码</h5><p>因使用了 git/svn 等代码版本工具，对于无用代码必须及时删除，例如：一些调试的 console 语句、无用的弃用功能代码。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;前端-JS-项目开发规范&quot;&gt;&lt;a href=&quot;#前端-JS-项目开发规范&quot; class=&quot;headerlink&quot; title=&quot;前端 JS 项目开发规范&quot;&gt;&lt;/a&gt;前端 JS 项目开发规范&lt;/h1&gt;&lt;p&gt;规范的目的是为了编写高质量的代码，让你的团队成员每天得心情都
      
    
    </summary>
    
    
    
      <category term="前端" scheme="http://luoyd.cn/tags/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="规范" scheme="http://luoyd.cn/tags/%E8%A7%84%E8%8C%83/"/>
    
  </entry>
  
  <entry>
    <title>Java开发规范</title>
    <link href="http://luoyd.cn/2020/01/16/%E5%90%8E%E5%8F%B0%E4%BB%A3%E7%A0%81%E8%A7%84%E8%8C%83/"/>
    <id>http://luoyd.cn/2020/01/16/后台代码规范/</id>
    <published>2020-01-16T02:18:00.000Z</published>
    <updated>2020-01-16T08:14:39.041Z</updated>
    
    <content type="html"><![CDATA[<h1 id="JAVA-开发规范"><a href="#JAVA-开发规范" class="headerlink" title="JAVA 开发规范"></a>JAVA 开发规范</h1><blockquote><p><em>v1.0.0 2019/09/06</em></p></blockquote><p>本篇规范基于阿里巴巴、华为的开发手册，添加了我们团队的开发风格规范，补充了一些细节。感谢前人的经验和付出，让我们可以有机会站在巨人的肩膀上眺望星辰大海。</p><p>规范不是为了约束和禁锢大家的创造力，而是为了帮助大家能够在正确的道路上，尽可能的避免踩坑和跑偏。<br>规范可以让我们无论单枪匹马还是与众人同行的时候都能得心应手。<br>规范可以让我们在面对日益变态的需求和做代码接盘侠的时候，更优雅从容。</p><p>规则并不是完美的，通过约束和禁止在特定情况下的特性，可能会对代码实现造成影响。<br>但是我们制定规则的目的：<strong>为了大多数程序员小伙伴可以得到更多的好处</strong>，如果在团队实际运作中认为某个规则无法遵循或有更好的做法，希望大家可以共同改进该规范。</p><h2 id="一、编程规范"><a href="#一、编程规范" class="headerlink" title="一、编程规范"></a>一、编程规范</h2><h3 id="1、好代码的原则"><a href="#1、好代码的原则" class="headerlink" title="1、好代码的原则"></a>1、好代码的原则</h3><p>我们参考 Kent Beck 的简单设计四原则来指导我们的如何写出优秀的代码，如何有效地判断我们的代码是优秀的。</p><ul><li>通过所有测试（Passes its tests）：强调的是外部需求，这是代码实现最重要的</li><li>尽可能消除重复 (Minimizes duplication)：代码的模块架构设计，保证代码的正交性，保证代码更容易修改</li><li>尽可能清晰表达 (Maximizes clarity)：代码的可阅读性，保证代码是容易阅读的</li><li>更少代码元素 (Has fewer elements)：保证代码是简洁的，在简洁和表达力之间，我们更看重表达力</li></ul><p>以上四个原则的重要程度依次降低， 这组定义被称做简单设计原则。</p><h3 id="2、项目命名规范"><a href="#2、项目命名规范" class="headerlink" title="2、项目命名规范"></a>2、项目命名规范</h3><p>全部采用小写方式， 以中划线分隔。</p><p>正例：<code>mall-management-system / order-service-client / user-api</code></p><p>反例：<code>mall_management-system / mallManagementSystem / orderServiceClient</code></p><h3 id="3、TODO-FIXME-规范"><a href="#3、TODO-FIXME-规范" class="headerlink" title="3、TODO/FIXME 规范"></a>3、TODO/FIXME 规范</h3><p><code>TODO/TBD(to be determined)</code> 注释一般用来描述已知待改进、待补充的修改点,并且加上作者名称。<br><code>FIXME</code> 注释一般用来描述已知缺陷，它们都应该有统一风格，方便文本搜索统一处理。如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// TODO &lt;author-name&gt;: 补充XX处理</span></span><br><span class="line"><span class="comment">// FIXME &lt;author-name&gt;: XX缺陷</span></span><br></pre></td></tr></table></figure><h3 id="4、方法参数规范"><a href="#4、方法参数规范" class="headerlink" title="4、方法参数规范"></a>4、方法参数规范</h3><p>无论是 <code>controller，service，manager，dao</code> 亦或是其他的代码，每个方法最多 <code>3</code> 个参数，如果超出 <code>3</code> 个参数的话，要封装成 <code>javabean</code> 对象。  </p><ol><li>方便他人调用，降低出错几率。尤其是当参数是同一种类型，仅仅依靠顺序区分，稍有不慎便是灾难性后果，而且排查起来也极其恶心。  </li><li>保持代码整洁、清晰度。当一个个方法里充斥着一堆堆参数的时候，再坚强的人，也会身心疲惫。</li></ol><p>反例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 使用证书加密数据工具方法</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span> param</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span> password 加密密码</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span> priCert 私钥</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span> pubCert 公钥</span></span><br><span class="line"><span class="comment">* <span class="doctag">@return</span> 返回加密后的字符串</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">signEnvelop</span><span class="params">(JdRequestParam param, String password, String priCert, String pubCert)</span></span>&#123;&#125;</span><br></pre></td></tr></table></figure><h3 id="5、注释规范"><a href="#5、注释规范" class="headerlink" title="5、注释规范"></a>5、注释规范</h3><h4 id="5-1、注释和代码一样重要"><a href="#5-1、注释和代码一样重要" class="headerlink" title="5-1、注释和代码一样重要"></a>5-1、注释和代码一样重要</h4><p>注释是我们披荆斩棘历经磨难翻越需求这座大山时，留下的踪迹和收获的经验教训，这些宝贵的知识除了证明我们曾经存在过，也提醒着后来的人们殷鉴不远、继往开来。</p><p>注释除了说明作用、逻辑之外。还有一个很重要的原因：当业务逻辑过于复杂，代码过于庞大的时候，注释就变成了一道道美化环境、分离与整理逻辑思路的路标。这是很重要的一点，它能有效得帮助我们免于陷入代码与业务逻辑的泥沼之中。</p><p>正例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 开始抽奖方法</span></span><br><span class="line"><span class="comment">* 保存中奖信息、奖励用户积分等</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span> luckDrawDTO</span></span><br><span class="line"><span class="comment">* <span class="doctag">@return</span> ResponseDTO 返回中奖信息</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> ResponseDTO&lt;String&gt; <span class="title">startLuckDraw</span><span class="params">(LuckDrawDTO luckDrawDTO)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// -------------- 1、校验抽奖活动基本信息 ------------------------</span></span><br><span class="line">    xxx伪代码一顿操作</span><br><span class="line"></span><br><span class="line">    <span class="comment">// -------------- 2、新增抽奖记录 -------------------------------</span></span><br><span class="line">    xxx伪代码一顿操作</span><br><span class="line"></span><br><span class="line">    <span class="comment">// -------------- 3、如果需要消耗积分，则扣除钢镚积分 -------------</span></span><br><span class="line">    xxx伪代码一顿操作</span><br><span class="line"></span><br><span class="line">    <span class="comment">// -------------- 4、获取奖品信息，开始翻滚吧 --------------------</span></span><br><span class="line">    xxx伪代码一顿操作</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> ResponseDTO.succ(luckDrawPrizeVO);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="5-2、注释和代码的一致性"><a href="#5-2、注释和代码的一致性" class="headerlink" title="5-2、注释和代码的一致性"></a>5-2、注释和代码的一致性</h4><p>注释并不是越多越好，当注释过多，维护代码的同时，还需要维护注释，不仅变成了一种负担，也与我们当初添加注释的初衷背道而驰。  </p><p>首先：大家应该通过清晰的逻辑架构，好的变量命名来提高代码可读性；需要的时候，才辅以注释说明。注释是为了帮助阅读者快速读懂代码，所以要从读者的角度出发，按需注释。注释内容要简洁、明了、无二义性，信息全面且不冗余。</p><p>其次：无论是修改、复制代码时，都要仔细核对注释内容是否正确。只改代码，不改注释是一种不文明行为，破坏了代码与注释的一致性，会让阅读者迷惑、费解，甚至误解。</p><p>反例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 查询部门</span></span><br><span class="line">EmployeeDTO employee = employeeDao.listByDeptId(deptId);</span><br></pre></td></tr></table></figure><h4 id="5-3、方法注释"><a href="#5-3、方法注释" class="headerlink" title="5-3、方法注释"></a>5-3、方法注释</h4><p>方法要尽量通过方法名自解释，不要写无用、信息冗余的方法头，不要写空有格式的方法头注释。</p><p>方法头注释内容可选，但不限于：功能说明、返回值，用法、算法实现等等。尤其是对外的方法接口声明，其注释，应当将重要、有用的信息表达清楚。</p><p>正例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 解析转换时间字符串为 LocalDate 时间类</span></span><br><span class="line"><span class="comment"> * 调用前必须校验字符串格式 否则可能造成解析失败的错误异常</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> dateStr 必须是 yyyy-MM-dd 格式的字符串</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> LocalDate</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> LocalDate <span class="title">parseYMD</span><span class="params">(String dateStr)</span></span>&#123;&#125;</span><br></pre></td></tr></table></figure><p>反例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 校验对象</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> t</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> String</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; <span class="function">String <span class="title">checkObj</span><span class="params">(T t)</span></span>;</span><br></pre></td></tr></table></figure><p>反例中出现的问题：</p><ul><li>方法注释没有说明具体的作用、使用事项。</li><li>参数、返回值，空有格式没内容。这是非常重要一点，任何人调用任何方法之前都需要知道方法对参数的要求，以及返回值是什么。</li></ul><h2 id="二、项目规范"><a href="#二、项目规范" class="headerlink" title="二、项目规范"></a>二、项目规范</h2><h3 id="1、代码目录结构"><a href="#1、代码目录结构" class="headerlink" title="1、代码目录结构"></a>1、代码目录结构</h3><p>统一的目录结构是所有项目的基础。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">src                               源码目录</span><br><span class="line">|-- common                            各个项目的通用类库</span><br><span class="line">|-- config                            项目的配置信息</span><br><span class="line">|-- constant                          全局公共常量</span><br><span class="line">|-- handler                           全局处理器</span><br><span class="line">|-- interceptor                       全局连接器</span><br><span class="line">|-- listener                          全局监听器</span><br><span class="line">|-- module                            各个业务</span><br><span class="line">|-- |--- employee                         员工模块</span><br><span class="line">|-- |--- role                             角色模块</span><br><span class="line">|-- |--- login                            登录模块</span><br><span class="line">|-- third                             三方服务，比如redis, oss，微信sdk等等</span><br><span class="line">|-- util                              全局工具类</span><br><span class="line">|-- Application.java                  启动类</span><br></pre></td></tr></table></figure><h3 id="2、common-目录规范"><a href="#2、common-目录规范" class="headerlink" title="2、common 目录规范"></a>2、common 目录规范</h3><p>common 目录用于存放各个项目通用的项目，但是又可以依照项目进行特定的修改。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">src 源码目录</span><br><span class="line">|-- common 各个项目的通用类库</span><br><span class="line">|-- |--- anno          通用注解，比如权限，登录等等</span><br><span class="line">|-- |--- constant      通用常量，比如 ResponseCodeConst</span><br><span class="line">|-- |--- domain        全局的 javabean，比如 BaseEntity,PageParamDTO 等</span><br><span class="line">|-- |--- exception     全局异常，如 BusinessException</span><br><span class="line">|-- |--- json          json 类库，如 LongJsonDeserializer，LongJsonSerializer</span><br><span class="line">|-- |--- swagger       swagger 文档</span><br><span class="line">|-- |--- validator     适合各个项目的通用 validator，如 CheckEnum，CheckBigDecimal 等</span><br></pre></td></tr></table></figure><h3 id="3、config-目录规范"><a href="#3、config-目录规范" class="headerlink" title="3、config 目录规范"></a>3、config 目录规范</h3><p>config 目录用于存放各个项目通用的项目，但是又可以依照项目进行特定的修改。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">src                               源码目录</span><br><span class="line">|-- config                            项目的所有配置信息</span><br><span class="line">|-- |--- MvcConfig                    mvc的相关配置，如interceptor,filter等</span><br><span class="line">|-- |--- DataSourceConfig             数据库连接池的配置</span><br><span class="line">|-- |--- MybatisConfig                mybatis的配置</span><br><span class="line">|-- |--- ....                         其他</span><br></pre></td></tr></table></figure><h3 id="4、module-目录规范"><a href="#4、module-目录规范" class="headerlink" title="4、module 目录规范"></a>4、module 目录规范</h3><p>module 目录里写项目的各个业务，每个业务一个独立的顶级文件夹，在文件里进行 mvc 的相关划分。<br>其中，domain 包里存放 entity, dto, vo，bo 等 javabean 对象</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">src</span><br><span class="line">|-- module                         所有业务模块</span><br><span class="line">|-- |-- role                          角色模块</span><br><span class="line">|-- |-- |--RoleController.java              controller</span><br><span class="line">|-- |-- |--RoleConst.java                   role相关的常量</span><br><span class="line">|-- |-- |--RoleService.java                 service</span><br><span class="line">|-- |-- |--RoleDao.java                     dao</span><br><span class="line">|-- |-- |--domain                           domain</span><br><span class="line">|-- |-- |-- |-- RoleEntity.java                  表对应实体</span><br><span class="line">|-- |-- |-- |-- RoleDTO.java                     dto对象</span><br><span class="line">|-- |-- |-- |-- RoleVO.java                      返回对象</span><br><span class="line">|-- |-- employee                      员工模块</span><br><span class="line">|-- |-- login                         登录模块</span><br><span class="line">|-- |-- email                         邮件模块</span><br><span class="line">|-- |-- ....                          其他</span><br></pre></td></tr></table></figure><h3 id="5、-domain-包中的-javabean-命名规范"><a href="#5、-domain-包中的-javabean-命名规范" class="headerlink" title="5、 domain 包中的 javabean 命名规范"></a>5、 domain 包中的 javabean 命名规范</h3><p>1） <code>javabean</code> 的整体要求：</p><ul><li>不得有任何的业务逻辑或者计算</li><li>基本数据类型必须使用包装类型<code>（Integer, Double、Boolean 等）</code></li><li>不允许有任何的默认值</li><li>每个属性必须添加注释，并且必须使用多行注释。</li><li>必须使用 <code>lombok</code> 简化 <code>getter/setter</code> 方法</li><li>建议对象使用 <code>lombok</code> 的 <code>@Builder ，@NoArgsConstructor</code>，同时使用这两个注解，简化对象构造方法以及set方法。</li></ul><p>正例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">@Builder</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DemoDTO</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用示例：</span></span><br><span class="line"></span><br><span class="line">DemoDTO demo = DemoDTO.builder()</span><br><span class="line">                .name(<span class="string">"yeqiu"</span>)</span><br><span class="line">                .age(<span class="number">66</span>)</span><br><span class="line">                .build();</span><br></pre></td></tr></table></figure><p>2）数据对象；<code>XxxxEntity</code>，要求：</p><ul><li>以 <code>Entity</code> 为结尾（阿里是为 DO 为结尾）</li><li>Xxxx 与数据库表名保持一致</li><li>类中字段要与数据库字段保持一致，不能缺失或者多余</li><li>类中的每个字段添加注释，并与数据库注释保持一致</li><li>不允许有组合</li><li>项目内的日期类型必须统一，建议使用 <code>java.util.Date，java.sql.Timestamp，java.time.LocalDateTime</code> 其中只一。</li></ul><p>3）传输对象；<code>XxxxDTO</code>，要求：</p><ul><li>不可以继承自 <code>Entity</code></li><li><code>DTO</code> 可以继承、组合其他 <code>DTO，VO，BO</code> 等对象</li><li><code>DTO</code> 只能用于前端、RPC 的请求参数</li></ul><p>3）视图对象；<code>XxxxVO</code>，要求：</p><ul><li>不可继承自 <code>Entity</code></li><li><code>VO</code> 可以继承、组合其他 <code>DTO，VO，BO</code> 等对象</li><li><code>VO</code> 只能用于返回前端、rpc 的业务数据封装对象</li></ul><p>4）业务对象 <code>BO</code>，要求：</p><ul><li>不可以继承自 <code>Entity</code></li><li><code>BO</code> 对象只能用于 <code>service，manager，dao</code> 层，不得用于 <code>controller</code> 层</li></ul><h2 id="三、MVC-规范"><a href="#三、MVC-规范" class="headerlink" title="三、MVC 规范"></a>三、MVC 规范</h2><h3 id="1、整体分层"><a href="#1、整体分层" class="headerlink" title="1、整体分层"></a>1、整体分层</h3><ul><li>controller 层</li><li>service 层</li><li>manager 层</li><li>dao 层</li></ul><h3 id="2、-controller-层规范"><a href="#2、-controller-层规范" class="headerlink" title="2、 controller 层规范"></a>2、 <code>controller</code> 层规范</h3><p>1） 只允许在 method 上添加 <code>RequestMapping</code> 注解，不允许加在 class 上（为了方便的查找 url，放到 url 不能一次性查找出来）</p><p>正例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DepartmentController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/department/list"</span>)</span><br><span class="line">    <span class="keyword">public</span> ResponseDTO&lt;List&lt;DepartmentVO&gt;&gt; listDepartment() &#123;</span><br><span class="line">        <span class="keyword">return</span> departmentService.listDepartment();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>反例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span> (<span class="string">"/department"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DepartmentController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/list"</span>)</span><br><span class="line">    <span class="keyword">public</span> ResponseDTO&lt;List&lt;DepartmentVO&gt;&gt; listDepartment() &#123;</span><br><span class="line">        <span class="keyword">return</span> departmentService.listDepartment();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>2）不推荐使用 rest 命名 url， 只能使用 <code>get/post</code> 方法。url 命名上规范如下：</p><blockquote><p><em>虽然 Rest 大法好，但是有时并不能一眼根据 url 看出来是什么操作，所以我们选择了后者，这个没有对与错，只有哪个更适合我们的团队。</em></p></blockquote><p><code>/业务模块/子模块/动作</code></p><p>正例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">GET  /department/get/&#123;id&#125;      查询某个部门详细信息</span><br><span class="line">POST /department/query         复杂查询</span><br><span class="line">POST /department/add           添加部门</span><br><span class="line">POST /department/update        更新部门</span><br><span class="line">GET  /department/delete/&#123;id&#125;   删除部门</span><br></pre></td></tr></table></figure><p>3）每个方法必须添加 <code>swagger</code> 文档注解 <code>@ApiOperation</code> ，并填写接口描述信息，描述最后必须加上作者信息 <code>@author 哪吒</code> 。</p><p>正例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ApiOperation</span>(<span class="string">"更新部门信息 @author 哪吒"</span>)</span><br><span class="line"><span class="meta">@PostMapping</span>(<span class="string">"/department/update"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> ResponseDTO&lt;String&gt; <span class="title">updateDepartment</span><span class="params">(@Valid @RequestBody DeptUpdateDTO deptUpdateDTO)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> departmentService.updateDepartment(deptUpdateDTO);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>4）controller 负责协同和委派业务，充当路由的角色，每个方法要保持简洁：</p><ul><li>不做任何的业务逻辑操作</li><li>不做任何的参数、业务校验，参数校验只允许使用@Valid 注解做简单的校验</li><li>不做任何的数据组合、拼装、赋值等操作</li></ul><p>正例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ApiOperation</span>(<span class="string">"添加部门 @author 哪吒"</span>)</span><br><span class="line"><span class="meta">@PostMapping</span>(<span class="string">"/department/add"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> ResponseDTO&lt;String&gt; <span class="title">addDepartment</span><span class="params">(@Valid @RequestBody DepartmentCreateDTO departmentCreateDTO)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> departmentService.addDepartment(departmentCreateDTO);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>5）只能在 <code>controller</code> 层获取当前请求用户，并传递给 <code>service</code> 层。</p><blockquote><p><em>因为获取当前请求用户是从 ThreadLocal 里获取取的，在 service、manager、dao 层极有可能是其他非 request 线程调用，会出现 null 的情况，尽量避免</em></p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ApiOperation</span>(<span class="string">"添加员工 @author yandanyang"</span>)</span><br><span class="line"><span class="meta">@PostMapping</span>(<span class="string">"/employee/add"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> ResponseDTO&lt;String&gt; <span class="title">addEmployee</span><span class="params">(@Valid @RequestBody EmployeeAddDTO employeeAddDTO)</span> </span>&#123;</span><br><span class="line">    LoginTokenBO requestToken = SmartRequestTokenUtil.getRequestUser();</span><br><span class="line">    <span class="keyword">return</span> employeeService.addEmployee(employeeAddDTO, requestToken);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3、-service-层规范"><a href="#3、-service-层规范" class="headerlink" title="3、 service 层规范"></a>3、 <code>service</code> 层规范</h3><p>1）合理拆分 service 文件，如果业务较大，请拆分为多个 service。</p><p>如订单业务,所有业务都写到 OrderService 中会导致文件过大，故需要进行拆分如下：</p><ul><li><code>OrderQueryService</code> 订单查询业务</li><li><code>OrderCreateService</code> 订单新建业务</li><li><code>OrderDeliverService</code> 订单发货业务</li><li><code>OrderValidatorService</code> 订单验证业务</li></ul><p>2）谨慎处理 <code>@Transactional</code> 事务注解的使用，不要简单对 <code>service</code> 的方法添加个 <code>@Transactional</code> 注解就觉得万事大吉了。应当合并对数据库的操作，尽量减少添加了<code>@Transactional</code>方法内的业务逻辑。<br><code>@Transactional</code> 注解内的 <code>rollbackFor</code> 值必须使用异常的基类 <code>Throwable.class</code></p><blockquote><p><em>对于@Transactional 注解，当 spring 遇到该注解时，会自动从数据库连接池中获取 connection，并开启事务然后绑定到 ThreadLocal 上，如果业务并没有进入到最终的 操作数据库环节，那么就没有必要获取连接并开启事务，应该直接将 connection 返回给数据库连接池，供其他使用（比较难以讲解清楚，如果不懂的话就主动去问）。</em></p></blockquote><p>反例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Transactional</span>(rollbackFor = Throwable.class)</span><br><span class="line"><span class="function"><span class="keyword">public</span> ResponseDTO&lt;String&gt; <span class="title">upOrDown</span><span class="params">(Long departmentId, Long swapId)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 验证 1</span></span><br><span class="line">    DepartmentEntity departmentEntity = departmentDao.selectById(departmentId);</span><br><span class="line">    <span class="keyword">if</span> (departmentEntity == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> ResponseDTO.wrap(DepartmentResponseCodeConst.NOT_EXISTS);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 验证 2</span></span><br><span class="line">    DepartmentEntity swapEntity = departmentDao.selectById(swapId);</span><br><span class="line">    <span class="keyword">if</span> (swapEntity == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> ResponseDTO.wrap(DepartmentResponseCodeConst.NOT_EXISTS);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 验证 3</span></span><br><span class="line">    Long count = employeeDao.countByDepartmentId(departmentId)</span><br><span class="line">    <span class="keyword">if</span> (count != <span class="keyword">null</span> &amp;&amp; count &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> ResponseDTO.wrap(DepartmentResponseCodeConst.EXIST_EMPLOYEE);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 操作数据库 4</span></span><br><span class="line">    Long departmentSort = departmentEntity.getSort();</span><br><span class="line">    departmentEntity.setSort(swapEntity.getSort());</span><br><span class="line">    departmentDao.updateById(departmentEntity);</span><br><span class="line">    swapEntity.setSort(departmentSort);</span><br><span class="line">    departmentDao.updateById(swapEntity);</span><br><span class="line">    <span class="keyword">return</span> ResponseDTO.succ();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以上代码前三步都是使用 connection 进行验证操作，由于方法上有@Transactional 注解，所以这三个验证都是使用的同一个 connection。</p><p>若对于复杂业务、复杂的验证逻辑，会导致整个验证过程始终占用该 connection 连接，占用时间可能会很长，直至方法结束，connection 才会交还给数据库连接池。</p><p>对于复杂业务的不可预计的情况，长时间占用同一个 connection 连接不是好的事情，应该尽量缩短占用时间。</p><p>正例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">DepartmentService.java</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> ResponseDTO&lt;String&gt; <span class="title">upOrDown</span><span class="params">(Long departmentId, Long swapId)</span> </span>&#123;</span><br><span class="line">    DepartmentEntity departmentEntity = departmentDao.selectById(departmentId);</span><br><span class="line">    <span class="keyword">if</span> (departmentEntity == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> ResponseDTO.wrap(DepartmentResponseCodeConst.NOT_EXISTS);</span><br><span class="line">    &#125;</span><br><span class="line">    DepartmentEntity swapEntity = departmentDao.selectById(swapId);</span><br><span class="line">    <span class="keyword">if</span> (swapEntity == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> ResponseDTO.wrap(DepartmentResponseCodeConst.NOT_EXISTS);</span><br><span class="line">    &#125;</span><br><span class="line">    Long count = employeeDao.countByDepartmentId(departmentId)</span><br><span class="line">    <span class="keyword">if</span> (count != <span class="keyword">null</span> &amp;&amp; count &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> ResponseDTO.wrap(DepartmentResponseCodeConst.EXIST_EMPLOYEE);</span><br><span class="line">    &#125;</span><br><span class="line">    departmentManager.upOrDown(departmentSort,swapEntity);</span><br><span class="line">    <span class="keyword">return</span> ResponseDTO.succ();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">DepartmentManager.java</span><br><span class="line"></span><br><span class="line"><span class="meta">@Transactional</span>(rollbackFor = Throwable.class)</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">upOrDown</span><span class="params">(DepartmentEntity departmentEntity ,DepartmentEntity swapEntity)</span></span>&#123;</span><br><span class="line">    Long departmentSort = departmentEntity.getSort();</span><br><span class="line">    departmentEntity.setSort(swapEntity.getSort());</span><br><span class="line">    departmentDao.updateById(departmentEntity);</span><br><span class="line">    swapEntity.setSort(departmentSort);</span><br><span class="line">    departmentDao.updateById(swapEntity);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>将数据在 service 层准备好，然后传递给 manager 层，由 manager 层添加@Transactional 进行数据库操作。</p><p>3）需要注意的是：注解 <code>@Transactional</code> 事务在类的内部方法调用是不会生效的</p><p>反例：如果发生异常，saveData方法上的事务注解并不会起作用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OrderService</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">createOrder</span><span class="params">(OrderCreateDTO createDTO)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.saveData(createDTO);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Transactional</span>(rollbackFor = Throwable.class)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">saveData</span><span class="params">(OrderCreateDTO createDTO)</span></span>&#123;</span><br><span class="line">        orderDao.insert(createDTO);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p><em>Spring采用动态代理(AOP)实现对bean的管理和切片，它为我们的每个class生成一个代理对象。只有在代理对象之间进行调用时，可以触发切面逻辑。而在同一个class中，方法A调用方法B，调用的是原对象的方法，而不通过代理对象。所以Spring无法拦截到这次调用，也就无法通过注解保证事务了。简单来说，在同一个类中的方法调用，不会被方法拦截器拦截到，因此事务不会起作用。</em></p></blockquote><p>解决方案：</p><ol><li>可以将方法放入另一个类，如新增 <code>manager层</code>，通过spring注入，这样符合了在对象之间调用的条件。</li><li>启动类添加<code>@EnableAspectJAutoProxy(exposeProxy = true)</code>，方法内使用<code>AopContext.currentProxy()</code>获得代理类，使用事务。</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">SpringBootApplication.java</span><br><span class="line"></span><br><span class="line"><span class="meta">@EnableAspectJAutoProxy</span>(exposeProxy = <span class="keyword">true</span>)</span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringBootApplication</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">OrderService.java</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">createOrder</span><span class="params">(OrderCreateDTO createDTO)</span></span>&#123;</span><br><span class="line">    OrderService orderService = (OrderService)AopContext.currentProxy();</span><br><span class="line">    orderService.saveData(createDTO);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>4）service是具体的业务处理逻辑服务层，尽量避免将web层某些参数传递到service中。  </p><p>反例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> ResponseDTO&lt;String&gt; <span class="title">handlePinganRequest</span><span class="params">(HttpServletRequest request)</span></span>&#123;</span><br><span class="line">    InputStreamReader inputStreamReader = <span class="keyword">new</span> InputStreamReader(request.getInputStream(), <span class="string">"GBK"</span>);</span><br><span class="line">    BufferedReader reader = <span class="keyword">new</span> BufferedReader(inputStreamReader);</span><br><span class="line">    StringBuilder sb = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">    String str;</span><br><span class="line">    <span class="keyword">while</span> ((str = reader.readLine()) != <span class="keyword">null</span>) &#123;</span><br><span class="line">        sb.append(str);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(!JSON.isValid(msg))&#123;</span><br><span class="line">      <span class="keyword">return</span> ResponseDTO.wrap(ResponseCodeConst.ERROR_PARAM);</span><br><span class="line">    &#125;</span><br><span class="line">    PinganMsgDTO PinganMsgDTO = JSON.parseObject(msg,PinganMsgDTO.class);</span><br><span class="line">    <span class="comment">// 示例结束</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>反例中出现的问题：</p><ul><li>反例中把 <code>HttpServletRequest</code> 传递到service中，是为了获取Request流中的字符信息，然后才是真正的业务处理。按照分层的初衷：将代码、业务逻辑解耦，正确的做法应该是<code>handlePinganRequest</code>方法将<code>String</code>字符作为参数直接处理业务，将从<code>Request</code>中获取字符的操作放入<code>controller</code>中。</li><li>另一个坏处是不方便做单元测试，还得一个<code>new</code>一个<code>HttpServletRequest</code>并制造一个<code>InputStream</code>，然而这样做并不能模拟到真实的业务情景及数据。</li></ul><h3 id="4、-manager-层规范"><a href="#4、-manager-层规范" class="headerlink" title="4、 manager 层规范"></a>4、 manager 层规范</h3><p>manager 层的作用(引自《阿里 java 手册》)：</p><ul><li>对第三方平台封装的层，预处理返回结果及转化异常信息；</li><li>对 Service 层通用能力的下沉，如缓存方案、中间件通用处理；</li><li>与 DAO 层交互，对多个 DAO 的组合复用。</li></ul><h3 id="5、-dao-层规范"><a href="#5、-dao-层规范" class="headerlink" title="5、 dao 层规范"></a>5、 dao 层规范</h3><p>优先使用 mybatis-plus 框架。如果需要多个数据源操作的，可以选择使用 SmartDb 框架。</p><p>1）所有 Dao 继承自 BaseMapper</p><p>2）禁止使用 Mybatis-plus 的 Wrapper 条件构建器</p><p>3）禁止直接在 mybatis xml 中写死常量，应从 dao 中传入到 xml 中</p><p>3）建议不要使用星号 <code>*</code> 代替所有字段</p><p>正例：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">    NoticeDao.java</span><br><span class="line"></span><br><span class="line">    Integer noticeCount(@Param("sendStatus") Integer sendStatus);</span><br><span class="line">---------------------------------------------</span><br><span class="line">    NoticeMapper.xml</span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"noticeCount"</span> <span class="attr">resultType</span>=<span class="string">"integer"</span>&gt;</span></span><br><span class="line">        select</span><br><span class="line">        count(1)</span><br><span class="line">        from t_notice</span><br><span class="line">        where</span><br><span class="line">        send_status = #&#123;sendStatus&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><p>反例：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">    NoticeDao.java</span><br><span class="line"></span><br><span class="line">    Integer noticeCount();</span><br><span class="line">---------------------------------------------</span><br><span class="line">    NoticeMapper.xml</span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"noticeCount"</span> <span class="attr">resultType</span>=<span class="string">"integer"</span>&gt;</span></span><br><span class="line">        select</span><br><span class="line">        count(1)</span><br><span class="line">        from t_notice</span><br><span class="line">        where</span><br><span class="line">        send_status = 0</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><p>3）dao层方法命名规范</p><ul><li>获取单个对象的方法用 <code>get</code> 做前缀。</li><li>获取多个对象的方法用 <code>list</code> 做前缀。</li><li>获取统计值的方法用 <code>count</code> 做前缀。</li><li>插入的方法用 <code>save/insert</code> 做前缀。</li><li>删除的方法用 <code>remove/delete</code> 做前缀。</li><li>修改的方法用 <code>update</code> 做前缀。</li></ul><p>建议：dao层方法命名尽量以sql语义命名，避免与业务关联。</p><p>正例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">List&lt;PerformanceDTO&gt; <span class="title">listByMonthAndItemId</span><span class="params">(@Param(<span class="string">"month"</span>)</span> String month, @<span class="title">Param</span><span class="params">(<span class="string">"itemId"</span>)</span> Integer itemId)</span>;</span><br></pre></td></tr></table></figure><p>反例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">List&lt;PerformanceDTO&gt; <span class="title">getInternalData</span><span class="params">(@Param(<span class="string">"month"</span>)</span> String month, @<span class="title">Param</span><span class="params">(<span class="string">"itemId"</span>)</span> Integer itemId)</span>;</span><br></pre></td></tr></table></figure><p>反例中出现的不规范操作：</p><ul><li>get代表单个查询，批量查询的应该 list 开头。</li><li>命名与业务关联，局限了dao方法的使用场景和范围，降低了方法的复用性，造成他人困惑以及重复造轮子。</li></ul><h3 id="6、boolean类型的属性命名规范"><a href="#6、boolean类型的属性命名规范" class="headerlink" title="6、boolean类型的属性命名规范"></a>6、boolean类型的属性命名规范</h3><blockquote><p>类中布尔类型的变量，都不要加is，否则部分框架解析会引起序列化错误。反例：定义为基本数据类型 Boolean isDeleted；的属性，它的方法也是 isDeleted()，RPC在反向解析的时候，“以为”对应的属性名称是 deleted，导致属性获取不到，进而抛出异常。</p></blockquote><p>这是阿里巴巴开发手册中的原文，我们团队的规定是：<code>boolean</code> 类型的类属性和数据表字段都统一使用 <code>flag</code> 结尾。虽然使用 <code>isDeleted，is_deleted</code> 从字面语义上更直观，但是比起可能出现的潜在错误，这点牺牲还是值得的。</p><p>正例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">deletedFlag，deleted_flag，onlineFlag，online_flag</span><br></pre></td></tr></table></figure><h3 id="7、"><a href="#7、" class="headerlink" title="7、"></a>7、</h3><h2 id="四、数据库-规范"><a href="#四、数据库-规范" class="headerlink" title="四、数据库 规范"></a>四、数据库 规范</h2><h3 id="1-建表规范"><a href="#1-建表规范" class="headerlink" title="1 建表规范"></a>1 建表规范</h3><p>表必备三字段：id, create_time, update_time</p><ul><li>id 字段 Long 类型，单表自增，自增长度为 1</li><li>create_time 字段 datetime 类型，默认值 CURRENT_TIMESTAMP</li><li>update_time 字段 datetime 类型，默认值 CURRENT_TIMESTAMP, On update CURRENT_TIMESTAMP</li></ul><h3 id="2-枚举类表字段注释需要将所有枚举含义进行注释"><a href="#2-枚举类表字段注释需要将所有枚举含义进行注释" class="headerlink" title="2 枚举类表字段注释需要将所有枚举含义进行注释"></a>2 枚举类表字段注释需要将所有枚举含义进行注释</h3><p>修改或增加字段的状态描述，必须要及时同步更新注释。<br>如下表的 <code>sync_status</code> 字段 <code>同步状态 0 未开始 1同步中 2同步成功 3失败</code>。</p><p>正例：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`t_change_data`</span> (</span><br><span class="line"><span class="string">`id`</span> <span class="built_in">BIGINT</span>(<span class="number">20</span>) <span class="keyword">UNSIGNED</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> AUTO_INCREMENT,</span><br><span class="line"><span class="string">`sync_status`</span> <span class="built_in">TINYINT</span>(<span class="number">3</span>) <span class="keyword">UNSIGNED</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">'0'</span> <span class="keyword">COMMENT</span> <span class="string">'同步状态 0 未开始 1同步中 2同步成功 3失败'</span>,</span><br><span class="line"><span class="string">`sync_time`</span> DATETIME <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'同步时间'</span>,</span><br><span class="line"><span class="string">`create_time`</span> DATETIME <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="keyword">CURRENT_TIMESTAMP</span>,</span><br><span class="line"><span class="string">`update_time`</span> DATETIME <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="literal">NULL</span> <span class="keyword">ON</span> <span class="keyword">UPDATE</span> <span class="keyword">CURRENT_TIMESTAMP</span>,</span><br><span class="line">PRIMARY <span class="keyword">KEY</span> (<span class="string">`change_data_id`</span>)</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>反例：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`t_change_data`</span> (</span><br><span class="line"><span class="string">`id`</span> <span class="built_in">BIGINT</span>(<span class="number">20</span>) <span class="keyword">UNSIGNED</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> AUTO_INCREMENT,</span><br><span class="line"><span class="string">`sync_status`</span> <span class="built_in">TINYINT</span>(<span class="number">3</span>) <span class="keyword">UNSIGNED</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">'0'</span> <span class="keyword">COMMENT</span> <span class="string">'同步状态 '</span>,</span><br><span class="line"><span class="string">`sync_time`</span> DATETIME <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'同步时间'</span>,</span><br><span class="line"><span class="string">`create_time`</span> DATETIME <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="keyword">CURRENT_TIMESTAMP</span>,</span><br><span class="line"><span class="string">`update_time`</span> DATETIME <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="literal">NULL</span> <span class="keyword">ON</span> <span class="keyword">UPDATE</span> <span class="keyword">CURRENT_TIMESTAMP</span>,</span><br><span class="line">PRIMARY <span class="keyword">KEY</span> (<span class="string">`change_data_id`</span>)</span><br><span class="line">)</span><br></pre></td></tr></table></figure><h3 id="3-合理结合业务给表字段添加索引和唯一索引"><a href="#3-合理结合业务给表字段添加索引和唯一索引" class="headerlink" title="3 合理结合业务给表字段添加索引和唯一索引"></a>3 合理结合业务给表字段添加索引和唯一索引</h3><p>具体索引规范请参照《阿里巴巴 Java 开发手册》索引规约</p><h2 id="五、其他"><a href="#五、其他" class="headerlink" title="五、其他"></a>五、其他</h2><h3 id="1、代码提交规范"><a href="#1、代码提交规范" class="headerlink" title="1、代码提交规范"></a>1、代码提交规范</h3><ul><li>提交前应该冷静、仔细检查一下，确保没有忘记加入版本控制或不应该提交的文件。</li><li>提交前应该先编译一次（idea里ctrl+F9），防止出现编译都报错的情况。</li><li>提交前先更新pull一次代码，提交前发生冲突要比提交后发生冲突容易解决的多。</li><li>提交前检查代码是否格式化，是否符合代码规范，无用的包引入、变量是否清除等等。</li><li>提交时检查注释是否准确简洁的表达出了本次提交的内容。</li></ul><h3 id="2、maven项目"><a href="#2、maven项目" class="headerlink" title="2、maven项目"></a>2、maven项目</h3><ul><li>pom禁止出现相同 groupId，artifactId 的依赖配置。</li><li>项目名称应该与 artifactId 保持一致。</li><li>定期检查jar包依赖关系，及时排除解决冲突的jar包。</li></ul><h3 id="3、保持项目整洁"><a href="#3、保持项目整洁" class="headerlink" title="3、保持项目整洁"></a>3、保持项目整洁</h3><p>使用git，必须添加 .gitignore 忽略配置文件。<br>不要提交与项目无关的内容文件：idea配置、target包等。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;JAVA-开发规范&quot;&gt;&lt;a href=&quot;#JAVA-开发规范&quot; class=&quot;headerlink&quot; title=&quot;JAVA 开发规范&quot;&gt;&lt;/a&gt;JAVA 开发规范&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;v1.0.0 2019/09/06&lt;/em&gt;&lt;/p
      
    
    </summary>
    
    
    
      <category term="规范" scheme="http://luoyd.cn/tags/%E8%A7%84%E8%8C%83/"/>
    
      <category term="Java" scheme="http://luoyd.cn/tags/Java/"/>
    
      <category term="后台" scheme="http://luoyd.cn/tags/%E5%90%8E%E5%8F%B0/"/>
    
  </entry>
  
  <entry>
    <title>Mybatis-plus</title>
    <link href="http://luoyd.cn/2019/12/24/Mybatis-plus/"/>
    <id>http://luoyd.cn/2019/12/24/Mybatis-plus/</id>
    <published>2019-12-24T04:28:04.301Z</published>
    <updated>2019-12-26T01:09:13.239Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Mybatis-Plus"><a href="#Mybatis-Plus" class="headerlink" title="  Mybatis-Plus"></a><img src="https://mp.baomidou.com/img/logo.png" width="30" height="30">  Mybatis-Plus</h2><h3 id="特性"><a href="#特性" class="headerlink" title="特性"></a>特性</h3><table><thead><tr><th>特点</th><th>概述</th></tr></thead><tbody><tr><td>无入侵</td><td>只增强不做改变，引入之后现有工程不产生影响</td></tr><tr><td>损耗小</td><td>启动时自动注入基本CURD，性能基本无损耗，直接面向对象操作</td></tr><tr><td>强大的CRUD 操作</td><td>内置通用Mapper、Service，通过少量配置即可实现单表大部分 CRUD操作，更有强大的条件构造器，满足各类使用需求</td></tr><tr><td>支持Lambda形式调用</td><td>通过Lambda表达式，方便的编写各类查询条件，无需再担心字段写错</td></tr><tr><td>支持主键自动生成</td><td>支持多达 4 种主键策略（内含分布式唯一ID 生成器 - Sequence），可自由配置，完美解决主键问题</td></tr><tr><td>支持 ActiveRecord 模式</td><td>支持 ActiveRecord 形式调用，实体类只需继承 Model 类即可进行强大的 CRUD 操作</td></tr><tr><td>支持自定义全局通用操作</td><td>支持全局通用方法注入Write once, use anywhere</td></tr><tr><td>内置代码生成器</td><td>采用代码或者 Maven 插件可快速生成 Mapper 、Model、Service 、 Controller 层代码，支持模板引擎以及自定义配置</td></tr><tr><td>内置分页插件</td><td>基于 MyBatis物理分页，开发者无需关心具体操作，配置好插件之后，写分页等同于普通 List 查询</td></tr><tr><td>分页插件支持多种数据库</td><td>支持MySQL、MariaDB、Oracle、DB2、H2、HSQL、SQLite、Postgre、SQLServer 等多种数据库</td></tr><tr><td>内置性能分析插件</td><td>可输出Sql语句以及其执行时间，建议开发测试时启用该功能，能快速揪出慢查询</td></tr><tr><td>内置全局拦截插件</td><td>提供全表delete、update操作智能分析阻断，也可自定义拦截规则，预防误操作</td></tr></tbody></table><h3 id="框架结构"><a href="#框架结构" class="headerlink" title="框架结构"></a>框架结构</h3><img src="https://mp.baomidou.com/img/mybatis-plus-framework.jpg" width="600" height="300"><h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><h4 id="1、安装"><a href="#1、安装" class="headerlink" title="1、安装"></a>1、安装</h4><ul><li>Maven<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;com.baomidou&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;mybatis-plus-boot-starter&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;3.3.0&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure></li></ul><h4 id="2、配置"><a href="#2、配置" class="headerlink" title="2、配置"></a>2、配置</h4><ul><li>在SpringBoot启动类中添加@MapperScan注解，扫描Mapper文件夹</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">@SpringBootApplication</span><br><span class="line">@MapperScan(&quot;com.baomidou.mybatisplus.samples.quickstart.mapper&quot;)</span><br><span class="line">public class Application &#123;</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        SpringApplication.run(QuickStartApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>在application.yml配置文件中添加Mysql数据库相关配置</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"> # DataSource Config</span><br><span class="line">spring:</span><br><span class="line">  datasource:</span><br><span class="line">    driver-class-name: org.h2.Driver</span><br><span class="line">    schema: classpath:db/schema-h2.sql</span><br><span class="line">    data: classpath:db/data-h2.sql</span><br><span class="line">    url: jdbc:h2:mem:test</span><br><span class="line">    username: root</span><br><span class="line">    password: test</span><br></pre></td></tr></table></figure><h4 id="3、测试"><a href="#3、测试" class="headerlink" title="3、测试"></a>3、测试</h4><ul><li>实体类</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">@Data</span><br><span class="line">public class User &#123;</span><br><span class="line">    private Long id;</span><br><span class="line">    private String name;</span><br><span class="line">    private Integer age;</span><br><span class="line">    private String email;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>Mapper类</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">public interface UserMapper extends BaseMapper&lt;User&gt; &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>测试类</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">@RunWith(SpringRunner.class)</span><br><span class="line">@SpringBootTest</span><br><span class="line">public class SampleTest &#123;</span><br><span class="line"></span><br><span class="line">    @Autowired</span><br><span class="line">    private UserMapper userMapper;</span><br><span class="line"></span><br><span class="line">    @Test</span><br><span class="line">    public void testSelect() &#123;</span><br><span class="line">        System.out.println((&quot;----- selectAll method test ------&quot;));</span><br><span class="line">        List&lt;User&gt; userList = userMapper.selectList(null);</span><br><span class="line">        Assert.assertEquals(5, userList.size());</span><br><span class="line">        userList.forEach(System.out::println);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>UserMapper中的selectList()方法的参数为MP内置的条件封装Wrapper，所以不填写即无任何条件</p></blockquote><h4 id="4、注解"><a href="#4、注解" class="headerlink" title="4、注解"></a>4、注解</h4><h5 id="4-1-TableName"><a href="#4-1-TableName" class="headerlink" title="4.1 @TableName"></a>4.1 @TableName</h5><ul><li>表名注解</li></ul><table><thead><tr><th>属性</th><th>类型</th><th>必须指定</th><th>默认值</th><th>描述</th></tr></thead><tbody><tr><td>value</td><td>String</td><td>否</td><td>“”</td><td>表名</td></tr><tr><td>schema</td><td>String</td><td>否</td><td>“”</td><td>schema(@since3.1.1)</td></tr><tr><td>keepGlobalPrefix</td><td>boolean</td><td>否</td><td>false</td><td>是否保持使用全局的 tablePrefix 的值(如果设置了全局 tablePrefix 且自行设置了 value 的值)</td></tr><tr><td>resultMap</td><td>String</td><td>否</td><td>“”</td><td>xml中resultMap的id</td></tr><tr><td>autoResultMap</td><td>boolean</td><td>否</td><td>false</td><td>是否自动构建 resultMap 并使用(如果设置 resultMap 则不会进行 resultMap 的自动构建并注入)(@since 3.1.2)</td></tr></tbody></table><blockquote><p>关于<code>autoResultMap</code>的说明:</p></blockquote><blockquote><p>从mp的原理上讲,因为底层是mybatis,所以一些mybatis的常识你要知道,mp只是帮你注入了常用crud 注入之前可以说是动态的(根据你entity的字段以及注解变化而变化),但是注入之后是静态的(等于你写在xml的东西)而对于直接指定<code>typeHandler</code>,mybatis只支持你写在2个地方:</p><blockquote><p>1、定义在resultMap里,只作用于select查询的返回结果封装</p></blockquote></blockquote><blockquote><blockquote><p>2、定义在<code>insert</code>和<code>update</code>sql的<code>#{property}</code>里的<code>property</code>后面(例:#{<code>property</code>,<code>typehandler=xxx.xxx.xxx</code>}),只作用于设置值而除了这两种直接指定<code>typeHandler</code>,mybatis有一个全局的扫描你自己的<code>typeHandler</code>包的配置,这是根据你的<code>property</code>的类型去找<code>typeHandler</code>并使用这个属性的作用就是:如果你的<code>property</code>类型… todo</p></blockquote></blockquote><h5 id="4-2-TableId"><a href="#4-2-TableId" class="headerlink" title="4.2 @TableId"></a>4.2 @TableId</h5><ul><li>主键注解</li></ul><table><thead><tr><th>属性</th><th>类型</th><th>必须指定</th><th>默认值</th><th>描述</th></tr></thead><tbody><tr><td>value</td><td>String</td><td>否</td><td>“”</td><td>主键字段名</td></tr><tr><td>type</td><td>Enum</td><td>否</td><td>IdType.NONE</td><td>主键类型</td></tr></tbody></table><h6 id="4-2-1-IdType"><a href="#4-2-1-IdType" class="headerlink" title="4.2.1 IdType"></a>4.2.1 IdType</h6><table><thead><tr><th>值</th><th>描述</th></tr></thead><tbody><tr><td>AUTO</td><td>数据库自增</td></tr><tr><td>INPUT</td><td>自行输入</td></tr><tr><td>ID_WORKER</td><td>分布式全局唯一ID长整型类型</td></tr><tr><td>UUID</td><td>32位UUID字符串</td></tr><tr><td>NONE</td><td>无状态</td></tr><tr><td>ID_WORKER_STR</td><td>分布式全局唯一ID字符串类型</td></tr></tbody></table><h5 id="4-3-TableField"><a href="#4-3-TableField" class="headerlink" title="4.3 @TableField"></a>4.3 @TableField</h5><ul><li>字段注解</li></ul><table><thead><tr><th>属性</th><th>类 型</th><th>必须指定</th><th>默认值</th><th>描述</th></tr></thead><tbody><tr><td>value</td><td>String</td><td>否</td><td>“”</td><td>字段名</td></tr><tr><td>el</td><td>String</td><td>否</td><td>“”</td><td>映射为原生 #{ … } 逻辑,相当于写在 xml 里的 #{ … } 部分</td></tr><tr><td>exist</td><td>boolean</td><td>否</td><td>true</td><td>是否为数据库表字段</td></tr><tr><td>condition</td><td>String</td><td>否</td><td>“”</td><td>字段 where 实体查询比较条件,有值设置则按设置的值为准,没有则为默认全局</td></tr><tr><td>update</td><td>String</td><td>否</td><td>“”</td><td>字段 update set 部分注入, 例update=”%s+1”：表示更新时会set version=version+1(该属性优先级高于 el 属性)</td></tr><tr><td>insertStrategy</td><td>Enum</td><td>N</td><td>DEFAULT</td><td>例：NOT_NULL: insert into table_a(<if test="columnProperty != null">column</if>) values (<if test="columnProperty != null">#{columnProperty}</if>) (since v_3.1.2)</td></tr><tr><td>updateStrategy</td><td>Enum</td><td>N</td><td>DEFAULT</td><td>例：IGNORED: update table_a set column=#{columnProperty} (since v_3.1.2)</td></tr><tr><td>whereStrategy</td><td>Enum</td><td>N</td><td>DEFAULT</td><td>例：NOT_EMPTY: where <if test="columnProperty != null and columnProperty!=''">column=#{columnProperty}</if> (since v_3.1.2)</td></tr><tr><td>fill</td><td>num</td><td>否</td><td>FieldFill.DEFAULT</td><td>字段自动填充策略</td></tr><tr><td>select</td><td>boolean</td><td>否</td><td>true</td><td>是否进行 select 查询</td></tr><tr><td>keepGlobalFormat</td><td>Boolean</td><td>否</td><td>false</td><td>是否保持使用全局的 format 进行处理(@since 3.1.1)</td></tr></tbody></table><h6 id="4-3-1-FiledStrategy"><a href="#4-3-1-FiledStrategy" class="headerlink" title="4.3.1 FiledStrategy"></a>4.3.1 FiledStrategy</h6><table><thead><tr><th>值</th><th>描述</th></tr></thead><tbody><tr><td>IGNORED</td><td>忽略判断</td></tr><tr><td>NOT_NULL</td><td>非忽略判断</td></tr><tr><td>NOT_EMPTY</td><td>非空判断(只对字符串类型字段,其他类型字段依然为非NULL判断)</td></tr><tr><td>DEFAULT</td><td>追随全局配置</td></tr></tbody></table><h6 id="4-3-2-FileFill"><a href="#4-3-2-FileFill" class="headerlink" title="4.3.2 FileFill"></a>4.3.2 FileFill</h6><table><thead><tr><th>值</th><th>描述</th></tr></thead><tbody><tr><td>DEFAULT</td><td>默认不处理</td></tr><tr><td>INSERT</td><td>插入时填充字段</td></tr><tr><td>UPDATE</td><td>更新时填充字段</td></tr><tr><td>INSERT_UPDATE</td><td>插入和更新时填充字段</td></tr></tbody></table><h5 id="4-4-Version"><a href="#4-4-Version" class="headerlink" title="4.4 @Version"></a>4.4 @Version</h5><ul><li>乐观锁注解、标记@version在字段上</li></ul><h6 id="4-4-1-EnumValue"><a href="#4-4-1-EnumValue" class="headerlink" title="4.4.1 EnumValue"></a>4.4.1 EnumValue</h6><ul><li>通枚举类注解（注解在枚举字段上）</li></ul><h6 id="4-4-2-TableLogic"><a href="#4-4-2-TableLogic" class="headerlink" title="4.4.2 TableLogic"></a>4.4.2 TableLogic</h6><ul><li>表字段逻辑处理注解（逻辑删除）</li></ul><table><thead><tr><th>属性</th><th>类型</th><th>必须指定</th><th>默认值</th><th>描述</th></tr></thead><tbody><tr><td>value</td><td>String</td><td>否</td><td>“”</td><td>逻辑未删除值</td></tr><tr><td>delval</td><td>String</td><td>否</td><td>“”</td><td>逻辑删除值</td></tr></tbody></table><h6 id="4-4-3-SqlParser"><a href="#4-4-3-SqlParser" class="headerlink" title="4.4.3 SqlParser"></a>4.4.3 SqlParser</h6><ul><li>租户注解(3.1.1开始支持注解在mapper上)</li></ul><table><thead><tr><th>属性</th><th>类型</th><th>必须指定</th><th>默认值</th><th>描述</th></tr></thead><tbody><tr><td>filter</td><td>boolean</td><td>否</td><td>flase</td><td>true: 表示过滤SQL解析，即不会进入ISqlParser解析链，否则会进解析链并追加例如tenant_id等条件</td></tr></tbody></table><h5 id="4-5-keySequence"><a href="#4-5-keySequence" class="headerlink" title="4.5 @keySequence"></a>4.5 @keySequence</h5><ul><li>序列主键策略Oracle</li></ul><table><thead><tr><th>属性</th><th>类型</th><th>必须指定</th><th>默认值</th><th>描述</th></tr></thead><tbody><tr><td>value</td><td>String</td><td>否</td><td>“”</td><td>序列名</td></tr><tr><td>clazz</td><td>Class</td><td>否</td><td>Long.class</td><td>id的类型, 可以指定String.class，这样返回的Sequence值是字符串”1”</td></tr></tbody></table><h3 id="核心功能"><a href="#核心功能" class="headerlink" title="核心功能"></a>核心功能</h3><h4 id="1、代码生成器"><a href="#1、代码生成器" class="headerlink" title="1、代码生成器"></a>1、代码生成器</h4><h5 id="1-1-添加依赖"><a href="#1-1-添加依赖" class="headerlink" title="1.1 添加依赖"></a>1.1 添加依赖</h5><ul><li>添加代码生成器依赖</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;com.baomidou&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;mybatis-plus-generator&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;3.3.0&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><ul><li>添加 模板引擎 依赖，MyBatis-Plus 支持 Velocity（默认）、Freemarker、Beetl，用户可以选择自己熟悉的模板引擎，如果都不满足您的要求，可以采用自定义模板引擎。</li></ul><blockquote><p>Velocity（默认）：</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.apache.velocity&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;velocity-engine-core&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;2.1&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><blockquote><p>Freemarker：</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.freemarker&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;freemarker&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;2.3.29&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><blockquote><p>Beetl:</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;com.ibeetl&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;beetl&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;3.0.15.RELEASE&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><p style="color:red"> 注意！如果您选择了非默认引擎，需要在 AutoGenerator 中 设置模板引擎。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">AutoGenerator generator = new AutoGenerator();</span><br><span class="line"></span><br><span class="line">// set freemarker engine</span><br><span class="line">generator.setTemplateEngine(new FreemarkerTemplateEngine());</span><br><span class="line"></span><br><span class="line">// set beetl engine</span><br><span class="line">generator.setTemplateEngine(new BeetlTemplateEngine());</span><br><span class="line"></span><br><span class="line">// set custom engine (reference class is your custom engine class)</span><br><span class="line">generator.setTemplateEngine(new CustomTemplateEngine());</span><br><span class="line"></span><br><span class="line">// other config</span><br><span class="line">...</span><br></pre></td></tr></table></figure><h5 id="1-2-编写配置"><a href="#1-2-编写配置" class="headerlink" title="1.2  编写配置"></a>1.2  编写配置</h5><ul><li>配置GlobalConfig</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">GlobalConfig globalConfig = new GlobalConfig();</span><br><span class="line">globalConfig.setOutputDir(System.getProperty(&quot;user.dir&quot;) + &quot;/src/main/java&quot;);</span><br><span class="line">globalConfig.setAuthor(&quot;jobob&quot;);</span><br><span class="line">globalConfig.setOpen(false);</span><br></pre></td></tr></table></figure><ul><li>配置 DataSourceConfig</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">DataSourceConfig dataSourceConfig = new DataSourceConfig();</span><br><span class="line">dataSourceConfig.setUrl(&quot;jdbc:mysql://localhost:3306/ant?useUnicode=true&amp;useSSL=false&amp;characterEncoding=utf8&quot;);</span><br><span class="line">dataSourceConfig.setDriverName(&quot;com.mysql.jdbc.Driver&quot;);</span><br><span class="line">dataSourceConfig.setUsername(&quot;root&quot;);</span><br><span class="line">dataSourceConfig.setPassword(&quot;password&quot;);</span><br></pre></td></tr></table></figure><h5 id="1-3-自定义模板引擎"><a href="#1-3-自定义模板引擎" class="headerlink" title="1.3 自定义模板引擎"></a>1.3 自定义模板引擎</h5><p>请继承类 com.baomidou.mybatisplus.generator.engine.AbstractTemplateEngine</p><h5 id="1-4-自定义代码模板"><a href="#1-4-自定义代码模板" class="headerlink" title="1.4 自定义代码模板"></a>1.4 自定义代码模板</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">//指定自定义模板路径, 位置：/resources/templates/entity2.java.ftl(或者是.vm)</span><br><span class="line">//注意不要带上.ftl(或者是.vm), 会根据使用的模板引擎自动识别</span><br><span class="line">TemplateConfig templateConfig = new TemplateConfig()</span><br><span class="line">    .setEntity(&quot;templates/entity2.java&quot;);</span><br><span class="line"></span><br><span class="line">AutoGenerator mpg = new AutoGenerator();</span><br><span class="line">//配置自定义模板</span><br><span class="line">mpg.setTemplate(templateConfig);</span><br></pre></td></tr></table></figure><h5 id="1-5-自定义属性注入"><a href="#1-5-自定义属性注入" class="headerlink" title="1.5 自定义属性注入"></a>1.5 自定义属性注入</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">InjectionConfig injectionConfig = new InjectionConfig() &#123;</span><br><span class="line">    //自定义属性注入:abc</span><br><span class="line">    //在.ftl(或者是.vm)模板中，通过$&#123;cfg.abc&#125;获取属性</span><br><span class="line">    @Override</span><br><span class="line">    public void initMap() &#123;</span><br><span class="line">        Map&lt;String, Object&gt; map = new HashMap&lt;&gt;();</span><br><span class="line">        map.put(&quot;abc&quot;, this.getConfig().getGlobalConfig().getAuthor() + &quot;-mp&quot;);</span><br><span class="line">        this.setMap(map);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line">AutoGenerator mpg = new AutoGenerator();</span><br><span class="line">//配置自定义属性注入</span><br><span class="line">mpg.setCfg(injectionConfig);</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">entity2.java.ftl</span><br><span class="line">自定义属性注入abc=$&#123;cfg.abc&#125;</span><br><span class="line"></span><br><span class="line">entity2.java.vm</span><br><span class="line">自定义属性注入abc=$!&#123;cfg.abc&#125;</span><br></pre></td></tr></table></figure><h5 id="1-6-字段其他字段查询注入"><a href="#1-6-字段其他字段查询注入" class="headerlink" title="1.6 字段其他字段查询注入"></a>1.6 字段其他字段查询注入</h5><img src="https://mp.baomidou.com/img/custom-fields.png" width="600" height="300"><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">new DataSourceConfig().setDbQuery(new MySqlQuery() &#123;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 重写父类预留查询自定义字段&lt;br&gt;</span><br><span class="line">     * 这里查询的 SQL 对应父类 tableFieldsSql 的查询字段，默认不能满足你的需求请重写它&lt;br&gt;</span><br><span class="line">     * 模板中调用：  table.fields 获取所有字段信息，</span><br><span class="line">     * 然后循环字段获取 field.customMap 从 MAP 中获取注入字段如下  NULL 或者 PRIVILEGES</span><br><span class="line">     */</span><br><span class="line">    @Override</span><br><span class="line">    public String[] fieldCustom() &#123;</span><br><span class="line">        return new String[]&#123;&quot;NULL&quot;, &quot;PRIVILEGES&quot;&#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h4 id="2、CRUD接口"><a href="#2、CRUD接口" class="headerlink" title="2、CRUD接口"></a>2、CRUD接口</h4><h5 id="2-1-Service-CRUD接口"><a href="#2-1-Service-CRUD接口" class="headerlink" title="2.1 Service CRUD接口"></a>2.1 Service CRUD接口</h5><blockquote><p>说明</p><ul><li>通用 Service CRUD 封装IService接口，进一步封装 CRUD 采用 get 查询单行 remove 删除 list 查询集合 page 分页 前缀命名方式区分 Mapper 层避免混淆</li><li>泛型T为任意实体对象</li><li>建议如果存在自定义通用 Service 方法的可能，请创建自己的 IBaseService 继承 Mybatis-Plus 提供的基类</li><li>对象 Wrapper 为 条件构造器</li></ul></blockquote><h6 id="2-1-1-Save"><a href="#2-1-1-Save" class="headerlink" title="2.1.1  Save"></a>2.1.1  Save</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">// 插入一条记录（选择字段，策略插入）</span><br><span class="line">boolean save(T entity);</span><br><span class="line">// 插入（批量）</span><br><span class="line">boolean saveBatch(Collection&lt;T&gt; entityList);</span><br><span class="line">// 插入（批量）</span><br><span class="line">boolean saveBatch(Collection&lt;T&gt; entityList, int batchSize);</span><br></pre></td></tr></table></figure><ul><li>参数说明</li></ul><table><thead><tr><th>类型</th><th>参数名</th><th>描述</th></tr></thead><tbody><tr><td>T</td><td>entity</td><td>实体对象</td></tr><tr><td>Collection<t></t></td><td>entityList</td><td>实体对象集合</td></tr><tr><td>int</td><td>batchSize</td><td>插入批次数量</td></tr></tbody></table><h6 id="2-1-2-SaveOrUpdate"><a href="#2-1-2-SaveOrUpdate" class="headerlink" title="2.1.2  SaveOrUpdate"></a>2.1.2  SaveOrUpdate</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">// TableId 注解存在更新记录，否插入一条记录</span><br><span class="line">boolean saveOrUpdate(T entity);</span><br><span class="line">// 根据updateWrapper尝试更新，否继续执行saveOrUpdate(T)方法</span><br><span class="line">boolean saveOrUpdate(T entity, Wrapper&lt;T&gt; updateWrapper);</span><br><span class="line">// 批量修改插入</span><br><span class="line">boolean saveOrUpdateBatch(Collection&lt;T&gt; entityList);</span><br><span class="line">// 批量修改插入</span><br><span class="line">boolean saveOrUpdateBatch(Collection&lt;T&gt; entityList, int batchSize);</span><br></pre></td></tr></table></figure><ul><li>参数说明</li></ul><table><thead><tr><th>类型</th><th>参数名</th><th>描述</th></tr></thead><tbody><tr><td>T</td><td>entity</td><td>实体对象</td></tr><tr><td>Wrapper<t></t></td><td>updateWrapper</td><td>实体对象封装操作类UpdateWrapper</td></tr><tr><td>Collection<t></t></td><td>entityList</td><td>实体对象集合</td></tr><tr><td>int</td><td>batchSize</td><td>插入批次数量</td></tr></tbody></table><h6 id="2-1-3-Remove"><a href="#2-1-3-Remove" class="headerlink" title="2.1.3 Remove"></a>2.1.3 Remove</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">// 根据 entity 条件，删除记录</span><br><span class="line">boolean remove(Wrapper&lt;T&gt; queryWrapper);</span><br><span class="line">// 根据 ID 删除</span><br><span class="line">boolean removeById(Serializable id);</span><br><span class="line">// 根据 columnMap 条件，删除记录</span><br><span class="line">boolean removeByMap(Map&lt;String, Object&gt; columnMap);</span><br><span class="line">// 删除（根据ID 批量删除）</span><br><span class="line">boolean removeByIds(Collection&lt;? extends Serializable&gt; idList);</span><br></pre></td></tr></table></figure><ul><li>参数说明</li></ul><table><thead><tr><th>类型</th><th>参数名</th><th>描述</th></tr></thead><tbody><tr><td>Wrapper<t></t></td><td>queryWrapper</td><td>实体包装类QueryWrapper</td></tr><tr><td>Serializable</td><td>id</td><td>主键ID</td></tr><tr><td>Map&lt;String, Object&gt;</td><td>columnMap</td><td>表字段 map 对象</td></tr><tr><td>Collection&lt;? extends Serializable&gt;</td><td>idList</td><td>主键ID列表</td></tr></tbody></table><h6 id="2-1-4-Update"><a href="#2-1-4-Update" class="headerlink" title="2.1.4 Update"></a>2.1.4 Update</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">// 根据 UpdateWrapper 条件，更新记录 需要设置sqlset</span><br><span class="line">boolean update(Wrapper&lt;T&gt; updateWrapper);</span><br><span class="line">// 根据 whereEntity 条件，更新记录</span><br><span class="line">boolean update(T entity, Wrapper&lt;T&gt; updateWrapper);</span><br><span class="line">// 根据 ID 选择修改</span><br><span class="line">boolean updateById(T entity);</span><br><span class="line">// 根据ID 批量更新</span><br><span class="line">boolean updateBatchById(Collection&lt;T&gt; entityList);</span><br><span class="line">// 根据ID 批量更新</span><br><span class="line">boolean updateBatchById(Collection&lt;T&gt; entityList, int batchSize);</span><br></pre></td></tr></table></figure><ul><li>参数说明</li></ul><table><thead><tr><th>类型</th><th>参数名</th><th>描述</th></tr></thead><tbody><tr><td>Wrapper<t></t></td><td>updateWrapper</td><td>实体对象封装操作类UpdateWrapper</td></tr><tr><td>T</td><td>entity</td><td>实体对象</td></tr><tr><td>Collection<t></t></td><td>entityList</td><td>实体对象集合</td></tr><tr><td>int</td><td>batchSize</td><td>更新批次数量</td></tr></tbody></table><h6 id="2-1-5-Get"><a href="#2-1-5-Get" class="headerlink" title="2.1.5 Get"></a>2.1.5 Get</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">// 根据 ID 查询</span><br><span class="line">T getById(Serializable id);</span><br><span class="line">// 根据 Wrapper，查询一条记录。结果集，如果是多个会抛出异常，随机取一条加上限制条件 wrapper.last(&quot;LIMIT 1&quot;)</span><br><span class="line">T getOne(Wrapper&lt;T&gt; queryWrapper);</span><br><span class="line">// 根据 Wrapper，查询一条记录</span><br><span class="line">T getOne(Wrapper&lt;T&gt; queryWrapper, boolean throwEx);</span><br><span class="line">// 根据 Wrapper，查询一条记录</span><br><span class="line">Map&lt;String, Object&gt; getMap(Wrapper&lt;T&gt; queryWrapper);</span><br><span class="line">// 根据 Wrapper，查询一条记录</span><br><span class="line">&lt;V&gt; V getObj(Wrapper&lt;T&gt; queryWrapper, Function&lt;? super Object, V&gt; mapper);</span><br></pre></td></tr></table></figure><ul><li>参数说明</li></ul><table><thead><tr><th>类型</th><th>参数名</th><th>描述</th></tr></thead><tbody><tr><td>Serializable</td><td>id</td><td>主键Id</td></tr><tr><td>Wrapper<t></t></td><td>queryWrapper</td><td>实体对象封装操作类QueryWrapper</td></tr><tr><td>boolean</td><td>throwEx</td><td>有多个result是否抛出异常</td></tr><tr><td>T</td><td>entity</td><td>实体对象</td></tr><tr><td>Function&lt;? super Object,V&gt;</td><td>mapper</td><td>转换函数</td></tr></tbody></table><h6 id="2-1-6-List"><a href="#2-1-6-List" class="headerlink" title="2.1.6 List"></a>2.1.6 List</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">//查询所有</span><br><span class="line">List&lt;T&gt; list();</span><br><span class="line">// 查询列表</span><br><span class="line">List&lt;T&gt; list(Wrapper&lt;T&gt; queryWrapper);</span><br><span class="line">// 查询（根据ID 批量查询）</span><br><span class="line">Collection&lt;T&gt; listByIds(Collection&lt;? extends Serializable&gt; idList);</span><br><span class="line">// 查询（根据 columnMap 条件）</span><br><span class="line">Collection&lt;T&gt; listByMap(Map&lt;String, Object&gt; columnMap);</span><br><span class="line">// 查询所有列表</span><br><span class="line">List&lt;Map&lt;String, Object&gt;&gt; listMaps();</span><br><span class="line">// 查询列表</span><br><span class="line">List&lt;Map&lt;String, Object&gt;&gt; listMaps(Wrapper&lt;T&gt; queryWrapper);</span><br><span class="line">// 查询全部记录</span><br><span class="line">List&lt;Object&gt; listObjs();</span><br><span class="line">// 查询全部记录</span><br><span class="line">&lt;V&gt; List&lt;V&gt; listObjs(Function&lt;? super Object, V&gt; mapper);</span><br><span class="line">// 根据 Wrapper 条件，查询全部记录</span><br><span class="line">List&lt;Object&gt; listObjs(Wrapper&lt;T&gt; queryWrapper);</span><br><span class="line">// 根据 Wrapper 条件，查询全部记录</span><br><span class="line">&lt;V&gt; List&lt;V&gt; listObjs(Wrapper&lt;T&gt; queryWrapper, Function&lt;? super Object, V&gt; mapper);</span><br></pre></td></tr></table></figure><ul><li>参数说明</li></ul><table><thead><tr><th>类型</th><th>参数名</th><th>描述</th></tr></thead><tbody><tr><td>Wrapper<t></t></td><td>queryWrapper</td><td>实体对象封装操作类QueryWrapper</td></tr><tr><td>Collection&lt;? extends Serializable</td><td>idList</td><td>主键ID列表</td></tr><tr><td>Map&lt;? String,Object&gt;</td><td>columnMap</td><td>表字段map对象</td></tr><tr><td>Function&lt;? super Object&gt;</td><td>mapper</td><td>转换函数</td></tr></tbody></table><h6 id="2-1-7-Page"><a href="#2-1-7-Page" class="headerlink" title="2.1.7 Page"></a>2.1.7 Page</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">// 无条件翻页查询</span><br><span class="line">IPage&lt;T&gt; page(IPage&lt;T&gt; page);</span><br><span class="line">// 翻页查询</span><br><span class="line">IPage&lt;T&gt; page(IPage&lt;T&gt; page, Wrapper&lt;T&gt; queryWrapper);</span><br><span class="line">// 无条件翻页查询</span><br><span class="line">IPage&lt;Map&lt;String, Object&gt;&gt; pageMaps(IPage&lt;T&gt; page);</span><br><span class="line">// 翻页查询</span><br><span class="line">IPage&lt;Map&lt;String, Object&gt;&gt; pageMaps(IPage&lt;T&gt; page, Wrapper&lt;T&gt; queryWrapper);</span><br></pre></td></tr></table></figure><ul><li>参数说明</li></ul><table><thead><tr><th>类型</th><th>参数名</th><th>描述</th></tr></thead><tbody><tr><td>IPage<t></t></td><td>page</td><td>翻页对象</td></tr><tr><td>Wrapper<t></t></td><td>queryWrapper</td><td>实体对象封装操作类QueryWrapper</td></tr></tbody></table><h6 id="2-1-8-Count"><a href="#2-1-8-Count" class="headerlink" title="2.1.8 Count"></a>2.1.8 Count</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">// 查询总记录数</span><br><span class="line">int count();</span><br><span class="line">// 根据 Wrapper 条件，查询总记录数</span><br><span class="line">int count(Wrapper&lt;T&gt; queryWrapper);</span><br></pre></td></tr></table></figure><ul><li>参数说明</li></ul><table><thead><tr><th>类型</th><th>参数名</th><th>描述</th></tr></thead><tbody><tr><td>Wrapper<t></t></td><td>queryWrapper</td><td>实体对象封装操作类QueryWrapper</td></tr></tbody></table><h6 id="2-1-9-Chain"><a href="#2-1-9-Chain" class="headerlink" title="2.1.9  Chain"></a>2.1.9  Chain</h6><ul><li>query</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">// 链式查询 普通</span><br><span class="line">QueryChainWrapper&lt;T&gt; query();</span><br><span class="line">// 链式查询 lambda 式。注意：不支持 Kotlin</span><br><span class="line">LambdaQueryChainWrapper&lt;T&gt; lambdaQuery(); </span><br><span class="line"></span><br><span class="line">// 示例：</span><br><span class="line">query().eq(&quot;column&quot;, value).one();</span><br><span class="line">lambdaQuery().eq(Entity::getId, value).list();</span><br></pre></td></tr></table></figure><ul><li>update</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">// 链式更改 普通</span><br><span class="line">UpdateChainWrapper&lt;T&gt; update();</span><br><span class="line">// 链式更改 lambda 式。注意：不支持 Kotlin </span><br><span class="line">LambdaUpdateChainWrapper&lt;T&gt; lambdaUpdate();</span><br><span class="line"></span><br><span class="line">// 示例：</span><br><span class="line">update().eq(&quot;column&quot;, value).remove();</span><br><span class="line">lambdaUpdate().eq(Entity::getId, value).update(entity);</span><br></pre></td></tr></table></figure><h5 id="2-2-Mapper-CRUD接口"><a href="#2-2-Mapper-CRUD接口" class="headerlink" title="2.2 Mapper CRUD接口"></a>2.2 Mapper CRUD接口</h5><blockquote><p>说明</p><ul><li>通用 CRUD 封装BaseMapper接口，为 Mybatis-Plus 启动时自动解析实体表关系映射转换为 Mybatis 内部对象注入容器</li><li>泛型T为任意实体对象</li><li>参数 Serializable 为任意类型主键 Mybatis-Plus 不推荐使用复合主键约定每一张表都有自己的唯一 id 主键</li><li>对象Wrapper为条件构造器</li></ul></blockquote><h6 id="2-2-1-Insert"><a href="#2-2-1-Insert" class="headerlink" title="2.2.1 Insert"></a>2.2.1 Insert</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">// 插入一条记录</span><br><span class="line">int insert(T entity);</span><br></pre></td></tr></table></figure><ul><li>参数说明</li></ul><table><thead><tr><th>类型</th><th>参数名</th><th>描述</th></tr></thead><tbody><tr><td>T</td><td>entity</td><td>实体对象</td></tr></tbody></table><h6 id="2-2-2-Delete"><a href="#2-2-2-Delete" class="headerlink" title="2.2.2 Delete"></a>2.2.2 Delete</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">// 根据 entity 条件，删除记录</span><br><span class="line">int delete(@Param(Constants.WRAPPER) Wrapper&lt;T&gt; wrapper);</span><br><span class="line">// 删除（根据ID 批量删除）</span><br><span class="line">int deleteBatchIds(@Param(Constants.COLLECTION) Collection&lt;? extends Serializable&gt; idList);</span><br><span class="line">// 根据 ID 删除</span><br><span class="line">int deleteById(Serializable id);</span><br><span class="line">// 根据 columnMap 条件，删除记录</span><br><span class="line">int deleteByMap(@Param(Constants.COLUMN_MAP) Map&lt;String, Object&gt; columnMap);</span><br></pre></td></tr></table></figure><ul><li>参数说明</li></ul><table><thead><tr><th>类型</th><th>参数名</th><th>描述</th></tr></thead><tbody><tr><td>TWrapper &lt; T &gt;</td><td>wrapper</td><td>实体对象封装操作类可以为 null</td></tr><tr><td>Collection &lt;?&gt;</td><td>idList</td><td>主键ID列表不能为null以及 empty</td></tr><tr><td>Serializable</td><td>id</td><td>主键ID</td></tr><tr><td>Map &lt; String, Object&gt;</td><td>columnMap</td><td>表字段 map 对</td></tr></tbody></table><h6 id="2-2-3-Update"><a href="#2-2-3-Update" class="headerlink" title="2.2.3 Update"></a>2.2.3 Update</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">// 根据 whereEntity 条件，更新记录</span><br><span class="line">int update(@Param(Constants.ENTITY) T entity, @Param(Constants.WRAPPER) Wrapper&lt;T&gt; updateWrapper);</span><br><span class="line">// 根据 ID 修改</span><br><span class="line">int updateById(@Param(Constants.ENTITY) T entity);</span><br></pre></td></tr></table></figure><ul><li>参数说明</li></ul><table><thead><tr><th>类型</th><th>参数名</th><th>描述</th></tr></thead><tbody><tr><td>T</td><td>entity</td><td>实体对象（set条件值，可为null）</td></tr><tr><td>Wrapper<t></t></td><td>updateWrapper</td><td>实体对象封装操作类（可以为 null,里面的 entity 用于生成 where 语句）</td></tr></tbody></table><h6 id="2-2-4-Select"><a href="#2-2-4-Select" class="headerlink" title="2.2.4 Select"></a>2.2.4 Select</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">// 根据 ID 查询</span><br><span class="line">T selectById(Serializable id);</span><br><span class="line">// 根据 entity 条件，查询一条记录</span><br><span class="line">T selectOne(@Param(Constants.WRAPPER) Wrapper&lt;T&gt; queryWrapper);</span><br><span class="line"></span><br><span class="line">// 查询（根据ID 批量查询）</span><br><span class="line">List&lt;T&gt; selectBatchIds(@Param(Constants.COLLECTION) Collection&lt;? extends Serializable&gt; idList);</span><br><span class="line">// 根据 entity 条件，查询全部记录</span><br><span class="line">List&lt;T&gt; selectList(@Param(Constants.WRAPPER) Wrapper&lt;T&gt; queryWrapper);</span><br><span class="line">// 查询（根据 columnMap 条件）</span><br><span class="line">List&lt;T&gt; selectByMap(@Param(Constants.COLUMN_MAP) Map&lt;String, Object&gt; columnMap);</span><br><span class="line">// 根据 Wrapper 条件，查询全部记录</span><br><span class="line">List&lt;Map&lt;String, Object&gt;&gt; selectMaps(@Param(Constants.WRAPPER) Wrapper&lt;T&gt; queryWrapper);</span><br><span class="line">// 根据 Wrapper 条件，查询全部记录。注意： 只返回第一个字段的值</span><br><span class="line">List&lt;Object&gt; selectObjs(@Param(Constants.WRAPPER) Wrapper&lt;T&gt; queryWrapper);</span><br><span class="line"></span><br><span class="line">// 根据 entity 条件，查询全部记录（并翻页）</span><br><span class="line">IPage&lt;T&gt; selectPage(IPage&lt;T&gt; page, @Param(Constants.WRAPPER) Wrapper&lt;T&gt; queryWrapper);</span><br><span class="line">// 根据 Wrapper 条件，查询全部记录（并翻页）</span><br><span class="line">IPage&lt;Map&lt;String, Object&gt;&gt; selectMapsPage(IPage&lt;T&gt; page, @Param(Constants.WRAPPER) Wrapper&lt;T&gt; queryWrapper);</span><br><span class="line">// 根据 Wrapper 条件，查询总记录数</span><br><span class="line">Integer selectCount(@Param(Constants.WRAPPER) Wrapper&lt;T&gt; queryWrapper);</span><br></pre></td></tr></table></figure><ul><li>参数说明</li></ul><table><thead><tr><th>类型</th><th>参数名</th><th>描述</th></tr></thead><tbody><tr><td>Serilizable</td><td>id</td><td>主键Id</td></tr><tr><td>Wrapper<t></t></td><td>queryWrapper</td><td>实体对象封装操作类（可以为null）</td></tr><tr><td>Collection&lt;? extends Serializable&gt;</td><td>idList</td><td>主键ID列表不能为null以及empty</td></tr><tr><td>Map&lt;String,Object&gt;</td><td>columnMap</td><td>表字段map对象</td></tr><tr><td>IPage<t></t></td><td>page</td><td>分页查询条件（可以为 RowBounds.DEFAULT）</td></tr></tbody></table><h6 id="2-2-5-mapper层-选装件"><a href="#2-2-5-mapper层-选装件" class="headerlink" title="2.2.5 mapper层 选装件"></a>2.2.5 mapper层 选装件</h6><blockquote><p>说明：</p><blockquote><p>选装件位于 com.baomidou.mybatisplus.extension.injector.methods.additional 包下需要配合Sql 注入器使用</p></blockquote></blockquote><ul><li>AlwayUpdateSomeColumnById</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">int alwaysUpdateSomeColumnById(T entity);</span><br></pre></td></tr></table></figure><ul><li><p>insertBatchSomeColumn</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">int insertBatchSomeColumn(List&lt;T&gt; entityList);</span><br></pre></td></tr></table></figure></li><li><p>deleteByIdWithFill</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">int deleteByIdWithFill(T entity);</span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Mybatis-Plus&quot;&gt;&lt;a href=&quot;#Mybatis-Plus&quot; class=&quot;headerlink&quot; title=&quot;  Mybatis-Plus&quot;&gt;&lt;/a&gt;&lt;img src=&quot;https://mp.baomidou.com/img/logo.png&quot; 
      
    
    </summary>
    
    
      <category term="笔记" scheme="http://luoyd.cn/categories/%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="持久层框架" scheme="http://luoyd.cn/tags/%E6%8C%81%E4%B9%85%E5%B1%82%E6%A1%86%E6%9E%B6/"/>
    
      <category term="Mybatis-plus" scheme="http://luoyd.cn/tags/Mybatis-plus/"/>
    
      <category term="笔记" scheme="http://luoyd.cn/tags/%E7%AC%94%E8%AE%B0/"/>
    
      <category term="springboot" scheme="http://luoyd.cn/tags/springboot/"/>
    
  </entry>
  
  <entry>
    <title>学生信息管理系统SQL语句</title>
    <link href="http://luoyd.cn/2019/11/13/%E5%AD%A6%E7%94%9F%E4%BF%A1%E6%81%AF%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9Fsql/"/>
    <id>http://luoyd.cn/2019/11/13/学生信息管理系统sql/</id>
    <published>2019-11-13T07:02:53.234Z</published>
    <updated>2019-11-13T07:18:58.023Z</updated>
    
    <content type="html"><![CDATA[<ul><li><p>student(学号#,姓名,性别,年龄) </p></li><li><p>course(课程号#，课程名，教师号#) </p></li><li><p>score(学号#，课程号#，成绩) </p></li><li><p>teacher(教师号#，教师名)</p></li><li><p>1.查询“001”课程比“002”课程成绩高的所有学生的学号 </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">select a.stuNo from score a,score b  </span><br><span class="line">where a.cNo=&apos;c001&apos; and b.cNo=&apos;c002&apos; and a.stuNo=b.stuNo and a.score&gt;b.score</span><br></pre></td></tr></table></figure></li><li><p>2.查询平均成绩大于60分的同学的学号和平均成绩  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">select stuNo,avg(score)from score   </span><br><span class="line">group by stuNo  </span><br><span class="line">having avg(score)&gt;60</span><br></pre></td></tr></table></figure></li><li><p>3.查询所有同学的学号、姓名、选课数、总成绩  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">select a.stuNo,a.stuName,count(cNo),sum(score) from student a,score b  </span><br><span class="line">where a.stuNo=b.stuNo  </span><br><span class="line">group by a.stuNo,a.stuName</span><br></pre></td></tr></table></figure></li><li><p>4.查询姓“赵”的老师的个数  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">select count(tName),tName from teacher  </span><br><span class="line">where tName like &apos;赵%&apos;  </span><br><span class="line">group by tName</span><br></pre></td></tr></table></figure></li><li><p>5.查询没学过“某某”老师课的同学的学号、姓名  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">select stuNo,stuName from student  </span><br><span class="line">where stuNo not in   </span><br><span class="line">(select a.stuNo from student a,score b where a.stuNo=b.stuNo and cNo in   </span><br><span class="line">(select d.cNo from teacher c,course d where c.tNo=d.tNo and c.tName=&apos;钱市保&apos;))</span><br></pre></td></tr></table></figure></li><li><p>6.查询学过“001”并且也学过编号“002”课程的同学的学号、姓名；  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">select a.stuNo,a.stuName from student a,score b,score c  </span><br><span class="line">where a.stuNo=b.stuNo and b.stuNo=c.stuNo and b.cNo=&apos;c001&apos; and c.cNo=&apos;c002&apos;</span><br></pre></td></tr></table></figure></li><li><p>7.查询学过“某某”老师所教的所有课的同学的学号、姓名  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">select stuNo,stuName from student  </span><br><span class="line">where stuNo in (select stuNo from score a,course b,teacher c  </span><br><span class="line">where a.cNo=b.cNo and b.tNo=c.tNo and c.tName=&apos;钱市保&apos;  </span><br><span class="line">group by stuNo               </span><br><span class="line">having count(a.cNo)&gt;=(select count(cNo) from course d,teacher e  </span><br><span class="line">where d.tNo=e.tNo and e.tName=&apos;钱市保&apos;))</span><br></pre></td></tr></table></figure></li><li><p>老师所教课程为一门课  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">select stuNo,stuName from student  </span><br><span class="line">where stuNo in (select a.stuNo from student a,score b where a.stuNo=b.stuNo and b.cNo in   </span><br><span class="line">(select cNo from teacher c,course d where c.tNo=d.tNo and c.tName=&apos;钱市保&apos;))</span><br></pre></td></tr></table></figure></li><li><p>8.查询课程编号“002”的成绩比课程编号“001”课程低的所有同学的学号、姓名  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">select stuNo,stuName from student  </span><br><span class="line">where stuNo in   </span><br><span class="line">(select a.stuNo from score a,score b  </span><br><span class="line">where a.cNo=&apos;c001&apos; and b.cNo=&apos;c002&apos; and a.stuNo=b.stuNo and a.score&gt;b.score)</span><br></pre></td></tr></table></figure></li><li><p>9.查询所有课程成绩小于60分的同学的学号、姓名  </p></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">select stuNo,stuName from student   </span><br><span class="line">where stuNo in (select stuNo from score   </span><br><span class="line">where score&lt;60  </span><br><span class="line">group by stuNo   </span><br><span class="line">having count(cNo)=(select count(cNo) from course))</span><br></pre></td></tr></table></figure><ul><li><p>10.查询没有学全所有课的同学的学号、姓名  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">select b.stuNo,a.stuName,count(b.cNo) from student a,score b  </span><br><span class="line">where a.stuNo=b.stuNo  </span><br><span class="line">group by b.stuNo,a.stuName  </span><br><span class="line">having count(b.cNo)&lt;(select count(cNo) from course)</span><br></pre></td></tr></table></figure></li><li><p>11.查询至少有一门课与学号为“1”的同学所学相同的同学的学号和姓名  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">select distinct a.stuNo,stuName from student a,score b  </span><br><span class="line">where a.stuNo=b.stuNo and cNo in (select cNo from score   </span><br><span class="line">where stuNo=&apos;001&apos;)</span><br></pre></td></tr></table></figure></li><li><p>12.查询至少学过学号为“001”同学一门课的其他同学学号和姓名  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&amp;&amp;&amp; select distinct a.stuNo,stuName from student a,score b  </span><br><span class="line">where a.stuNo=b.stuNo and cNo all join (select cNo from score   </span><br><span class="line">where stuNo=&apos;001&apos;)</span><br></pre></td></tr></table></figure></li><li><p>13.把“SC”表中“某某”老师教的课的成绩都更改为此课程的平均成绩  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">update score set score=savg  </span><br><span class="line">from score d,(select avg(score) as savg,a.cNo from score a,course b,teacher c  </span><br><span class="line">where a.cNo=b.cNo and b.tNo=c.tNo and tName=&apos;钱市保&apos;  </span><br><span class="line">group by a.cNo) e  </span><br><span class="line">where d.cNo=e.cNo</span><br></pre></td></tr></table></figure></li><li><p>老师所教课程为一门课  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">update score   </span><br><span class="line">set score=(select avg(score) from score  </span><br><span class="line">group by cNo  </span><br><span class="line">having cNo=(select a.cNo from course a,teacher b where a.tNo=b.tNo and b.tName=&apos;钱市保&apos;))  </span><br><span class="line">where cNo=(select a.cNo from course a,teacher b where a.tNo=b.tNo and b.tName=&apos;钱市保&apos;)  </span><br><span class="line">select * from score</span><br></pre></td></tr></table></figure></li><li><p>14.查询和“001”号的同学学习的课程完全相同的其他同学学号和姓名  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">select stuNo from score   </span><br><span class="line">where cNo in (select cNo from score where stuNo=&apos;005&apos;)  </span><br><span class="line">group by stuNo  </span><br><span class="line">having count(cNo)=(select count(*) from score where stuNo=&apos;005&apos;)</span><br></pre></td></tr></table></figure></li><li><p>15.删除学习“某某”老师课的SC表记录  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">delete from score where cNo=(select cNo from course a,teacher b where a.tNo=b.tNo and b.tName=&apos;钱市保&apos;)  </span><br><span class="line">select * from score</span><br></pre></td></tr></table></figure></li><li><p>16.向SC表中插入一些记录，这些记录要求符合以下条件：没有上过编号“003”课程的同学学号、2号课的平均成绩  </p></li><li><p>17.按平均成绩从高到低显示所有学生的“C语言”、“sql”、“java”三门的课程成绩  </p></li><li><p>按如下形式显示： 学生ID,C语言,sql,JAVA,有效课程数,有效平均分  </p></li><li><p>18.查询各科成绩最高和最低的分：以如下形式显示：课程ID，最高分，最低分  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">select  cNo,max(score) as 最高分,min(score) as 最低分 from score  </span><br><span class="line">group by cNo</span><br></pre></td></tr></table></figure></li><li><p>19.按各科平均成绩从低到高和及格率的百分数从高到低顺序  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">select avg(c.score),count(a.score)/count(b.score) from score c,(select a.cNo,count(a.score) from score a  </span><br><span class="line">where a.score&lt;60  </span><br><span class="line">group by a.cNo) d,(select b.cNo,count(b.score) from score b  </span><br><span class="line">group by b.cNo) e  </span><br><span class="line">where d.cNo=e.cNo  </span><br><span class="line">group by c.cNo  </span><br><span class="line">order by avg(c.score) desc  </span><br><span class="line">(select a.cNo,count(a.score) from score a  </span><br><span class="line">where a.score&lt;60  </span><br><span class="line">group by a.cNo) d  </span><br><span class="line">(select b.cNo,count(b.score) from score b  </span><br><span class="line">group by b.cNo) e</span><br></pre></td></tr></table></figure></li><li><p>20.查询如下课程平均成绩和及格率的百分数(用”1行”显示): C语言（001），数据结构（002），JAVA（003），离散数学（004）   </p></li><li><p>21.查询不同老师所教不同课程平均分从高到低显示   </p></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">select tNo,a.cNo,avg(score) from course a,score b  </span><br><span class="line">where a.cNo=b.cNo  </span><br><span class="line">group by tNo,a.cNo  </span><br><span class="line">order by avg(score) desc</span><br></pre></td></tr></table></figure><ul><li><p>22.查询如下课程成绩第 3 名到第 6 名的学生成绩单：C语言（001），数据结构（002），JAVA（003），离散数学（004）   </p></li><li><p>[学生ID],[学生姓名],C语言,数据结构,JAVA,离散数学,平均成绩  </p></li><li><p>23.统计列印各科成绩,各分数段人数:课程ID,课程名称,[100-85],[85-70],[70-60],[ &lt;60]  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">select distinct e.cNo,count(a.stuNo) as &apos;100-85&apos;,count(b.stuNo) as &apos;85-70&apos;,count(c.stuNo) as &apos;70-60&apos;,count(d.stuNo) as &apos;&lt;60&apos; from score a,score b,score c,score d,score e  </span><br><span class="line">where a.cNo in (select cNo from course) and a.score between 85 and 100 and b.cNo in (select cNo from course) and b.score between 71 and 84 and c.cNo in (select cNo from course) and  c.score between 60 and 70 and d.cNo in (select cNo from course) and d.score&lt;60  </span><br><span class="line">group by e.cNo,a.stuNo,b.stuNo,c.stuNo,d.stuNo  </span><br><span class="line">having a.stuNo&lt;&gt;b.stuNo and a.stuNo&lt;&gt;c.stuNo and a.stuNo&lt;&gt;d.stuNo and b.stuNo&lt;&gt;c.stuNo and b.stuNo&lt;&gt;d.stuNo and c.stuNo&lt;&gt;d.stuNo  </span><br><span class="line">select cNo,count(stuNo) from score  </span><br><span class="line">where score between 70 and 100 and cNo=&apos;c001&apos;  </span><br><span class="line">group by cNo</span><br></pre></td></tr></table></figure></li><li><p>24.查询学生平均成绩及其名次  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">select stuNo,avg(score) from score   </span><br><span class="line">group by stuNo  </span><br><span class="line">order by avg(score) desc</span><br></pre></td></tr></table></figure></li><li><p>25.查询各科成绩前三名的记录:(不考虑成绩并列情况)   </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">select a.stuNo,a.cNo,a.score  </span><br><span class="line">from score a  </span><br><span class="line">where a.score in (select top 3 score from score b  </span><br><span class="line">where a.cNo=b.cNo  </span><br><span class="line">order by score)  </span><br><span class="line">order by a.cNo</span><br></pre></td></tr></table></figure></li><li><p>26.查询每门课程被选修的学生数   </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">select b.cNo ,count(stuNo) from score a right join course  b  </span><br><span class="line">on a.cNo=b.cNo  </span><br><span class="line">group by b.cNo</span><br></pre></td></tr></table></figure></li><li><p>27.查询出只选修了一门课程的全部学生的学号和姓名  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">select b.stuNo,a.stuName from student a,score b  </span><br><span class="line">where a.stuNo=b.stuNo   </span><br><span class="line">group by b.stuNo,a.stuName  </span><br><span class="line">having count(b.cNo)=1</span><br></pre></td></tr></table></figure></li><li><p>28.查询男生、女生人数  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">select stuSex,count(stuSex) from student  </span><br><span class="line">group by stuSex</span><br></pre></td></tr></table></figure></li><li><p>29.查询姓‘zhao’的学生名单  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">select * from student   </span><br><span class="line">where stuName like &apos;赵%&apos;</span><br></pre></td></tr></table></figure></li><li><p>30.查询同名同性学生名单，并统计同名人数  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">select a.stuNo,a.stuName,count(a.stuNo) from student a,student b  </span><br><span class="line">where a.stuName=b.stuName and a.stuSex=b.stuSex and a.stuNo&lt;&gt;b.stuNo  </span><br><span class="line">group by a.stuNo,a.stuName</span><br></pre></td></tr></table></figure></li><li><p>31.1981年出生的学生名单(注：Student表中Sage列的类型是datetime  </p></li><li><p>32.、查询每门课程的平均成绩，结果按平均成绩升序排列，平均成绩相同时，按课程号降序排列   </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">select cNo,avg(score) from score  </span><br><span class="line">group by cNo  </span><br><span class="line">order by avg(score) asc,cNo</span><br></pre></td></tr></table></figure></li><li><p>33.查询平均成绩大于70的所有学生的学号、姓名和平均成绩  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">select b.stuNo,a.stuName,avg(score) from student a,score b  </span><br><span class="line">where a.stuNo=b.stuNo  </span><br><span class="line">group by b.stuNo,a.stuName  </span><br><span class="line">having avg(score)&gt;70</span><br></pre></td></tr></table></figure></li><li><p>34.查询课程名称为“java”，且分数低于70的学生姓名和分数  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">select a.stuName,b.score from student a,score b  </span><br><span class="line">where a.stuNo=b.stuNo and score&lt;70 and b.cNo=(select cNo from course where cName=&apos;java&apos;)</span><br></pre></td></tr></table></figure></li><li><p>35.查询所有学生的选课情况  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">select a.stuNo,c.cNo from student a,score b,course c  </span><br><span class="line">where a.stuNo=b.stuNo and b.cNo=c.cNo  </span><br><span class="line">order by a.stuNo  </span><br><span class="line">select a.stuNo,cNo from student a left join (select a.stuNo,c.cNo from student a,score b,course c  </span><br><span class="line">where a.stuNo=b.stuNo and b.cNo=c.cNo) d  </span><br><span class="line">on a.stuNo=d.stuNo  </span><br><span class="line">order by a.stuNo</span><br></pre></td></tr></table></figure></li><li><p>36.查询任何一门课程成绩在70分以上的姓名、课程名称和分数  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">select a.stuName,b.cNo,score from student a,score b  </span><br><span class="line">where score&gt;70 and a.stuNo=b.stuNo</span><br></pre></td></tr></table></figure></li><li><p>37.查询不及格的课程，并按课程号从大到小排列  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">select cNo,score from score  </span><br><span class="line">where score&lt;60  </span><br><span class="line">order by cNo</span><br></pre></td></tr></table></figure></li><li><p>38.查询课程编号为003且课程成绩在60分以上的学生的学号和姓名  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">select b.stuNo,a.stuName from student a,score b  </span><br><span class="line">where b.cNo=&apos;c003&apos; and score&gt;60 and a.stuNo=b.stuNo</span><br></pre></td></tr></table></figure></li><li><p>39.求选了课程的学生人数  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select count(a.stuNo) from (select distinct stuNo from score) a</span><br></pre></td></tr></table></figure></li><li><p>40.查询选修“赵”老师所授课程的学生中，成绩最高的学生姓名及其成绩  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">select b.stuNo,a.stuName,max(score) from student a,score b  </span><br><span class="line">where a.stuNo=b.stuNo and b.cNo in (select a.cNo from course a,teacher b where a.tNo=b.tNo and b.tName=&apos;钱市保&apos;)  </span><br><span class="line">group by b.stuNo,a.stuName,b.cNo  </span><br><span class="line">having b.cNo in (select a.cNo from course a,teacher b where a.tNo=b.tNo and b.tName=&apos;钱市保&apos;)</span><br></pre></td></tr></table></figure></li><li><p>41.查询各个课程及相应的选修人数  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">select cNo,count(stuNo) from score  </span><br><span class="line">group by cNo  </span><br><span class="line">select b.cNo ,count(stuNo) from score a right join course  b  </span><br><span class="line">on a.cNo=b.cNo  </span><br><span class="line">group by b.cNo</span><br></pre></td></tr></table></figure></li><li><p>42.查询不同课程成绩相同的学生的学号、课程号、学生成绩  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">select a.stuNo,a.cNo,a.score from score a,score b   </span><br><span class="line">where a.stuNo=b.stuNo and a.score=b.score and a.cNo&lt;&gt;b.cNo</span><br></pre></td></tr></table></figure></li><li><ol start="43"><li>查询每门功成绩最好的前两名  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">select a.stuNo,a.cNo,a.score  </span><br><span class="line">from score a  </span><br><span class="line">where score in(select top 2 score from score b  </span><br><span class="line">where a.cNo=b.cNo  </span><br><span class="line">order by score desc)  </span><br><span class="line">order by a.cNo</span><br></pre></td></tr></table></figure></li></ol></li><li><p>44.统计每门课程的学生选修人数（超过2人的课程才统计）。要求输出课程号和选修人数，查询结果按人数降序排列,若人数相同，按课程号升序排列  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">select cNo,count(stuNo) 课程数 from score  </span><br><span class="line">group by cNo  </span><br><span class="line">having count(stuNo)&gt;2  </span><br><span class="line">order by count(stuNo) desc,cNo</span><br></pre></td></tr></table></figure></li><li><p>45.检索至少选修两门课程的学生学号  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">select stuNo from score  </span><br><span class="line">group by stuNo  </span><br><span class="line">having count(cNo)&gt;=2</span><br></pre></td></tr></table></figure></li><li><p>46.查询全部学生都选修的课程的课程号和课程名  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">select a.cNo,b.cName from score a,course b  </span><br><span class="line">where a.cNo=b.cNo  </span><br><span class="line">group by a.cNo,b.cName  </span><br><span class="line">having count(a.stuNo)=(select count(stuNo) from student)  </span><br><span class="line">select a.cNo,b.cName from score a,course b  </span><br><span class="line">group by a.cNo,b.cName,b.cNo  </span><br><span class="line">having a.cNo=b.cNo and count(a.stuNo)=(select count(stuNo) from student)</span><br></pre></td></tr></table></figure></li><li><p>47.查询没学过“钱”老师讲授的任一门课程的学生姓名  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">select stuNo,stuName from student  </span><br><span class="line">where stuNo not in (select stuNo from score a,course b,teacher c  </span><br><span class="line">where a.cNo=b.cNo and b.tNo=c.tNo and c.tName=&apos;钱市保&apos;  </span><br><span class="line">group by stuNo  </span><br><span class="line">having count(a.cNo)&lt;=(select count(cNo) from course d,teacher e  </span><br><span class="line">where d.tNo=e.tNo and e.tName=&apos;钱市保&apos;))  </span><br><span class="line">select stuNo,stuName from student  </span><br><span class="line">where stuNo not in  </span><br><span class="line">(select stuNo from score where cNo in  </span><br><span class="line">(select cNo from teacher c,course d where c.tNo=d.tNo and c.tName=&apos;钱市保&apos;))</span><br></pre></td></tr></table></figure></li><li><p>48.查询两门以上不及格课程的同学的学号及其平均成绩  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">select stuNo,avg(score) from score  </span><br><span class="line">where score&lt;60  </span><br><span class="line">group by stuNo  </span><br><span class="line">having count(cNo)&gt;2</span><br></pre></td></tr></table></figure></li><li><p>49.检索“004”课程分数小于60，按分数降序排列的同学学号   </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">select stuNo from score   </span><br><span class="line">where score&lt;60 and cNo=&apos;c004&apos;  </span><br><span class="line">order by score desc</span><br></pre></td></tr></table></figure></li><li><p>50.删除“2”同学的“001”课程的成绩  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">delete from score where stuNo=&apos;002&apos; and cNo=&apos;c001&apos;</span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ul&gt;
&lt;li&gt;&lt;p&gt;student(学号#,姓名,性别,年龄) &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;course(课程号#，课程名，教师号#) &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;score(学号#，课程号#，成绩) &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;teacher(教师号
      
    
    </summary>
    
    
      <category term="笔记" scheme="http://luoyd.cn/categories/%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="悦读" scheme="http://luoyd.cn/tags/%E6%82%A6%E8%AF%BB/"/>
    
      <category term="笔记" scheme="http://luoyd.cn/tags/%E7%AC%94%E8%AE%B0/"/>
    
      <category term="MySQL" scheme="http://luoyd.cn/tags/MySQL/"/>
    
      <category term="学生管理系统" scheme="http://luoyd.cn/tags/%E5%AD%A6%E7%94%9F%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F/"/>
    
  </entry>
  
  <entry>
    <title>MySQL</title>
    <link href="http://luoyd.cn/2019/09/28/mysql/"/>
    <id>http://luoyd.cn/2019/09/28/mysql/</id>
    <published>2019-09-28T10:05:35.375Z</published>
    <updated>2019-12-24T04:49:11.472Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1、数据库基本操作"><a href="#1、数据库基本操作" class="headerlink" title="1、数据库基本操作"></a>1、数据库基本操作</h2><ul><li><p>选择要操作的数据库</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">world:数据库名</span><br><span class="line">use world;</span><br></pre></td></tr></table></figure></li><li><p>显示已存在的数据库列表</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">show databases;</span><br></pre></td></tr></table></figure></li><li><p>显示指定数据库下的表的信息</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">show tables;</span><br></pre></td></tr></table></figure></li><li><p>显示指定表的列的信息</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">world.country:数据库名.表名</span><br><span class="line">show columns from world.country;</span><br></pre></td></tr></table></figure></li><li><p>显示指定表的索引信息</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">world.country:数据库名.表名</span><br><span class="line">show index from world.country;</span><br></pre></td></tr></table></figure></li><li><p>显示指定数据库下的表的详细信息</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">world:数据库名</span><br><span class="line">show table status from world;</span><br></pre></td></tr></table></figure></li><li><p>显示指定数据库下的表名称以字母’c’开头的表的详细信息</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">world:数据库名</span><br><span class="line">show table status from world like &apos;c%&apos;;</span><br></pre></td></tr></table></figure></li><li><p>显示数据库表的结构，如：字段名，字段类型等</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">world.country:数据库名.表名</span><br><span class="line">describe world.country;</span><br></pre></td></tr></table></figure></li><li><p>查看创建表的SQL语句</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">demo.test：数据库名.表名</span><br><span class="line">show create table demo.test;</span><br></pre></td></tr></table></figure></li><li><p>查看创建存储过程的SQL语句</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">demo.test_proc：数据库名.存储过程名</span><br><span class="line">show create procedure demo.test_proc;</span><br></pre></td></tr></table></figure></li><li><p>查看创建视图的SQL语句</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">demo.test_view：数据库名.视图名</span><br><span class="line">show create view demo.test_view;</span><br></pre></td></tr></table></figure></li><li><p>查看创建函数的SQL语句</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">demo.test_fun：数据库名.函数名</span><br><span class="line">show create function demo.test_fun;</span><br></pre></td></tr></table></figure></li><li><p>查看当前用户的数据库权限</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">show grants;</span><br></pre></td></tr></table></figure></li><li><p>查看指定用户的数据库权限</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">admin@localhost:用户名@访问主机</span><br><span class="line">show grants for &apos;admin&apos;@&apos;localhost&apos;;</span><br></pre></td></tr></table></figure></li><li><p>查询数据库用户信息</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select * from mysql.user;</span><br></pre></td></tr></table></figure></li><li><p>获取服务器版本信息</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT VERSION();</span><br></pre></td></tr></table></figure></li><li><p>获取当前数据库名 (或者返回空)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT DATABASE();</span><br></pre></td></tr></table></figure></li><li><p>获取当前用户名</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT USER();</span><br></pre></td></tr></table></figure></li><li><p>获取服务器状态</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SHOW STATUS;</span><br></pre></td></tr></table></figure></li><li><p>获取服务器配置变量</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SHOW VARIABLES;</span><br></pre></td></tr></table></figure></li></ul><blockquote><blockquote><p>例如：</p></blockquote></blockquote><blockquote><blockquote><blockquote><p>查询自增长值的步长，即每次增加多少，默认为1。</p></blockquote></blockquote></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">show variables like &apos;%auto_increment%&apos;;</span><br></pre></td></tr></table></figure><blockquote><blockquote><blockquote><p>设置自增长值每次增加的数值，会影响所有数据表。</p></blockquote></blockquote></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">set auto_increment_increment=3;</span><br></pre></td></tr></table></figure><blockquote><blockquote><blockquote><p>设置自增长值的起始值，会影响所有数据表。</p></blockquote></blockquote></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">set auto_increment_offset=100;</span><br></pre></td></tr></table></figure><ul><li><p>mysql运行在安全模式下时，非主键条件下是无法执行update或者delete命令的</p></li><li><p>查看安全模式状态</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">show variables like &apos;%sql_safe_updates%&apos;;</span><br></pre></td></tr></table></figure></li><li><p>设置安全模式为关闭</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">set sql_safe_updates=off;</span><br></pre></td></tr></table></figure></li><li><p>获取最近一次向具有identity属性(即自增列)的表插入数据时对应的自增列的值，@@identity是系统定义的全局变量。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select @@identity;</span><br></pre></td></tr></table></figure></li><li><p>LAST_INSERT_ID函数将返回当前连接自增列最新的 insert or update 操作生成的第一个记录的ID。因为其基于Connection的，所以也是线程安全的。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select LAST_INSERT_ID();</span><br></pre></td></tr></table></figure></li></ul><h2 id="2、创建、删除用户及授权"><a href="#2、创建、删除用户及授权" class="headerlink" title="2、创建、删除用户及授权"></a>2、创建、删除用户及授权</h2><ul><li><p>创建一个新的用户，并设置登录密码</p><blockquote><p>test:用户名;localhost:本地主机访问(如果需要其他任意主机访问，请使用通配符’%’);123456:用户密码;</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">create user &apos;test&apos;@&apos;localhost&apos; identified by &apos;123456&apos;;</span><br></pre></td></tr></table></figure></li><li><p>创建一个新的用户，不指定登录密码，即不需要登录密码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">create user &apos;test01&apos;@&apos;localhost&apos;;</span><br></pre></td></tr></table></figure></li><li><p>删除指定的用户</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">drop user &apos;test01&apos;@&apos;localhost&apos;;</span><br></pre></td></tr></table></figure></li><li><p>修改用户名</p></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">test@localhost:要修改的用户名和访问主机</span><br><span class="line">test@%:修改为的用户名和访问主机</span><br><span class="line">rename user &apos;test&apos;@&apos;localhost&apos; to &apos;test&apos;@&apos;%&apos;;</span><br></pre></td></tr></table></figure><ul><li>修改用户密码</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">test@localhost:要修改的用户名和访问主机</span><br><span class="line">123456:新的用户密码</span><br><span class="line">set password for &apos;test&apos;@&apos;localhost&apos; = Password(&apos;123456&apos;);</span><br></pre></td></tr></table></figure><ul><li>授予指定用户’test’对于’world’数据库下’country’表的查询权限</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">select:查询权限;world.country:数据库名.表名;&apos;test&apos;@&apos;localhost&apos;:用户名@访问主机;</span><br><span class="line"></span><br><span class="line">grant select on world.country to &apos;test&apos;@&apos;localhost&apos;;</span><br></pre></td></tr></table></figure><ul><li><p>立即启用修改(默认再次登录才会生效)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flush privileges;</span><br></pre></td></tr></table></figure></li><li><p>撤销指定用户’test’对于’world’数据库下’country’表的查询权限</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">select:查询权限;world.country:数据库名.表名;&apos;test&apos;@&apos;localhost&apos;:用户名@访问主机;</span><br><span class="line">revoke select on world.country from &apos;test&apos;@&apos;localhost&apos;;</span><br></pre></td></tr></table></figure></li><li><p>立即启用修改(默认再次登录才会生效)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flush privileges;</span><br></pre></td></tr></table></figure></li><li><p>授予指定用户’test’对于’world’数据库下所有表的查询、新增、修改、删除权限</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">grant select,insert,update,delete on world.* to &apos;test&apos;@&apos;localhost&apos;;</span><br></pre></td></tr></table></figure></li><li><p>撤销指定用户’test’对于’world’数据库下所有表的查询、新增、修改、删除权限</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">revoke select,insert,update,delete on world.* from &apos;test&apos;@&apos;localhost&apos;;</span><br></pre></td></tr></table></figure></li><li><p>授予指定用户’test’对于’world’数据库下所有表的表结构进行创建、修改、删除权限</p></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">grant create,alter,drop on world.* to &apos;test&apos;@&apos;localhost&apos;;</span><br></pre></td></tr></table></figure><ul><li>撤销指定用户’test’对于’world’数据库下所有表的表结构进行创建、修改、删除权限</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">revoke create,alter,drop on world.* from &apos;test&apos;@&apos;localhost&apos;;</span><br></pre></td></tr></table></figure><ul><li><p>授予指定用户’test’对于’world’数据库下所有存储过程的执行权限，并且该用户有权限转授予其他用户</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">grant execute on world.* to &apos;test&apos;@&apos;localhost&apos; with grant option;</span><br></pre></td></tr></table></figure></li><li><p>撤销指定用户’test’对于’world’数据库下所有存储过程的执行权限，转授予权限一并撤销</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">revoke execute on world.* from &apos;test&apos;@&apos;localhost&apos;;</span><br></pre></td></tr></table></figure></li></ul><h2 id="3、数据库字符校对集"><a href="#3、数据库字符校对集" class="headerlink" title="3、数据库字符校对集"></a>3、数据库字符校对集</h2><p>字符校对集，即排序规则，在某个字符集的情况下，字符集的排列顺序应该是什么，称之为校对集。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">查看所有的字符校对集</span><br><span class="line">后缀为_bin:表示基于二进制编码的直接比较</span><br><span class="line">后缀为_ci:表示对大小写不敏感的比较</span><br><span class="line">后缀为_cs:表示对大小写敏感的比较</span><br><span class="line">show collation;</span><br></pre></td></tr></table></figure><h2 id="4、创建、删除数据库和表"><a href="#4、创建、删除数据库和表" class="headerlink" title="4、创建、删除数据库和表"></a>4、创建、删除数据库和表</h2><ul><li><p>创建一个名为’test’的数据库</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">create database test;</span><br></pre></td></tr></table></figure></li><li><p>创建一个名为’test’的数据库，如果该数据库已存在则不创建，否则再创建</p></li><li><p>并指定默认字符集为’utf8’，字符校对集为’utf8_general_ci’</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">create database if not exists test default charset utf8 collate utf8_general_ci;</span><br></pre></td></tr></table></figure></li><li><p>删除名为’test’的数据库</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">drop database test;</span><br></pre></td></tr></table></figure></li><li><p>创建一个名为’Student’的数据表，如果该数据表已存在则不创建，否则再创建</p><blockquote><p>engine:指定数据库引擎为’InnoDB’<br>auto_increment:指定自增列的起始值为1</p></blockquote></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">create table if not exists Student&#123;</span><br><span class="line">    ID int  not null auto_increment, #自动增长列</span><br><span class="line"></span><br><span class="line">   StuNo varchar(32) not null,</span><br><span class="line">   </span><br><span class="line">   StuName varchar(8) not null,</span><br><span class="line">   </span><br><span class="line">   StuSex varchar(8) null,</span><br><span class="line">   </span><br><span class="line">   StuBirthday tinyint null,</span><br><span class="line">   </span><br><span class="line">   CreateTime datetime null,</span><br><span class="line">   </span><br><span class="line">   primary key (ID) #指定主键列</span><br><span class="line">   </span><br><span class="line">&#125;engine=InnoDB auto_increment=1 default charset=utf8 collate=utf8_general_ci;</span><br></pre></td></tr></table></figure><ul><li><p>删除数据表 student，该操作会删除所有数据包括表结构、视图、索引、约束等。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">drop table test.student;</span><br></pre></td></tr></table></figure></li><li><p>删除数据表中的所有数据，该操作会删除表中所有的数据，但是会保留表结构、视图、索引、约束等。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">truncate table test.student;</span><br></pre></td></tr></table></figure></li><li><p>创建一个临时表，临时表的创建与数据表的创建类似，只不过需要添加关键字 temporary。</p></li><li><p>临时表的作用域为当前会话，即当前连接可见，当断开当前连接时会自动销毁，当然也可以手动删除，删除方式与数据表一样。</p></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">create temporary table Product&#123;</span><br><span class="line">   ProName varchar(32) not null,</span><br><span class="line">   Price decimal(10,3) not null default 0.000</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><ul><li><p>复制指定数据表的表结构到创建的新表。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">create table test.StudentBak like test.student;</span><br></pre></td></tr></table></figure></li><li><p>复制指定数据表的表结构及所有数据到创建的新表。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">create table test.StudentBak select * from test.student;</span><br></pre></td></tr></table></figure></li></ul><h2 id="5、DML操作"><a href="#5、DML操作" class="headerlink" title="5、DML操作"></a>5、DML操作</h2><ul><li><p>向数据表中插入数据</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">insert into student(StuNo,StuName,StuSex,Stubirthday,CreateTime) </span><br><span class="line">select &apos;A001&apos;,&apos;小张&apos;,&apos;男&apos;,str_to_date(&apos;1988-06-09&apos;,&apos;%Y-%m-%d&apos;),current_timestamp() </span><br><span class="line">union all</span><br><span class="line">select &apos;A002&apos;,&apos;小红&apos;,&apos;女&apos;,str_to_date(&apos;1990-08-10&apos;,&apos;%Y-%m-%d&apos;),current_timestamp()</span><br></pre></td></tr></table></figure></li><li><p>在插入重复的数据时，会直接跳过重复数据的插入。在有自增列或主键的数据表中不起作用，因为自增列和主键都具有唯一性。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">insert ignore into test.student(stuno,stuname,stusex,stubirthday,createtime) values (&apos;A003&apos;,&apos;小鱼&apos;,&apos;女&apos;,&apos;1991-07-07&apos;,current_timestamp());</span><br></pre></td></tr></table></figure></li><li><p>MySQL的WHERE子句默认是不区分大小写的，如果需要区分大小写，就要在字段前加上关键字 binary</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select * from student where stuno=&apos;a001&apos;;    #&apos;1&apos;, &apos;A001&apos;, &apos;小张&apos;, &apos;男&apos;, &apos;1988-06-09&apos;, &apos;2018-01-12 12:17:00&apos; select * from student where binary stuno=&apos;a001&apos;;    #null</span><br></pre></td></tr></table></figure></li><li><p>limit:用于设置返回的记录数。</p></li><li><p>offset:用于设置select语句开始查询的数据偏移量，默认为零。</p></li><li><p>表示只取前10条数据</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select * from world.city limit 10;</span><br></pre></td></tr></table></figure></li><li><p>表示跃过5条，从第6条数据开始取10条数据。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select * from world.city limit 10 offset 5;</span><br></pre></td></tr></table></figure></li><li><p>表示从第10条开始取5条数据。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select * from world.city limit 10,5;</span><br></pre></td></tr></table></figure></li><li><p>regexp:用于设置正则表达式匹配项，类似于模糊匹配like。</p></li><li><p>表示查询名称以字符 ‘A’(不区分大小写)开头的记录。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select * from world.city where Name regexp &apos;^A&apos;;</span><br></pre></td></tr></table></figure></li><li><p>表示查询名称中包含字符串 ‘mer’ 的记录。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select * from world.city where Name regexp &apos;mer&apos;;</span><br></pre></td></tr></table></figure></li><li><p>表示查询名称以字符 ‘a’ 或字符 ‘b’ 开头的记录或者以字符 ‘r’ 结尾的记录。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select * from world.city where Name regexp &apos;^\[ab]|r$&apos;;</span><br></pre></td></tr></table></figure></li></ul><h2 id="6、DDL操作"><a href="#6、DDL操作" class="headerlink" title="6、DDL操作"></a>6、DDL操作</h2><ul><li><p>向指定数据表添加一列，默认添加到数据表字段的末尾。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">alter table test.student add column1 varchar(10) null;</span><br></pre></td></tr></table></figure></li><li><p>向指定数据表添加一列，并设置默认值为：0</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">alter table demo.chinesecharinfo add column IsUseful tinyint unsigned not null default 0;</span><br></pre></td></tr></table></figure></li><li><p>first关键字用于把添加的列设置为第一列。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">alter table test.student add column1 varchar(10) null first;</span><br></pre></td></tr></table></figure></li><li><p>after关键字用于把添加的列设置在指定列的后面，StuSex为指定列的列名。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">alter table test.student add column1 varchar(10) null after StuSex;</span><br></pre></td></tr></table></figure></li><li><p>删除指定列名的列，当数据表仅剩一个字段时，无法进行删除。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">alter table test.student drop column1;</span><br></pre></td></tr></table></figure></li><li><p>修改指定列的数据类型，并设置该列位于指定列名的列之后。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">alter table test.student modify column1 char(10) null after CreateTime;</span><br></pre></td></tr></table></figure></li><li><p>关键字column可省略</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">alter table test.student modify column column1 char(10) null after CreateTime;</span><br></pre></td></tr></table></figure></li><li><p>修改指定列的列名和数据类型，并设置该列位于指定列名的列之后。</p><blockquote><p>column1:为原列名</p></blockquote></li></ul><blockquote><p>column2:为新的列名</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">alter table test.student change column1 column2 varchar(10) null after CreateTime;</span><br></pre></td></tr></table></figure><ul><li><p>修改指定列的默认值。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">alter table test.student alter column2 set default &apos;123&apos;;</span><br></pre></td></tr></table></figure></li><li><p>删除指定列的默认值。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">alter table test.student alter column2 drop default;</span><br></pre></td></tr></table></figure></li><li><p>修改数据表的存储引擎。</p></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">alter table test.student engine = myisam;</span><br><span class="line"></span><br><span class="line">alter table test.student engine = InnoDB;</span><br></pre></td></tr></table></figure><ul><li><p>修改数据表的自增长值的起始值。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">alter table test.student auto_increment=10;</span><br></pre></td></tr></table></figure></li><li><p>重建自增长列，当删除数据过多，自增长列的值比较混乱时可以使用，但是重建时如果有新的数据插入，有可能会出现混乱。</p></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">alter table test.student drop ID;</span><br><span class="line"></span><br><span class="line">alter table test.student add ID int not null auto_increment first;</span><br><span class="line"></span><br><span class="line">alter table test.student add primary key(ID);</span><br></pre></td></tr></table></figure><ul><li>修改数据表的表名称。<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">alter table test.student rename to test.StudentBak;</span><br></pre></td></tr></table></figure></li></ul><h2 id="7、索引"><a href="#7、索引" class="headerlink" title="7、索引"></a>7、索引</h2><ul><li>查看指定数据表的索引。</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">show index from test.student;</span><br></pre></td></tr></table></figure><ul><li><p>删除指定的索引。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">drop index index_name on test.student;</span><br></pre></td></tr></table></figure></li><li><p>修改表结构的方式删除索引。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">alter table test.student drop index index_name;</span><br></pre></td></tr></table></figure></li><li><p>创建普通索引。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">create index index_name on test.student(StuNo);</span><br></pre></td></tr></table></figure></li><li><p>修改表结构的方式添加索引，这种方式可以不指定索引名称，不指定系统会自动默认一个索引名称。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">alter table test.student add index index_name(StuNo);</span><br></pre></td></tr></table></figure></li><li><p>创建唯一索引，指定创建唯一索引的列的值必须是唯一的，不能重复，但是可以为null。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">create unique index index_name on test.student(StuNo);</span><br></pre></td></tr></table></figure></li><li><p>修改表结构的方式添加唯一索引。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">alter table test.student add unique index index_name(StuNo);</span><br></pre></td></tr></table></figure></li><li><p>修改表结构的方式添加主键，必须保证添加主键的列的值不能为null，并且是唯一的，不可重复。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">alter table test.student add primary key PrimaryKey_Name(ID);</span><br></pre></td></tr></table></figure></li><li><p>删除指定数据表的主键，删除主键时只需指定 primary key，删除索引时必须指定索引名。</p></li><li><p>注意：当主键列同时是自增长列时，不能直接删除主键，需要先删除自增长约束。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">alter table test.student drop primary key;</span><br></pre></td></tr></table></figure></li><li><p>添加全文索引。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">alter table test.student add fulltext index_name(StuNo);</span><br></pre></td></tr></table></figure></li><li><p>加上关键字ignore创建的唯一索引和主键，在插入重复数据时，会直接过滤掉重复数据，并且不会报错，否则就会抛出错误。</p></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">alter ignore table test.student add primary key(ID);</span><br><span class="line"></span><br><span class="line">alter ignore table test.student add unique index index_name(StuNo);</span><br></pre></td></tr></table></figure><h2 id="8、事务"><a href="#8、事务" class="headerlink" title="8、事务"></a>8、事务</h2><ul><li>关闭自动提交事务</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">set autocommit=0;</span><br></pre></td></tr></table></figure><ul><li><p>开启自动提交事务，默认为开启。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">set autocommit=1;</span><br></pre></td></tr></table></figure></li><li><p>显式地开启一个事务，有以下两种方法。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">start transaction;</span><br><span class="line">begin;</span><br></pre></td></tr></table></figure></li><li><p>commit用于提交事务，只有当自动提交事务被关闭时需要使用。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">commit;</span><br></pre></td></tr></table></figure></li><li><p>rollback用于回滚事务，撤销对于数据库所做的未提交的操作。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rollback;</span><br></pre></td></tr></table></figure></li><li><p>用于设置一个保存点，identifier是指保存点的名称。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">savepoint identifier;</span><br></pre></td></tr></table></figure></li><li><p>用于删除一个保存点，如果指定的保存点不存在，将会抛出一个异常。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">release savepoint identifier;</span><br></pre></td></tr></table></figure></li><li><p>把事务回滚到指定的保存点。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rollback to identifier;</span><br></pre></td></tr></table></figure></li><li><p>设置事务隔离级别，只对下一个事务有效。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">set transaction isolation level &#123;事务隔离级别&#125;;</span><br></pre></td></tr></table></figure></li><li><p>设置事务隔离级别，对当前会话的事务有效。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">set session transaction isolation level &#123;事务隔离级别&#125;;</span><br></pre></td></tr></table></figure></li><li><p>设置事务隔离级别，对后面建立MySQL连接的事务有效。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">set global transaction isolation level &#123;事务隔离级别&#125;;</span><br></pre></td></tr></table></figure></li><li><p>事务的隔离级别</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">read uncommitted(读取未提交):</span><br></pre></td></tr></table></figure></li></ul><blockquote><p>该级别引发的问题是脏读，会读取到其他事务未提交的数据。</p></blockquote><ul><li><p>read committed(读取已提交):</p><blockquote><p>该级别引发的问题是不可重复读，即设置为该级别的事务只能读取到其他事务已经提交的数据，未提交的数据不能读取，会造成多次查询的结果不一致。</p></blockquote></li><li><p>repeatable read(可重复读):</p></li></ul><blockquote><p>该级别引发的问题是幻读，即当用户修改某一范围内的数据行时，另一个事务又在该范围内插入了新的行，当用户再次读取该范围内的数据时，会发现有新的数据行没有被修改。</p></blockquote><blockquote><p>该级别是MySQL数据库默认的事务隔离级别。注意：该级别不会对事务查询到的行加行锁，也就是该事务查询到的行，其他事务依然能进行修改，但是能保证数据的一致性。</p></blockquote><ul><li>serializable(可串行化):<blockquote><p>该级别是MySQL中事务隔离级别最高的，该级别会锁住事务中操作的整张表，因此不会出现以上三个级别的问题。但是这种隔离级别并发性极地，开发中很少会用到。</p></blockquote></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;1、数据库基本操作&quot;&gt;&lt;a href=&quot;#1、数据库基本操作&quot; class=&quot;headerlink&quot; title=&quot;1、数据库基本操作&quot;&gt;&lt;/a&gt;1、数据库基本操作&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;选择要操作的数据库&lt;/p&gt;
&lt;figure class=&quot;high
      
    
    </summary>
    
    
      <category term="笔记" scheme="http://luoyd.cn/categories/%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="悦读" scheme="http://luoyd.cn/tags/%E6%82%A6%E8%AF%BB/"/>
    
      <category term="笔记" scheme="http://luoyd.cn/tags/%E7%AC%94%E8%AE%B0/"/>
    
      <category term="数据库" scheme="http://luoyd.cn/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
      <category term="MySQL" scheme="http://luoyd.cn/tags/MySQL/"/>
    
  </entry>
  
  <entry>
    <title>邮箱正则表达式</title>
    <link href="http://luoyd.cn/2019/09/26/%E9%82%AE%E7%AE%B1%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/"/>
    <id>http://luoyd.cn/2019/09/26/邮箱正则表达式/</id>
    <published>2019-09-26T14:04:15.000Z</published>
    <updated>2019-12-06T09:36:55.230Z</updated>
    
    <content type="html"><![CDATA[<h2 id="邮箱正则表达式"><a href="#邮箱正则表达式" class="headerlink" title="邮箱正则表达式"></a>邮箱正则表达式</h2><pre><code>/^([a-zA-Z0-9_\.\-])+\@(([a-zA-Z0-9\-])+\.)+([a-zA-Z0-9]{2,4})+$/</code></pre><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">import java.util.regex.Matcher;</span><br><span class="line">import java.util.regex.Pattern;</span><br><span class="line"></span><br><span class="line">public class RegexMatches &#123;</span><br><span class="line"></span><br><span class="line">public static void main(String args[]) &#123;</span><br><span class="line">String str = &quot;&quot;;</span><br><span class="line">String pattern = &quot;\w[-\w.+]*@([A-Za-z0-9][-A-Za-z0-9]+\.)+[A-Za-z]&#123;2,14&#125;&quot;;</span><br><span class="line"></span><br><span class="line">Pattern r = Pattern.compile(pattern);</span><br><span class="line">Matcher m = r.matcher(str);</span><br><span class="line">System.out.println(m.matches());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;邮箱正则表达式&quot;&gt;&lt;a href=&quot;#邮箱正则表达式&quot; class=&quot;headerlink&quot; title=&quot;邮箱正则表达式&quot;&gt;&lt;/a&gt;邮箱正则表达式&lt;/h2&gt;&lt;pre&gt;&lt;code&gt;/^([a-zA-Z0-9_\.\-])+\@(([a-zA-Z0-9\-])+\.
      
    
    </summary>
    
    
    
      <category term="正则表达式" scheme="http://luoyd.cn/tags/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/"/>
    
      <category term="邮箱" scheme="http://luoyd.cn/tags/%E9%82%AE%E7%AE%B1/"/>
    
  </entry>
  
  <entry>
    <title>我的Bootstrap4 学习笔记</title>
    <link href="http://luoyd.cn/2019/09/26/Bootstrap4/"/>
    <id>http://luoyd.cn/2019/09/26/Bootstrap4/</id>
    <published>2019-09-26T06:16:19.825Z</published>
    <updated>2019-12-24T04:50:51.556Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1、Bootstraps安装使用"><a href="#1、Bootstraps安装使用" class="headerlink" title="1、Bootstraps安装使用"></a>1、Bootstraps安装使用</h2><h3 id="Bootstrap4-CDN"><a href="#Bootstrap4-CDN" class="headerlink" title="Bootstrap4 CDN"></a><a href="https://getbootstrap.com" target="_blank" rel="noopener">Bootstrap4 CDN</a></h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--新Bootstrap 4 核心CSS文件 --&gt;</span><br><span class="line">&lt;link rel=&quot;stylesheet&quot; href=&quot;https://cdn.staticfile.org/twitter-bootstrap/4.3.1/css/bootstrap.min.css&quot;&gt;</span><br><span class="line"></span><br><span class="line">&lt;!--Jquery文件。务必在bootstrap.min.js之前引入 --&gt;</span><br><span class="line">&lt;script src=&quot;https://cdn.staticfile.org/jquery/3.2.1/jquery.min.js&quot;&gt;&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;!--bootstrap.bundle.min.js 用于弹窗、提示下拉菜单，包含了popper.min.js--&gt;</span><br><span class="line">&lt;script src=&quot;https:cdn.staticfile.org/popper.js/1.15.0/umd/popper.min.js&quot;&gt;&lt;/script&gt;&lt;br&gt;</span><br><span class="line"></span><br><span class="line">&lt;!--最新的Bootstrap4 核心JavaScript文件 --&gt;</span><br><span class="line">&lt;script src=&quot;https://cdn.staticfile.org/twitter-bootstrap/4.3.1/js/bootstrap.min.js&quot;&gt;&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;meta name=&quot;viewport&quot; content=&quot;width=device-width,initial-scale=1,shrink-to-fit=no&quot;&gt;</span><br></pre></td></tr></table></figure><p>width=device-width 表示宽度是设备屏幕的宽度<br><br>initial-scale=1 表示初始的缩放比例<br><br>shrink-to-fit=no 自动适应手机屏幕宽度<br></p><h3 id="容器类"><a href="#容器类" class="headerlink" title="容器类"></a>容器类</h3><ul><li>.container类用于固定宽度并支持响应式布局的容器。<br><img src></li><li>.container-fluid类用于100%宽度，占据全部视口（viewport）的容器。<br><img src><h2 id="2、Bootstrap4-网格系统"><a href="#2、Bootstrap4-网格系统" class="headerlink" title="2、Bootstrap4 网格系统"></a>2、Bootstrap4 网格系统</h2><h3 id="网格类-5个类"><a href="#网格类-5个类" class="headerlink" title="网格类(5个类)"></a>网格类(5个类)</h3></li><li>.col- 针对所有设备</li><li>.col-sm- 平板-屏幕宽度等于或大于576px</li><li>.col-md- 桌面显示器屏幕-屏幕宽度等于或大于768px</li><li>.col-lg- 大桌面显示器 宽度等于或大于992px</li><li>.col-xl- 屏幕宽度等于或大于1200px<h3 id="规则"><a href="#规则" class="headerlink" title="规则"></a>规则</h3></li><li>网格每一行需要放在设置.container(固定宽度)或.container-fluid(全屏宽度)类的容器中，以便自动设置外边距与内边距。</li><li>使用行来创建水平列组。</li><li>内容需要放在列中，并且只有列可以是行的直接子节点。</li><li>预定义的类如.row,.col-sm-4可用于快速制作网格布局。</li><li>列通过填充创建内容的间隙。这个间隙是通过.rows类上的负边距设置第一行和最后一行的偏移。</li><li>网格列是通过跨越指定的12个列来创建。</li><li>偏移列通过offset-*-*类来设置。第一个星号是sm(576px),md(768px),lg(992px),xl(1200px)。第二个星号是1～11的数字。</li><li>例如：.offset-md-*类。将一个列的左外边距（margin）增加<em>列<br>即把.col-md-\</em>往右移四列格。<h2 id="3、BootStrap4-文字排版"><a href="#3、BootStrap4-文字排版" class="headerlink" title="3、BootStrap4 文字排版"></a>3、BootStrap4 文字排版</h2><h3 id="默认设置"><a href="#默认设置" class="headerlink" title="默认设置"></a>默认设置</h3></li><li>默认的font-size为16px，line-height为1.5。</li><li>默认的font-family为Helvetica Neue。</li><li>所有的&lt;p&gt;元素margin-top:0、margin-bottom:1rem(16px)。</li><li>&lt;h1&gt;(2.5rem = 40px)、&lt;h2&gt;(2rem = 32px)、&lt;h3&gt;(1.75rem = 28px)、&lt;h4&gt;(1.5rem = 24px)、&lt;h5&gt;(1.25rem = 20px)、&lt;h6&gt;(1rem = 16px)</li><li>Display标题类可以输出更大更粗的字体样式,.display-1~.display-4字体依次减小。</li><li>&lt;small&gt;元素用于创建字号更小的颜色更浅的文本，&lt;mark&gt;为黄色背景及有一定的内边距，&lt;abbr&gt;为显示在文本底部的一条虚线边框，&lt;blockquote&gt;用于引用内容。<h2 id="4、Bootstrap4-颜色"><a href="#4、Bootstrap4-颜色" class="headerlink" title="4、Bootstrap4 颜色"></a>4、Bootstrap4 颜色</h2></li><li>文本颜色类<blockquote><p>.text-muted:柔和的文本<br><br>.text-primary:重要的文本（蓝色）<br><br>.text-success:执行成功的文本（绿色）<br><br>.text-info:代表一些提示信息的文本（靛青色）<br><br>.text-warning:警告文本（黄色）<br><br>.text-danger危险操作文本（红色）<br><br>.text-secondary:副标题（灰色）<br><br>.text-dark:深灰色字体<br><br>.text-light:浅灰色文本文本（白色背景看不清楚）<br><br>.text-white:白色文本（白色背景看不清楚）<br></p></blockquote></li><li>背景颜色<blockquote><p>bg-primary:重要的背景颜色（蓝色）<br><br>bg-success:执行成功背景颜色（绿色）<br><br>bg-info:信息提示背景颜色（浅蓝色）<br><br>bg-waring:警告背景颜色（黄色）<br><br>bg-danger:危险背景颜色（红色）<br><br>bg-secondary:副标题背景颜色（灰色）<br><br>bg-dark:深灰色背景颜色<br><br>bg-light:浅灰色背景颜色<br></p></blockquote></li></ul><h2 id="5、Bootstrap4-表格"><a href="#5、Bootstrap4-表格" class="headerlink" title="5、Bootstrap4 表格"></a>5、Bootstrap4 表格</h2><ul><li>基础表格 .table 例：</li><li>条纹表格 .table-striped </li><li>带边框表格 .table-bordered </li><li>鼠标悬停状态表格 .table-hover 为表格的每行添加鼠标悬停效果（灰色背景）</li><li>黑色背景表格 .table-dark 为表格添加黑色背景</li><li>黑色条纹表格 .table-dark和.table-striped 联合使用</li><li>鼠标悬停效果-黑色背景表格.table-dark和.table-hover 联合使用</li><li>指定意义的颜色类设置表格行或者单元格设置颜色 .table-*（颜色：primary、success、danger…）</li><li>表头颜色 .thead-dark给表头添加黑色背景。.thead-light 用于给表添加灰色背景。</li><li>较小的表格 .table-sm  通过减少内边距来设置较小的表格</li><li>响应式表格.table-responsive在屏幕小于992px时创建水平滚钉条，如果可视区宽度大于992px则显示不同效果（没有滚动条）<blockquote><p>.table-responsive-sm  屏幕宽度小于576px<br>.table-responsive-md  屏幕宽度小于768px<br>.table-responsive-lg  屏幕宽度小于992px<br>.table-responsive-xl  屏幕宽度小于1200px</p></blockquote></li></ul><h2 id="6、Bootstrap4-图像形状"><a href="#6、Bootstrap4-图像形状" class="headerlink" title="6、Bootstrap4 图像形状"></a>6、Bootstrap4 图像形状</h2><ul><li>圆角图片 .rounded</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;img src= &quot;lyd.jpg&quot; class=&quot;rounded&quot; alt=&quot;**&quot;&gt;</span><br></pre></td></tr></table></figure><ul><li>椭圆图片 .rounded-circle</li><li>缩略图(图片有边框) .img-thumbnail</li><li>图片对齐方式 .float-right(右对齐) .float-left(左对齐)</li><li>响应式图片 .img-fluid(max-width:100%，height:auto)</li></ul><h2 id="7、Bootstrap4-Jumbotron"><a href="#7、Bootstrap4-Jumbotron" class="headerlink" title="7、Bootstrap4 Jumbotron"></a>7、Bootstrap4 Jumbotron</h2><ul><li>&lt;div&gt;元素中添加.Jumbotron类（超大屏幕）创建一个超大灰色背景框，</li><li>全屏幕的Jumbotron：在.jumbotron-fluid类里的div添加.container或.container-fluid类实现<h2 id="8、信息提示框"><a href="#8、信息提示框" class="headerlink" title="8、信息提示框"></a>8、信息提示框</h2></li><li>提示框在.alert类后面添加.ale+rt-success, .alert-info, .alert-warning, .alert-danger, .alert-primary, .alert-secondary, .alert-light,. alert-dark类实现</li><li>提示框添加链接： 提示框中在链接的标签上添加.alert-link类</li><li>关闭提示框 在提示框的div中添加.alert-dismissible 然后在关闭按钮的链接上添加class=”close”和data-dismiss=”alert”类。</li><li>提示框动画 .fade和.show类用于设置提示框在关闭时的淡出和淡入效果。&lt;div class=”alert alert-danger alert-dismissible fade show”&gt;<h2 id="9、按钮"><a href="#9、按钮" class="headerlink" title="9、按钮"></a>9、按钮</h2><h3 id="样式"><a href="#样式" class="headerlink" title="样式"></a>样式</h3></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&lt;button type=&quot;button&quot; class=&quot;btn&quot;&gt;基本按钮&lt;/button&gt;</span><br><span class="line"></span><br><span class="line">&lt;button type=&quot;button&quot; class=&quot;btn btn-primary&quot;&gt;主要按钮&lt;/button&gt;</span><br><span class="line"></span><br><span class="line">&lt;button type=&quot;button&quot; class=&quot;btn btn-secondary&quot;&gt;次要按钮&lt;/button&gt;</span><br><span class="line"></span><br><span class="line">&lt;button type=&quot;button&quot; class=&quot;btn btn-success&quot;&gt;成功&lt;/button&gt;</span><br><span class="line"></span><br><span class="line">&lt;button type=&quot;button&quot; class=&quot;btn btn-info&quot;&gt;信息&lt;/button&gt;</span><br><span class="line"></span><br><span class="line">&lt;button type=&quot;button&quot; class=&quot;btn btn-warning&quot;&gt;警告&lt;/button&gt;</span><br><span class="line"></span><br><span class="line">&lt;button type=&quot;button&quot; class=&quot;btn btn-danger&quot;&gt;危险&lt;/button&gt;</span><br><span class="line"></span><br><span class="line">&lt;button type=&quot;button&quot; class=&quot;btn btn-dark&quot;&gt;黑色&lt;/button&gt;</span><br><span class="line"></span><br><span class="line">&lt;button type=&quot;button&quot; class=&quot;btn btn-light&quot;&gt;浅色&lt;/button&gt;</span><br><span class="line"></span><br><span class="line">&lt;button type=&quot;button&quot; class=&quot;btn btn-link&quot;&gt;链接&lt;/button&gt;</span><br></pre></td></tr></table></figure><h3 id="按钮类可以作用与-lt-a-gt-、-lt-button-gt-或者-lt-input-gt-元素上。"><a href="#按钮类可以作用与-lt-a-gt-、-lt-button-gt-或者-lt-input-gt-元素上。" class="headerlink" title="按钮类可以作用与&lt;a&gt;、&lt;button&gt;或者&lt;input&gt;元素上。"></a>按钮类可以作用与&lt;a&gt;、&lt;button&gt;或者&lt;input&gt;元素上。</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;a href=&quot;#&quot; class=&quot;btn btn-info&quot; role=&quot;button&quot;&gt;链接按钮&lt;/a&gt;</span><br><span class="line">&lt;button type=&quot;button&quot; class=&quot;btn btn-info&quot;&gt;按钮&lt;/button&gt;</span><br><span class="line">&lt;input type=&quot;button&quot; class=&quot;btn btn-info&quot; value=&quot;输入框按钮&quot;&gt;</span><br><span class="line">&lt;input type=&quot;submit&quot; class=&quot;btn btn-info&quot; value=&quot;提交按钮&quot;&gt;</span><br></pre></td></tr></table></figure><h3 id="按钮设置边框"><a href="#按钮设置边框" class="headerlink" title="按钮设置边框"></a>按钮设置边框</h3><ul><li>&lt;button type=”button” class=”btn btn-outline-*&gt;*按钮&lt;/button&gt;</li><li>*可以是primary（主要按钮） secondary（次要按钮） success（成功） info（信息） waring（警告） danger（危险） dark（黑色） light（浅色）注意设置按钮边框为浅色时还要在其后加text-dark。</li></ul><h3 id="不同大小的按钮"><a href="#不同大小的按钮" class="headerlink" title="不同大小的按钮"></a>不同大小的按钮</h3><ul><li>btn-lg(大号)</li><li>btn-sm(小号)</li><li>不设置即为默认，为中号</li></ul><h3 id="块级按钮"><a href="#块级按钮" class="headerlink" title="块级按钮"></a>块级按钮</h3><ul><li>.btn-block</li></ul><h3 id="激活和禁用的按钮"><a href="#激活和禁用的按钮" class="headerlink" title="激活和禁用的按钮"></a>激活和禁用的按钮</h3><ul><li>.active类设置按钮是可用的</li><li>disabled 属性设置按钮是不可点击的</li><li>注意&lt;a&gt;元素不支持disable属性，可以通过.disable类来禁止链接的点击。</li></ul><h2 id="按钮组"><a href="#按钮组" class="headerlink" title="按钮组"></a>按钮组</h2><p>bootstrap4允许将按钮放在同一行上，可以在&lt;div&gt;元素上添加.btn-group类创建按钮组。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;div class=&quot;btn-group&quot;&gt;</span><br><span class="line">    &lt;button type=&quot;button&quot; class=&quot;btn btn-primary&quot;&gt;Apple&lt;/button&gt; </span><br><span class="line">    &lt;button type=&quot;button&quot; class=&quot;btn btn-primary&quot;&gt;Samsung&lt;/button&gt;</span><br><span class="line">    &lt;button type=&quot;button&quot; class=&quot;btn btn-primary&quot;&gt;Sony&lt;/button&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure><ul><li>.btn-group-lg|sm类设置按钮组的大小。</li><li>.btn-group-vertical类创建垂直按钮组</li><li>在按钮组内设置下拉菜单</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;div class=&quot;btn-group&quot;&gt;</span><br><span class="line">    &lt;button type=&quot;button&quot; class=&quot;btn btn-primary dropdown-toggle&quot; data-toggle=&quot;dropdown&quot;&gt;Sony&lt;/button&gt;</span><br><span class="line">    &lt;div class=&quot;dropdown-menu&quot;&gt;</span><br><span class="line">        &lt;a class=&quot;dropdown-item&quot; href=&quot;#&quot;&gt;Tablet&lt;/a&gt;</span><br><span class="line">        &lt;a class=&quot;dropdown-item&quot; href=&quot;#&quot;&gt;Smartphone&lt;/a&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure><h3 id="拆分按钮下拉菜单"><a href="#拆分按钮下拉菜单" class="headerlink" title="拆分按钮下拉菜单"></a>拆分按钮下拉菜单</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;div class=&quot;btn-group&quot;&gt;</span><br><span class="line">    &lt;button type=&quot;button&quot; class=&quot;btn btn-primary&quot;&gt;Sony&lt;/button&gt;</span><br><span class="line">    &lt;button type=&quot;button&quot; class=&quot;btn btn-primary dropdown-toggle dropdown-toggle-split&quot; data-toggle=&quot;dropdown&quot;&gt;</span><br><span class="line">     &lt;span class=&quot;caret&quot;&gt;&lt;/span&gt;</span><br><span class="line">    &lt;/button&gt;</span><br><span class="line"></span><br><span class="line">    &lt;div class=&quot;dropdown-menu&quot;&gt;</span><br><span class="line">       &lt;a class=&quot;dropdown-item&quot; href=&quot;#&quot;&gt;Tablet&lt;/a&gt;</span><br><span class="line">       &lt;a class=&quot;dropdown-item&quot; href=&quot;#&quot;&gt;Smartphone&lt;/a&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure><h3 id="垂直按钮组及下拉菜单"><a href="#垂直按钮组及下拉菜单" class="headerlink" title="垂直按钮组及下拉菜单"></a>垂直按钮组及下拉菜单</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;div class=&quot;btn-group-vertical&quot;&gt;</span><br><span class="line">    &lt;button type=&quot;button&quot; class=btn btn-primary&gt;Apple&lt;/button&gt;</span><br><span class="line">    &lt;div class=&quot;btn-group&quot;&gt;</span><br><span class="line">       &lt;button type=&quot;button&quot; class=&quot;btn btn-primary   dropdown-toggle&quot;data-toggle=&quot;dropdown&quot;&gt;Sony&lt;button&gt;</span><br><span class="line">        &lt;div class=&quot;dropdown-menu&quot;&gt;</span><br><span class="line">            &lt;a class=&quot;dropdown-item&quot;href=&quot;#&quot;&gt;Tablet&lt;/a&gt;</span><br><span class="line">            &lt;a class=&quot;dropdown-item&quot; href=&quot;#&quot;&gt;Smartphone&lt;/a&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;1、Bootstraps安装使用&quot;&gt;&lt;a href=&quot;#1、Bootstraps安装使用&quot; class=&quot;headerlink&quot; title=&quot;1、Bootstraps安装使用&quot;&gt;&lt;/a&gt;1、Bootstraps安装使用&lt;/h2&gt;&lt;h3 id=&quot;Bootstrap
      
    
    </summary>
    
    
      <category term="笔记" scheme="http://luoyd.cn/categories/%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="HTML" scheme="http://luoyd.cn/tags/HTML/"/>
    
      <category term="CSS" scheme="http://luoyd.cn/tags/CSS/"/>
    
      <category term="悦读" scheme="http://luoyd.cn/tags/%E6%82%A6%E8%AF%BB/"/>
    
      <category term="前端组件库" scheme="http://luoyd.cn/tags/%E5%89%8D%E7%AB%AF%E7%BB%84%E4%BB%B6%E5%BA%93/"/>
    
  </entry>
  
</feed>
